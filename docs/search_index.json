[["index.html", "Statistical Modeling: A Tools Approach Chapter 1 Week 1: Maximum Likelihood ", " Statistical Modeling: A Tools Approach Carlisle Rainey 2022-11-15 Chapter 1 Week 1: Maximum Likelihood "],["class-agenda.html", "1.1 Class agenda", " 1.1 Class agenda Goal of the class Make you competent users and consumers (applied and methods papers) of methods beyond least-squares. I’m deliberately avoiding causal-inference methods (matching, DID, etc) because we have a class that covers those specifically that we’re offering regularly. I want you to learn a lot about specific tools, but also develop the skills to go and learn more on your own. We can deviate into any particular topic you’d find helpful. Structure of the class We have three sources of information that we’ll learn from: My lectures I have a set of tools that I want to introduce you to throughout the semester. I think of the lecture as offering “an overview” as well as “my take” on the tool. I will not supply all the details–we don’t have enough time and a lecture isn’t the ideal medium for deep and subtle ideas. In the past, I have supplied all of my lecture notes to students. However, the research seems clear that student note-taking boosts learning. Required readings For each topic, I have a few readings selected to supply further details or offer a different perspective. I want you to carefully read the required readings, even if they seem familiar. Suggested and other readings I encourage you to engage readings beyond the required set. These might be “easier” readings (e.g., FPP) or more difficult readings (e.g., Greene). In this category, I want you to use judgement. If the required readings are easy, then I recommend moving on after seriously engaging the required readings. If the required readings are too difficult, then seek out gentler introductions. You should NOT pursue the suggested or other readings at the expense of the required readings. Assessments This semester, we have a large set of tools that you must demonstrate that you (1) understand and (2) can implement. Exams: We will have regular exams that require you to implement and explain particular tools. I’m open to suggestions on frequency, but I suggest a weekly, open-book, take-home exam with about a one hour time limit. I will grade these as pass/fail. You can re-take a (slightly modified) exam up to three times if you fail. Journal: I want to you to journal throughout the semester. I want you to spend at least three hours (hopefully more most weeks) outside of class working on your journal. This journal should have several parts: Class Notes Review Exercises Notes from the required readings, including summaries, reactions, and (especially) questions or flags for ideas you didn’t understand. This latter is very important–it will make us all better. Notes from other readings. I want to give you a bit of space to explore things on your own. You could do a deeper dive on ideas covered carefully in the lectures or readings. Or you could pursue a tangential topic (but keep it somewhat related to class). Again, summaries, reactions, and questions are appropriate. I suggest engaging with reading from substantive course with this class in mind, and record your thoughts in your journal. Connections throughout the semester. Explorations of ideas for future projects. As I see it, “regression modeling” in political science is a several-step process: You begin with a substantive understanding of the way the world works. Choose a regression model. I introduce many. Fit a regression model. Maximum likelihood and Markov chain Monte Carlo methods are powerful and general. Evaluate the fit. What are the properties of the procedure? How well does the model match the data? Interpret the model. I emphasize quantities of interest and confidence intervals, but also discuss hypothesis tests. You then update your understanding of the world. This week, I introduce our first “engine”: maximum likelihood. As a starting point, we use ML to estimate the parameters of Bernoulli, Poisson, and beta distributions (without covariates). I introduce the parametric bootstrap as a tool to obtain confidence intervals. I introduce the invariance property and show how we can use the invariance property to transform the estimated parameters into other quantities of interest. To evaluate the models, we use the predictive distribution. "],["maximum-likelihood.html", "1.2 Maximum Likelihood", " 1.2 Maximum Likelihood Suppose we have a random sample from a distribution \\(f(x; \\theta)\\). We find the maximum likelihood (ML) estimator \\(\\hat{\\theta}\\) of \\(\\theta\\) by maximizing the likelihood of the observed data with respect to \\(\\theta\\). In short, we take the likelihood of the data (given the model and a particular \\(\\theta\\)) and find the parameter \\(\\theta\\) that maximizes it. In practice, to make the math and/or computation a bit easier, we manipulate the likelihood function in two ways: Relabel the likelihood function \\(f(x; \\theta) = L(\\theta)\\), since it’s weird to maximize with respect to a “conditioning variable”fixed” variable. (The notation \\(f(x; \\theta)\\) suggests \\(x\\) varies for a particular \\(\\theta\\).) Work with \\(\\log L(\\theta)\\) rather than \\(L(\\theta)\\). Because \\(\\log()\\) is a monotonically increasing function, the \\(\\theta\\) that maximizes \\(L(\\theta)\\) also maximizes \\(\\log L(\\theta)\\). Suppose we have samples \\(x_1, x_2, ..., x_N\\) from \\(f(x; \\theta)\\). Then the joint density/probability is \\(f(x; \\theta) = \\prod_{n = 1}^N f(x_n; \\theta)\\) and \\(\\log L(\\theta) = \\sum_{n = 1}^N \\log \\left[ f(x_n; \\theta) \\right]\\). The ML estimator \\(\\hat{\\theta}\\) of \\(\\theta\\) is \\(\\arg \\max \\log L(\\theta)\\). In applied problems, we might be able to simplify \\(\\log L\\) substantially. Occasionally, we can find a nice analytical maximum. In many cases, we have a computer find the parameter that maximizes \\(\\log L\\). 1.2.1 Example: Bernoulli Distribution As a running example, we use the toothpaste cap problem: We have a toothpaste cap–one with a wide bottom and a narrow top. We’re going to toss the toothpaste cap. It can either end up lying on its side, its (wide) bottom, or its (narrow) top. We want to estimate the probability of the toothpaste cap landing on its top. We can model each toss as a Bernoulli trial, thinking of each toss as a random variable \\(X\\) where \\(X \\sim \\text{Bernoulli}(\\pi)\\). If the cap lands on its top, we think of the outcome as 1. If not, as 0. Suppose we toss the cap \\(N\\) times and observe \\(k\\) tops. What is the ML estimate \\(\\hat{\\pi}\\) of \\(\\pi\\)? According to the model \\(f(x_i; \\pi) = \\pi^{x_i} (1 - \\pi)^{(1 - x_i)}\\). Because the samples are iid, we can find the joint distribution \\(f(x) = f(x_1) \\times ... \\times f(x_N) = \\prod_{i = 1}^N f(x_i)\\). We’re just multiplying \\(k\\) \\(\\pi\\)s (i.e., each of the \\(k\\) ones has probability \\(\\pi\\)) and \\((N - k)\\) \\((1 - \\pi)\\)s (i.e., each of the \\(N - k\\) zeros has probability \\(1 - \\pi\\)), so that the \\(f(x; \\pi) = \\pi^{k} (1 - \\pi)^{(N - k)}\\). \\[ \\text{the likelihood: } f(x; \\pi) = \\pi^{k} (1 - \\pi)^{(N - k)}, \\text{where } k = \\sum_{n = 1}^N x_n \\\\ \\] Then, we relabel. \\[ \\text{the likelihood: } L(\\pi) = \\pi^{k} (1 - \\pi)^{(N - k)}\\\\ \\] Then, we take the log and simplify. \\[ \\text{the log-likelihood: } \\log L(\\pi) = k \\log (\\pi) + (N - k) \\log(1 - \\pi)\\\\ \\] To find the ML estimator, we find \\(\\hat{\\pi}\\) that maximizes \\(\\log L\\). The code below plots the log-likelihood function using the 8/150 data. pi &lt;- seq(0.01, 0.99, length.out = 1000) data &lt;- tibble(pi = pi) %&gt;% mutate(log_lik = 18*log(pi) + (150 - 8)*log(1 - pi)) ggplot(data, aes(x = pi, y = log_lik)) + geom_vline(xintercept = 8/150, color = &quot;green&quot;) + geom_line() + theme_minimal() In this case, the analytical optimum is easy. \\[ \\begin{aligned} \\frac{d \\log L}{d\\hat{\\pi}} = k \\left( \\frac{1}{\\hat{\\pi}}\\right) + (N - k) \\left( \\frac{1}{1 - \\hat{\\pi}}\\right)(-1) &amp;= 0\\\\ \\frac{k}{\\hat{\\pi}} - \\frac{N - y}{1 - \\hat{\\pi}} &amp;= 0 \\\\ \\frac{k}{\\hat{\\pi}} &amp;= \\frac{N - y}{1 - \\hat{\\pi}} \\\\ k(1 - \\hat{\\pi}) &amp;= (N - y)\\hat{\\pi} \\\\ k - y\\hat{\\pi} &amp;= N\\hat{\\pi} - y\\hat{\\pi} \\\\ k &amp;= N\\hat{\\pi} \\\\ \\hat{\\pi} &amp;= \\frac{k}{N} = \\text{avg}(x)\\\\ \\end{aligned} \\] The ML estimator of \\(\\pi\\) is the average of the \\(N\\) Bernoulli trials, or, equivalently, the fraction of successes. The collected data consist of 150 trials and 8 successes, so the ML estimate of \\(\\pi\\) is \\(\\frac{8}{150} \\approx 0.053\\). 1.2.2 Example: Poisson Distribution Suppose we collect \\(N\\) random samples \\(x = \\{x_1, x_2, ..., x_N\\}\\) and model each draw as a random variable \\(X \\sim \\text{Poisson}(\\lambda)\\). Find the ML estimator of \\(\\lambda\\). \\[ \\begin{aligned} \\text{Poisson likelihood: } f(x; \\lambda) &amp;= \\prod_{n = 1}^N \\frac{\\lambda^{x_n} e^{-\\lambda}}{x_n!} \\\\ L(\\lambda) &amp;= \\prod_{n = 1}^N \\frac{\\lambda^{x_n} e^{-\\lambda}}{x_n!} \\\\ \\log L(\\lambda) &amp;= \\sum_{n = 1}^N \\log \\left[ \\frac{\\lambda^{x_n} e^{-\\lambda}}{x_n!} \\right]\\\\ &amp;= \\sum_{n = 1}^N \\left[ x_n \\log \\lambda + (-\\lambda) \\log e - \\log x_n! \\right]\\\\ &amp;= \\log \\lambda \\left[ \\sum_{n = 1}^N x_n \\right] -N\\lambda + \\sum_{n = 1}^N \\log (x_n!) \\\\ \\end{aligned} \\] To find the ML estimator, we find \\(\\hat{\\lambda}\\) that maximizes \\(\\log L\\). In this case, the analytical optimum is easy. \\[ \\begin{aligned} \\frac{d \\log L}{d\\hat{\\lambda}} = \\frac{1}{\\hat{\\lambda}} \\left[ \\sum_{n = 1}^N x_n \\right] - N &amp;= 0\\\\ \\frac{1}{\\hat{\\lambda}} \\left[ \\sum_{n = 1}^N x_n \\right] &amp;= N \\\\ \\left[ \\sum_{n = 1}^N x_n \\right] &amp;= N \\hat{\\lambda} \\\\ \\hat{\\lambda} &amp;= \\frac{ \\sum_{n = 1}^N x_n }{N} = \\text{avg}(x) \\\\ \\end{aligned} \\] The ML estimator for the Poisson distribution is just the average of the samples. 1.2.3 Remarks The ML estimator is extremely common in political science because they are general, fast, and work extremely well. Lots of models that you’ve heard of, such as logistic regression, are estimated with ML. We can even obtain ML estimates for the linear regression model. We assume that the observed data are samples from a normal distribution with mean \\(\\mu_n = \\alpha + \\beta x_n\\) and variance \\(\\sigma^2\\). For this model, the least-squares estimate that we learned earlier is also the ML estimate. 1.2.4 Example: Beta Distribution Questions: What is the of the beta distribution? \\([0, 1]\\) Is \\(y\\) a discrete random variable or a continuous random variable? Continuous. What is the pdf/pmf? \\(f(y_i; \\alpha, \\beta) = \\dfrac{y_i^{\\alpha - 1}(1 - y_i)^{\\beta - 1}}{B(\\alpha, \\beta)}\\), where \\(B(\\alpha, \\beta) = \\displaystyle \\int_0^1 t^{\\alpha - 1}(1 - t)^{\\beta - 1}dt\\). With the beta distribution, we add two complications that typically occur when using ML. multiple parameters an intractable log-likelihood Start with the probability model \\(Y_i \\sim f(y_i; \\theta)\\). In the case of the beta model, we have \\(Y_i \\sim \\text{beta}(y_i; \\alpha, \\beta)\\). The \\(\\alpha\\) and \\(\\beta\\) here don’t have a convenient interpretation. They are “shape” parameters. You can think of \\(\\alpha\\) as pushing the distribution to the right and \\(\\beta\\) as pushing the distribution to the left. alphas &lt;- c(0.8, 1, 2, 5, 25) betas &lt;- c(0.8, 1, 2, 5, 25) x &lt;- seq(0, 1, length.out = 100) pdfs &lt;- crossing(alpha = alphas, beta = betas, x = x) %&gt;% mutate(pdf = dbeta(x, alpha, beta)) %&gt;% mutate(alpha_lbl = paste0(&quot;alpha == &quot;, alpha), beta_lbl = paste0(&quot;beta == &quot;, beta)) ggplot(pdfs, aes(x = x, y = pdf)) + facet_grid(rows = vars(beta_lbl), cols = vars(alpha_lbl), labeller = &quot;label_parsed&quot;, scales = &quot;free&quot;) + geom_line() We now have two parameters to estimate and we’re going to assume that we have multiple observations, so that \\(y = [y_1, y_2, ,..., y_n]\\). In general, this is how we do ML: Step 1 Write down the likelihood function. Recall that we can obtain the joint density of \\(y_1\\) AND \\(y_2\\) AND … AND \\(y_n\\) by multiplying the probabilities of each (assuming independence). \\[ \\begin{aligned} L(\\alpha, \\beta) = \\displaystyle\\prod_{i = 1}^n \\overbrace{f(y_i;\\alpha, \\beta)}^{\\text{density}} = \\displaystyle\\prod_{i = 1}^n \\dfrac{y_i^{\\alpha - 1}(1 - y_i)^{\\beta - 1}}{B(\\alpha, \\beta)} \\end{aligned} \\] We see again, as will be usual, that we have this complicated product that will make our lives difficult. Step 2 Take the log and simplify. \\[ \\begin{aligned} L(\\alpha, \\beta) &amp;= \\displaystyle\\prod_{i = 1}^n \\dfrac{y_i^{\\alpha - 1}(1 - y_i)^{\\beta - 1}}{B(\\alpha, \\beta)}\\\\ \\log L(\\alpha, \\beta) &amp;= \\displaystyle\\sum_{i = 1}^n \\log \\dfrac{y_i^{\\alpha - 1}(1 - y_i)^{\\beta - 1}}{B(\\alpha, \\beta)}\\\\ &amp;= \\displaystyle\\sum_{i = 1}^n \\left[ \\log y_i^{\\alpha - 1} + \\log (1 - y_i)^{\\beta - 1} - \\log B(\\alpha, \\beta)\\right]\\\\ &amp;= \\displaystyle\\sum_{i = 1}^n \\left[ (\\alpha - 1)\\log y_i + (\\beta - 1)\\log (1 - y_i) - \\log B(\\alpha, \\beta)\\right]\\\\ &amp;= \\displaystyle\\sum_{i = 1}^n \\left[ (\\alpha - 1)\\log y_i + (\\beta - 1)\\log (1 - y_i)\\right] - n \\log B(\\alpha, \\beta)\\\\ \\log L(\\alpha, \\beta) &amp;= (\\alpha - 1) \\sum_{i = 1}^n \\log y_i + (\\beta - 1) \\sum_{i = 1}^n \\log (1 - y_i) - n \\log B(\\alpha, \\beta) \\end{aligned} \\] Step 3 Maximize If we wanted, we could work on this one analytically. Take the derivative w.r.t. \\(\\alpha\\). Take the derivative w.r.t. \\(\\beta\\). Set both equal to zero and solve. (Two equations and two unknowns.) But the last term \\(B(\\alpha, \\beta) = \\int_0^1 t^{\\alpha - 1}(1 - t)^{\\beta - 1}dt\\) is tricky! So let’s do it numerically. To perform the optimization, we need a data set. For now, let’s simulate a fake data set with known parameters y &lt;- rbeta(1000, shape1 = 10, shape2 = 10) Let’s plot the log-likelihood function to see what we’re dealing with. library(plotly) alpha &lt;- seq(0.1, 25, length.out = 100) beta &lt;- seq(0.1, 25, length.out = 100) data &lt;- crossing(alpha, beta) %&gt;% mutate(log_lik = alpha*sum(log(y)) + beta*sum(log(1 - y)) - length(y)*log(beta(alpha, beta))) plot_ly(x = ~alpha, y = ~beta, z = ~log_lik, data = data) %&gt;% add_mesh(labels = c(&quot;alpha&quot;, &quot;beta&quot;, &quot;log-likelihood&quot;)) ggplot(data, aes(x = alpha, y = beta, z = log_lik)) + geom_contour(bins = 100) Now let’s program the log-likelihood function in R to handle the optimization numerically. ll_fn &lt;- function(theta, y) { alpha &lt;- theta[1] # optim() requires a single parameter vector beta &lt;- theta[2] ll &lt;- alpha*sum(log(y)) + beta*sum(log(1 - y)) - length(y)*log(beta(alpha, beta)) return(ll) } Now let’s use optim() to do the maximization. est &lt;- optim(par = c(1, 1), fn = ll_fn, y = y, control = list(fnscale = -1), method = &quot;Nelder-Mead&quot;) print(est$par, digits = 3) ## [1] 9.25 9.24 We can also wrap the optim() in a function, to make obtaining the estimates a little bit easier. est_beta &lt;- function(y) { est &lt;- optim(par = c(1, 1), fn = ll_fn, y = y, control = list(fnscale = -1), method = &quot;Nelder-Mead&quot;) # for &gt;1d problems if (est$convergence != 0) print(&quot;Model did not converge!&quot;) res &lt;- list(est = est$par) return(res) } ml_est &lt;- est_beta(y) print(ml_est, digits = 3) ## $est ## [1] 9.25 9.24 "],["the-invariance-property.html", "1.3 The Invariance Property", " 1.3 The Invariance Property The parameter \\(\\pi\\) has a nice interpretation–it’s a probability or the expected fraction of 1s in the long-run. However, the model parameters might not always have nice interpretation. (See the “shape” parameters of the beta distribution.) Fortunately, it’s easy to transform the ML estimates of the model parameters into ML estimates of a quantity of interest. Suppose we obtain an ML estimate \\(\\hat{\\theta}\\) of a parameter \\(\\theta\\). But we also (or instead) want to estimate a transformation \\(\\tau(\\theta)\\). The we can estimate \\(\\tau(\\theta)\\) by applying the transformation \\(\\tau\\) to the ML estimate \\(\\hat{\\theta}\\), so that \\(\\widehat{\\tau(\\theta)} = \\hat{\\tau} = \\tau(\\hat{\\theta})\\). 1.3.1 Example: Bernoulli Odds Suppose that we want an ML estimator of the odds of getting a top for the toothpaste cap problem. We already used ML to estimate the probability \\(\\pi\\) of getting a top and came up with \\(\\frac{8}{150} \\approx 0.053\\). We can directly transform a probability into odds using \\(\\text{odds} = \\frac{\\pi}{1 - \\pi}\\). This has a nice interpretation: odds = 2 means that a top is twice as likely as not; odds = 0.5 means that a top is half as likely as not. In our case, we can plug our ML estimate of \\(\\pi\\) into the transformation to obtain the ML estimate of the odds. \\[ \\begin{aligned} \\widehat{\\text{odds}} &amp;= \\frac{\\hat{\\pi}}{1 - \\hat{\\pi}} \\\\ &amp; = \\frac{\\frac{8}{150}}{1 - \\frac{8}{150}} \\\\ &amp; = \\frac{\\frac{8}{150}}{\\frac{150}{150} - \\frac{8}{150}} \\\\ &amp; = \\frac{\\frac{8}{150}}{\\frac{142}{150}} \\\\ &amp; = \\frac{8}{142} \\\\ &amp; \\approx 0.056 \\end{aligned} \\] This means that tops are about 0.06 times as likelihood as not-tops. Inverted, you’re about \\(\\frac{142}{8} \\approx 18\\) times more likely to not get a top than get a top. 1.3.2 Example: Poisson SD In this example, we use real data from Hultman, Kathman, and Shannon (2013). They are interested in civilian casualties during civil wars. They write: To gauge the effectiveness of peacekeeping, we explore all intrastate armed conflicts in sub-Saharan Africa from 1991 to 2008 with monthly observations. Conflicts are identified using the Uppsala Conflict Data Program/Peace Research Institute, Oslo (UCDP/PRIO) Armed Conflict Dataset v.4–2010 (Gleditsch et al. 2002; Harbom and Wallensteen 2009), which employs a threshold of 25 battle deaths per year. The dataset covers 36 conflicts, 12 of which have a PKO present at some time. Consistent with previous research, we add two years of observations to the end of each conflict episode, as the theoretical processes associated with victimization may continue after the cessation of hostilities (Cunningham, Gleditsch, and Salehyan 2009). Below are a random sample of 250 observations from their 3,972 monthly observations. civilian_casualties &lt;- c(0, 0, 0, 0, 0, 13, 0, 0, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 12, 0, 0, 4, 147, 0, 934, 0, 0, 42, 0, 24, 124, 0, 1, 0, 0, 0, 145844, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7971, 0, 0, 0, 0, 72, 0, 40, 0, 0, 444, 0, 0, 0, 0, 48, 109, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 41, 0, 0, 0, 0, 84, 0, 34, 0, 0, 0, 0, 0, 0, 0, 1, 0, 15, 0, 0, 15, 0, 104, 0, 24, 0, 0, 104, 0, 0, 4, 0, 0, 0, 0, 0, 12, 41, 0, 0, 37, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 8, 21, 0, 0, 0, 0, 25, 0, 0, 0, 3, 0, 0, 27, 0, 0, 576, 3, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 94, 42, 0, 30, 0, 2, 12, 0, 0, 5, 5 ) We can estimate a single-parameter Poisson model to estimate a mean \\(\\lambda\\) and a rate \\(\\frac{1}{\\lambda}\\). In the case of the Poisson model, the ML estimate \\(\\hat{lambda}\\) of \\(\\lambda\\) is \\(\\text{avg}(y)\\). ml_est &lt;- mean(civilian_casualties) print(ml_est, digits = 3) ## [1] 630 The mean is a nice, interpretable parameter, but we might want also want the SD. For the Poisson distribution, the variance equals the mean, so \\(\\text{Var}(y) = \\text{E}(y) = \\lambda\\). Therefore, the SD is \\(\\sqrt{\\lambda}\\). # ML estimate of SD ml_est &lt;- sqrt(630) print(ml_est, digits = 2) ## [1] 25 This is the ML estimate of the SD of the data, and it carries all the properties of ML estimators. We’re using the invariance property to move from the mean to the SD by a simple transformation. 1.3.3 Example: Beta Mean and Variance Now let’s see an example of the beta distribution \\(Y \\sim \\text{beta}(\\alpha, \\beta)\\). The beta distribution does not have parameters that are easily interpretable in terms of mean and variance. Instead, it has two “shape” parameters \\(\\alpha\\) and \\(\\beta\\) that are in tension—one pulls the distribution to the left and the other pulls the distribution to the right. For this example, I use opinion data from the 50 states from Barrilleaux and Rainey (2014). You can find the data here: https://github.com/carlislerainey/aca-opinion/blob/master/Data/mrp_est.csv To make these data suitable for the beta distribution, I rescaled the observations from a percent to a proportion that ranges from 0 to 1. br &lt;- tibble::tribble( ~state_abbr, ~prop_favorable_aca, &quot;AL&quot;, 0.382711108911823, &quot;AK&quot;, 0.374428493677838, &quot;AZ&quot;, 0.396721609154912, &quot;AR&quot;, 0.361623814680961, &quot;CA&quot;, 0.560999240847165, &quot;CO&quot;, 0.450011650633043, &quot;CT&quot;, 0.522239143634457, &quot;DE&quot;, 0.524637037667977, &quot;DC&quot;, 0.853595690161985, &quot;FL&quot;, 0.47022917052716, &quot;GA&quot;, 0.460216990024346, &quot;HI&quot;, 0.61965456264517, &quot;ID&quot;, 0.282992730179373, &quot;IL&quot;, 0.550517975187469, &quot;IN&quot;, 0.421854785281297, &quot;IA&quot;, 0.454007062646206, &quot;KS&quot;, 0.394817640911206, &quot;KY&quot;, 0.336156662764729, &quot;LA&quot;, 0.425588396620569, &quot;ME&quot;, 0.472319257331465, &quot;MD&quot;, 0.583719023711148, &quot;MA&quot;, 0.531871146279692, &quot;MI&quot;, 0.509096426714406, &quot;MN&quot;, 0.497981331879903, &quot;MS&quot;, 0.468038078521612, &quot;MO&quot;, 0.420161837905426, &quot;MT&quot;, 0.351773944902139, &quot;NE&quot;, 0.365225584190989, &quot;NV&quot;, 0.459026605256376, &quot;NH&quot;, 0.43886275738451, &quot;NJ&quot;, 0.531656835425683, &quot;NM&quot;, 0.528461049175538, &quot;NY&quot;, 0.6010574821094, &quot;NC&quot;, 0.452240849305449, &quot;ND&quot;, 0.367690453757597, &quot;OH&quot;, 0.456298880813516, &quot;OK&quot;, 0.309578750918355, &quot;OR&quot;, 0.455832591683007, &quot;PA&quot;, 0.45819440292365, &quot;RI&quot;, 0.536978574569609, &quot;SC&quot;, 0.444870259057071, &quot;SD&quot;, 0.377170366708612, &quot;TN&quot;, 0.368615233253355, &quot;TX&quot;, 0.428407014559672, &quot;UT&quot;, 0.248496577141183, &quot;VT&quot;, 0.553042362822573, &quot;VA&quot;, 0.470739058046787, &quot;WA&quot;, 0.496133477680592, &quot;WV&quot;, 0.295062675817918, &quot;WI&quot;, 0.489912969415965, &quot;WY&quot;, 0.263567780036879 ) Now let’s find the ML estimates of the two shape parameters of the beta distribution. # obtain ml estimates log_lik_fn &lt;- function(par = c(2, 2), y) { a &lt;- par[1] # pulling these out makes the code a bit easier to follow b &lt;- par[2] log_lik_i &lt;- dbeta(y, shape1 = a, shape2 = b, log = TRUE) log_lik &lt;- sum(log_lik_i) return(log_lik) } opt &lt;- optim(par = c(2, 2), fn = log_lik_fn, y = br$prop_favorable_aca, control = list(fnscale = -1)) ml_est &lt;- opt$par print(ml_est, digits = 3) ## [1] 9.56 11.49 The mean is given by \\(\\frac{\\alpha}{\\alpha + \\beta}\\) and the variance is given by \\(\\frac{\\alpha\\beta}{(\\alpha + \\beta)^2(\\alpha + \\beta + 1)}\\). We can use the invariance property to obtain ML estimates of the mean and variance using our ML estimates of \\(\\alpha\\) and \\(\\beta\\). a &lt;- ml_est[1] b &lt;- ml_est[2] a/(a + b) # mean ## [1] 0.4542508 (a * b)/((a + b)^2 * (a + b + 1)) # var ## [1] 0.01123986 It’s worth noting that these correspond closely, but not exactly to the observed mean and variance. mean(br$prop_favorable_aca) ## [1] 0.4524527 var(br$prop_favorable_aca) ## [1] 0.01073633 "],["the-parametric-bootstrap.html", "1.4 The Parametric Bootstrap", " 1.4 The Parametric Bootstrap The parametric bootstrap is a powerful, general tool to obtain confidence intervals for estimates from parametric models. Importantly, we are going to lean pretty heavily on the assumption that we have a good model of the distribution of the data. (The predictive distribution below allows us to assess this.) There’s also a nonparametric bootstrap, which is much more popular. We consider that later in the semester. Suppose we have a sample \\(y\\) from some known distribution \\(f(y; \\theta)\\) and use \\(y\\) to estimate the model parameter(s) \\(\\theta\\) or some quantity of interest \\(\\tau(\\theta)\\). Remember, we can use ML to estimate either. To compute a confidence interval, we can use a parametric bootstrap. To do implement the parametric bootstrap, do the following: Approximate \\(f(y; \\theta)\\) with \\(\\hat{f} = f(y; \\hat{\\theta})\\). Simulate a new outcome \\(y^{\\text{bs}}\\) from the estimated distribution. Re-compute the estimate of interest \\(\\hat{\\theta}^{\\text{bs}}\\) or \\(\\hat{\\tau}^{\\text{bs}}\\) using the bootstrapped outcome variable \\(y^{\\text{bs}}\\) rather than the observed outcome \\(y\\). Repeat 1 and 2 many times (say 2,000) to obtain many bootstrapped estimates. To obtain the 95% confidence interval, take the 2.5th and 97.5th percentiles of the estimates. This is known as the percentile method. 1.4.1 Example: Toothpaste Cap Problm The code below implements the parametric bootstrap for the toothpaste cap problem. For 2,000 iterations, it draws 150 observations from \\(Y \\sim \\text{Bernoulli}(\\hat{\\pi} = \\frac{8}{150})\\). For each iteration, it computes the ML estimate of \\(\\pi\\) for the bootstrapped data set. Then it computes the percentiles to obtain the confidence interval. n_bs &lt;- 2000 bs_est &lt;- numeric(n_bs) # a container for the estimates for (i in 1:n_bs) { bs_y &lt;- rbinom(150, size = 1, prob = 8/150) bs_est[i] &lt;- mean(bs_y) } print(quantile(bs_est, probs = c(0.025, 0.975)), digits = 2) # 95% ci ## 2.5% 97.5% ## 0.020 0.087 We leave an evaluation of this confidence interval (i.e., Does it capture \\(\\theta\\) 95% of the time?) to later in the semester. 1.4.2 Example: Beta Distribution Now let’s apply the parametric bootrap to a two-parameter model: the beta distribution. First, let’s simulate a (fake) data set to use. # set parameters alpha &lt;- 5 beta &lt;- 2 # simulate data set.seed(1234) n &lt;- 100 y &lt;- rbeta(n, alpha, beta) Now let’s find the ML estimates of the two shape parameters. # obtain ml estimates log_lik_fn &lt;- function(par = c(2, 2), y) { a &lt;- par[1] # pulling these out makes the code a bit easier to follow b &lt;- par[2] log_lik_i &lt;- dbeta(y, shape1 = a, shape2 = b, log = TRUE) log_lik &lt;- sum(log_lik_i) return(log_lik) } opt &lt;- optim(par = c(3, 3), fn = log_lik_fn, y = y, control = list(fnscale = -1)) ml_est &lt;- opt$par print(ml_est, digits = 3) ## [1] 5.46 1.91 Now let’s use those ML estimates to perform a parametric bootstrap and find 95% CIs for the shape parameters. # obtain parametric bootstrap 95% ci for alpha and beta n_bs &lt;- 2000 bs_est &lt;- matrix(NA, nrow = n_bs, ncol = 2) # a container for the estimates for (i in 1:n_bs) { bs_y &lt;- rbeta(n, shape1 = ml_est[1], shape2 = ml_est[2]) bs_opt &lt;- optim(par = c(3, 3), fn = log_lik_fn, y = bs_y, control = list(fnscale = -1)) bs_est[i, ] &lt;- bs_opt$par } ci &lt;- apply(bs_est, MARGIN = 2, quantile, probs = c(0.025, 0.975)) print(ci, digits = 3) # 95% ci ## [,1] [,2] ## 2.5% 4.25 1.52 ## 97.5% 7.52 2.58 If instead we cared about the mean of the beta distribution (which is \\(\\frac{\\alpha}{\\alpha + \\beta}\\)), we can use the parametric bootstrap to obtain a confidence interval for that quantity as well. # obtain parametric bootstrap 95% ci for mean n_bs &lt;- 2000 bs_est &lt;- numeric(n_bs) # a container for the estimates for (i in 1:n_bs) { bs_y &lt;- rbeta(n, shape1 = ml_est[1], shape2 = ml_est[2]) bs_opt &lt;- optim(par = c(3, 3), fn = log_lik_fn, y = bs_y, control = list(fnscale = -1)) bs_alpha &lt;- bs_opt$par[1] bs_beta &lt;- bs_opt$par[2] bs_est[i] &lt;- bs_alpha/(bs_alpha + bs_beta) } print(quantile(bs_est, probs = c(0.025, 0.975)), digits = 2) # 95% ci ## 2.5% 97.5% ## 0.71 0.77 # true mean print(alpha/(alpha + beta), digits = 2) ## [1] 0.71 "],["sampling-distribution.html", "1.5 Sampling Distribution", " 1.5 Sampling Distribution What’s the most important concept in statistical inference? I don’t know, but it could be the sampling distribution. For effect, let me back off the hedge. The most important concept in statistical inference is the sampling distribution. To define a sampling distribution, you need to imagine repeating a study over and over. If each study has a random component (perhaps random sampling or random assignment to treatment and control), then the estimate will differ from study to study. The distribution of the estimates across the studies is called the sampling distribution. 1.5.1 Example: The Toothpaste Cap Problem For a given sample of 150 tosses, we recognize the the ML estimate \\(\\hat{\\pi}\\) does not (usually) exactly equal the parameter \\(\\pi\\). Instead, the particular \\(\\hat{\\pi}\\) that the study produces is draw from a distribution. Let’s illustrate that with a simulation. For these simulations, I suppose that we toss the toothpaste cap 150 times and the chance of a head is 5%. n_sims &lt;- 10 ml_est &lt;- numeric(n_sims) # a container for the estimates for (i in 1:n_sims) { y &lt;- rbinom(150, size = 1, prob = 0.05) ml_est[i] &lt;- mean(y) } print(ml_est, digits = 2) ## [1] 0.060 0.067 0.073 0.053 0.053 0.067 0.020 0.053 0.053 0.047 As you can see, the ML estimates vary to from sample to sample–different data sets produce different ML estimates. We need a way to create a confidence interval that consistently captures \\(\\theta\\). If we repeat the simulations a large number of times, we can see an accuracy picture of the sampling distribution via histogram. n_sims &lt;- 10000 ml_est &lt;- numeric(n_sims) # a container for the estimates for (i in 1:n_sims) { y &lt;- rbinom(150, size = 1, prob = 0.05) ml_est[i] &lt;- mean(y) } gg_data &lt;- data.frame(ml_est = ml_est) ggplot(gg_data, aes(x = ml_est)) + geom_bar() Many of our methods of evaluating an estimator are statements about the sampling distribution of that estimator. In general, we’d like the sampling distribution to be centered over the true parameter of interest and tightly dispersed. "],["bias.html", "1.6 Bias", " 1.6 Bias Imagine repeatedly sampling and computing the estimate \\(\\hat{\\theta}\\) of the parameter \\(\\theta\\) for each sample. In this thought experiment, \\(\\hat{\\theta}\\) is a random variable. We say that \\(\\hat{\\theta}\\) is biased if \\(E(\\hat{\\theta}) \\neq \\theta\\). We say that \\(\\hat{\\theta}\\) is unbiased if \\(E(\\hat{\\theta}) = \\theta\\). We say that the bias of \\(\\hat{\\theta}\\) is \\(E(\\hat{\\theta}) - \\theta\\). Importantly, ML estimators are not necessarily unbiased. Of the models we will see in this course, most are biased. 1.6.1 Example: Bernoulli Distribution For example, we can compute the bias of our ML estimator of \\(\\pi\\) in the toothpaste cap problem. \\[ \\begin{aligned} E\\left[ \\frac{k}{N}\\right] &amp;= \\frac{1}{N} E(k) = \\frac{1}{N} E \\overbrace{ \\left( \\sum_{n = 1}^N x_n \\right) }^{\\text{recall } k = \\sum_{n = 1}^N x_n } = \\frac{1}{N} \\sum_{n = 1}^N E(x_n) = \\frac{1}{N} \\sum_{n = 1}^N \\pi = \\frac{1}{N}N\\pi \\\\ &amp;= \\pi \\end{aligned} \\] Thus, \\(\\hat{\\pi}^{ML}\\) is an unbiased estimator of \\(\\pi\\) in the toothpaste cap problem. We can use a Monte Carlo simulation to check this analytical result. set.seed(1234) n_mc_sims &lt;- 100000 pi_hat &lt;- numeric(n_mc_sims) for (i in 1:n_mc_sims) { y &lt;- rbinom(150, size = 1, prob = 0.05) pi_hat[i] &lt;- mean(y) } # expected value of pi-hat mean(pi_hat) ## [1] 0.05006227 # estimated monte carlo error sd(pi_hat)/sqrt(n_mc_sims) ## [1] 5.631271e-05 But notice that the property of unbiasedness does not follow the estimate through transformation. Because the sample is relatively large in this case (150 tosses), the bias is small, but detectable with 100,000 Monte Carlo simulations odds_hat &lt;- pi_hat/(1 - pi_hat) # actual odds 0.05/(1 - 0.05) ## [1] 0.05263158 # expected value of odds-hat mean(odds_hat) ## [1] 0.05307323 # estimated monte carlo error sd(odds_hat)/sqrt(n_mc_sims) ## [1] 6.288517e-05 # the z-statistic (mean(odds_hat) - 0.05/0.95)/(sd(odds_hat)/sqrt(n_mc_sims)) ## [1] 7.023072 1.6.2 Example: Poisson Distribution Using math almost identical to the toothpaste cap problem, we can show that the ML estimator \\(\\hat{\\lambda} = \\text{avg}(x)\\) is an unbiased estimator of \\(\\lambda\\). We can also illustrate the unbiasedness with a computer simulation. lambda &lt;- 4.0 # the parameter we&#39;re trying to estimate sample_size &lt;- 10 # the sample size we&#39;re using in each &quot;study&quot; n_mc_sims &lt;- 10000 # the number of times we repeat the &quot;study&quot; lambda_hat &lt;- numeric(n_mc_sims) # a container for (i in 1:n_mc_sims) { x &lt;- rpois(sample_size, lambda = lambda) lambda_hat[i] &lt;- mean(x) } # expected value of lambda-hat mean(lambda_hat) ## [1] 3.99397 # estimated monte carlo error sd(lambda_hat)/sqrt(n_mc_sims) ## [1] 0.006300177 "],["consistency.html", "1.7 Consistency", " 1.7 Consistency Imagine taking a sample of size \\(N\\) and computing the estimate \\(\\hat{\\theta}_N\\) of the parameter \\(\\theta\\). We say that \\(\\hat{\\theta}\\) is a consistent estimator of \\(\\theta\\) if \\(\\hat{\\theta}\\) converges in probability to \\(\\theta\\). Intuitively, this means the following: For a large enough sample, the estimator returns the exact right answer. For a large enough sample, the estimate \\(\\hat{\\theta}\\) does not vary any more, but collapses onto a single point and that point is \\(\\theta\\). Under weak, but somewhat technical, assumptions that usually hold, ML estimators are consistent. Given that we always have finite samples, why is consistency valuable? In short, it’s not valuable, directly. However, consistent estimators tend to be decent with small samples. But it does not follow that consistent estimators work well in small samples. However, as a rough guideline, consistent estimators work well for small samples. However, whether they actually work well in any particular situation needs a more careful investigation. 1.7.1 Example: Illustrative To illustrate the concept of consistency, consider this estimator of the population mean \\(\\hat{\\mu}^{\\text{silly}} = \\frac{\\sum_{i = 1}^N x_i}{N + 10}\\). While this estimator is biased, it is a consistent estimator. population &lt;- c(1, 2, 3, 4, 5) sample_sizes &lt;- c(2, 5, 10, 100, 1000, 10000, 100000) n_mc_sims &lt;- 30 # for each sample size results_list &lt;- list() # grow with each iteration; slow, but easy for (i in 1:length(sample_sizes)) { ml_est_i &lt;- numeric(n_mc_sims) for (j in 1:n_mc_sims) { x &lt;- sample(population, sample_sizes[i], replace = TRUE) ml_est_i[j] &lt;- sum(x)/(sample_sizes[i] + 10) } results_list[[i]] &lt;- data.frame(sample_size = sample_sizes[i], ml_est = ml_est_i) } results &lt;- dplyr::bind_rows(results_list) ggplot(results, aes(x = sample_size, y = ml_est)) + geom_hline(yintercept = mean(population)) + geom_jitter() + scale_x_log10() 1.7.2 Example: Bernoulli Odds There are two ways to see consistency for the Bernoulli. First, unless our sample size is a multiple of 20, it is impossible to obtain an estimated odds of 0.05/(1 - 0.05). Second, in small samples, the ML estimate of the odds is biased. As the sample size increases, the bias shrinks and the estimates collapse toward (and eventually onto) the true value. sample_sizes &lt;- c(2:100, 250, 400, 500, 750, 1000) n_mc_sims &lt;- 10 # for each sample size results_list &lt;- list() # grow with each iteration; slow, but easy for (i in 1:length(sample_sizes)) { ml_est_i &lt;- numeric(n_mc_sims) for (j in 1:n_mc_sims) { x &lt;- rbinom(sample_sizes[i], 1, prob = 0.05) pi_hat &lt;- mean(x) ml_est_i[j] &lt;- pi_hat/(1 - pi_hat) } results_list[[i]] &lt;- data.frame(sample_size = sample_sizes[i], ml_est = ml_est_i) } results &lt;- dplyr::bind_rows(results_list) ggplot(results, aes(x = sample_size, y = ml_est)) + geom_hline(yintercept = 0.05/(1 - 0.05)) + geom_jitter(alpha = 0.5, shape = 19) + scale_x_log10() ggplot(results, aes(x = sample_size, y = ml_est)) + geom_hline(yintercept = 0.05/(1 - 0.05)) + scale_x_log10() + geom_smooth() "],["predictive-distribution.html", "1.8 Predictive Distribution", " 1.8 Predictive Distribution In Bayesian statistics, a popular tool for model evaluation is the posterior predictive distribution. But we might use an analogous approach for models fit with maximum likelihood. The predictive distribution is just the distribution given the ML estimates. Using our notation above, the predictive distribution is \\(f(y; \\hat{\\theta})\\). When you perform a parametric bootstrap, you are resampling from this predictive distribution. Here, we’re going to use it for a different purpose: to understand and evaluate our model. In my view, the predictive distribution is the best way to (1) understand, (2) evaluate, and then (3) improve models. You can use the predictive distribution as follows: Fit your model with maximum likelihood. Simulate a new outcome variable using the estimated model parameters (i.e., \\(f(y; \\hat{theta})\\)). Perhaps simulate a handful for comparison. Compare the simulated outcome variable(s) to the observed outcome variables. 1.8.1 Example: Poisson Distribution Earlier, we fit a Poisson distribution to a sample of data from Hultman, Kathman, and Shannon (2013). ml_est &lt;- mean(civilian_casualties) print(ml_est, digits = 3) ## [1] 630 n &lt;- length(civilian_casualties) y_pred &lt;- rpois(n, lambda = ml_est) print(y_pred[1:30]) ## [1] 598 613 622 651 655 660 661 650 625 619 617 628 611 643 609 668 650 665 621 ## [20] 638 652 639 635 610 584 681 631 636 586 585 print(civilian_casualties[1:30]) ## [1] 0 0 0 0 0 13 0 0 61 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 ## [26] 0 0 0 0 19 Simply printing a few results, we can immediately see a problem with data, when compared with the raw data To see it even more clearly, we can create a histogram of the observed and simulated data. library(patchwork) p1 &lt;- qplot(civilian_casualties) p2 &lt;- qplot(y_pred) p1 + p2 These data sets are so different that the plots are difficult to read, so we might put the x-axes on the log scale. Note, though, that the two plots have very different ranges on the axes. p1 &lt;- qplot(civilian_casualties) + scale_x_log10() p2 &lt;- qplot(y_pred) + scale_x_log10() p1 + p2 For a more accurate and complete comparison, let’s simulate five fake data sets and use common axes observed_data &lt;- tibble(civilian_casualties, type = &quot;observed&quot;) sim_list &lt;- list() for (i in 1:5) { y_pred &lt;- rpois(n, lambda = ml_est) sim_list[[i]] &lt;- tibble(civilian_casualties = y_pred, type = paste0(&quot;simulated #&quot;, i)) } gg_data &lt;- bind_rows(sim_list) %&gt;% bind_rows(observed_data) %&gt;% glimpse() ## Rows: 1,500 ## Columns: 2 ## $ civilian_casualties &lt;dbl&gt; 661, 627, 612, 647, 668, 611, 623, 649, 675, 661, … ## $ type &lt;chr&gt; &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;s… ggplot(gg_data, aes(x = civilian_casualties)) + geom_histogram() + facet_wrap(vars(type)) + scale_x_log10() The fit of this model is almost absurd. 1.8.2 Example: Beta Distribution Now let’s return to our beta model of states’ opinions toward the ACA in the br data frame we loaded earlier. # obtain ml estimates log_lik_fn &lt;- function(par = c(2, 2), y) { a &lt;- par[1] # pulling these out makes the code a bit easier to follow b &lt;- par[2] log_lik_i &lt;- dbeta(y, shape1 = a, shape2 = b, log = TRUE) log_lik &lt;- sum(log_lik_i) return(log_lik) } opt &lt;- optim(par = c(2, 2), fn = log_lik_fn, y = br$prop_favorable_aca, control = list(fnscale = -1)) ml_est &lt;- opt$par Now let’s simulate some fake data from the predictive distribution and compare that to the observed data observed_data &lt;- br %&gt;% mutate(type = &quot;observed&quot;) n &lt;- nrow(br) sim_list &lt;- list() for (i in 1:5) { y_pred &lt;- rbeta(n, shape1 = ml_est[1], shape2 = ml_est[2]) sim_list[[i]] &lt;- tibble(prop_favorable_aca = y_pred, type = paste0(&quot;simulated #&quot;, i)) } gg_data &lt;- bind_rows(sim_list) %&gt;% bind_rows(observed_data) ggplot(gg_data, aes(x = prop_favorable_aca)) + geom_histogram() + facet_wrap(vars(type)) + scale_x_log10() On the whole, we see hear a fairly close correspondence between the observed and simulated data. That suggests that our model is a good description of the data. "],["week-2-bayesian-inference.html", "Chapter 2 Week 2: Bayesian Inference", " Chapter 2 Week 2: Bayesian Inference This week, we introduce the following tools. engine Bayesian inference distributions normal, uniform confidence intervals posterior simulation, Bayesian credible intervals, percentile intervals. quantities of interest transforming posterior simulations evaluating models posterior predictive distribution "],["bayesian-inference.html", "2.1 Bayesian Inference", " 2.1 Bayesian Inference Bayesian inference follows a simple recipe: Choose a distribution for the data. Choose a distribution to describe your prior beliefs. Update the prior distribution upon observing the data by computing the posterior distribution. In simple examples, we can implement this process analytically and obtain a closed-form posterior. In most applied cases, we can only sample from the posterior distribution, but this turns out to work almost as well. 2.1.1 Mechanics Suppose a random sample from a distribution \\(f(x; \\theta)\\) that depends on the unknown parameter \\(\\theta\\). Bayesian inference models our beliefs about the unknown parameter \\(\\theta\\) as a distribution. It answers the question: what should we believe about \\(\\theta\\), given the observed samples \\(x = \\{x_1, x_2, ..., x_n\\}\\) from \\(f(x; \\theta)\\)? These beliefs are simply the conditional distribution \\(f(\\theta \\mid x)\\). By Bayes’ rule, \\(\\displaystyle f(\\theta \\mid x) = \\frac{f(x \\mid \\theta)f(\\theta)}{f(x)} = \\frac{f(x \\mid \\theta)f(\\theta)}{\\displaystyle \\int_{-\\infty}^\\infty f(x \\mid \\theta)f(\\theta) d\\theta}\\). \\[ \\displaystyle \\underbrace{f(\\theta \\mid x)}_{\\text{posterior}} = \\frac{\\overbrace{f(x \\mid \\theta)}^{\\text{likelihood}} \\times \\overbrace{f(\\theta)}^{\\text{prior}}}{\\displaystyle \\underbrace{\\int_{-\\infty}^\\infty f(x \\mid \\theta)f(\\theta) d\\theta}_{\\text{normalizing constant}}} \\] There are four parts to a Bayesian analysis. \\(f(\\theta \\mid x)\\). “The posterior;” what we’re trying to find. This distribution models our beliefs about parameter \\(\\theta\\) given the data \\(x\\). \\(f(x \\mid \\theta)\\). “The likelihood.” This distribution model conditional density/probability of the data \\(x\\) given the parameter \\(\\theta\\). We need to invert the conditioning in order to find the posterior. \\(f(\\theta)\\). “The prior;” our beliefs about \\(\\theta\\) prior to observing the sample \\(x\\). \\(f(x) =\\int_{-\\infty}^\\infty f(x \\mid \\theta)f(\\theta) d\\theta\\). A normalizing constant. Recall that the role of the normalizing constant is to force the distribution to integrate or sum to one. Therefore, we can safely ignore this constant until the end, and then find proper normalizing constant. It’s convenient to choose a conjugate prior distribution that, when combined with the likelihood, produces a posterior from the same family as the prior. The resulting distribution is a complete and correct summary of our updated beliefs about the parameters. 2.1.2 Posterior Summaries If we want to summarize the posterior distribution, then we can (though we lose some information). First, we might summarize the distribution using a single point to make a “best guess” at the parameter of interest. We have three options: The posterior mean. The posterior mean minimizes a squared-error loss function. The posterior median: The posterior median minimizes an absolute loss function where the cost of guessing \\(a\\) when the truth is \\(\\alpha\\) is \\(|a - \\alpha|\\). Intuitively, there’s a 50% chance that \\(\\pi\\) falls above and below the posterior median. The posterior mode: The posterior mode is the most likely value of \\(\\pi\\), so it minimizes a loss function that penalizes all misses equally. Second, we might find an \\(100(1 - \\alpha)\\%\\) credible interval, by finding an interval that that integrates to \\((1 - \\alpha)\\). That is, a region that has a \\(100(1 - \\alpha)\\%\\) chance of containing the parameter. This interval is not unique; there are many. However, one \\(100(1 - \\alpha)\\%\\) credible interval is the \\(100(1 - \\alpha)\\%\\) percentile credible interval. Construct this interval by finding the \\(100\\frac{\\alpha}{2}th\\) percentile and the \\(100(1 - \\frac{\\alpha}{2})th\\) percentile. For example, if we want a 90% credible interval, we would find the 5th and 95th percentiles. 2.1.3 Posterior Simulation In some cases, we have an analytical solution for the posterior—we can write down the equation for the posterior. But in most cases, we cannot write down the posterior. Perhaps unexpectedly, it is usually easier to sample from the distribution that write down the posterior in closed form. But notice that the samples are almost as good as the closed-form solution. We can sample from the distribution many times and then draw the histogram, compute the average, and find the percentiles. Except for sampling error that we can make arbitraryily small, these correspond to the posterior density, the posterior mean, and the 95% (percentile) credible interval. "],["example-bernoulli.html", "2.2 Example: Bernoulli", " 2.2 Example: Bernoulli As a running example, we use the toothpaste cap problem: We have a toothpaste cap–one with a wide bottom and a narrow top. We’re going to toss the toothpaste cap. It can either end up lying on its side, its (wide) bottom, or its (narrow) top. We want to estimate the probability of the toothpaste cap landing on its top. We can model each toss as a Bernoulli trial, thinking of each toss as a random variable \\(X\\) where \\(X \\sim \\text{Bernoulli}(\\pi)\\). If the cap lands on its top, we think of the outcome as 1. If not, as 0. Suppose we toss the cap \\(N\\) times and observe \\(k\\) tops. What is the posterior distribution of \\(\\pi\\)? 2.2.1 The Likelihood According to the model \\(f(x_i \\mid \\pi) = \\pi^{x_i} (1 - \\pi)^{(1 - x_i)}\\). Because the samples are iid, we can find the joint distribution \\(f(x) = f(x_1) \\times ... \\times f(x_N) = \\prod_{i = 1}^N f(x_i)\\). We’re just multiplying \\(k\\) \\(\\pi\\)s (i.e., each of the \\(k\\) ones has probability \\(\\pi\\)) and \\((N - k)\\) \\((1 - \\pi)\\)s (i.e., each of the \\(N - k\\) zeros has probability \\(1 - \\pi\\)), so that the \\(f(x | \\pi) = \\pi^{k} (1 - \\pi)^{(N - k)}\\). \\[ \\text{the likelihood: } f(x | \\pi) = \\pi^{k} (1 - \\pi)^{(N - k)}, \\text{where } k = \\sum_{n = 1}^N x_n \\\\ \\] 2.2.2 The Prior The prior describes your beliefs about \\(\\pi\\) before observing the data. Here are some questions that we might ask ourselves the following questions: What’s the most likely value of \\(\\pi\\)? Perhaps 0.15. Are our beliefs best summarizes by a distribution that’s skewed to the left or right? To the right. \\(\\pi\\) is about _____, give or take _____ or so. Perhaps 0.17 and 0.10. There’s a 25% chance that \\(\\pi\\) is less than ____. Perhaps 0.05. There’s a 25% chance that \\(\\pi\\) is greater than ____. Perhaps 0.20. Given these answers, we can sketch the pdf of the prior distribution for \\(\\pi\\). Now we need to find a density function that matches these prior beliefs. For this Bernoulli model, the beta distribution is the conjugate prior. While a conjugate prior is not crucial in general, it makes the math much more tractable. So then what beta distribution captures our prior beliefs? There’s a code snippet here to help you explore different beta distributions. After some exploration, I find that setting the parameters \\(\\alpha\\) and \\(\\beta\\) of the beta distribution to 3 and 15, respectively, captures my prior beliefs about the probability of getting a top. The pdf of the beta distribution is \\(f(x) = \\frac{1}{B(\\alpha, \\beta)} x^{\\alpha - 1}(1 - x)^{\\beta - 1}\\). Remember that \\(B()\\) is the beta function, so \\(\\frac{1}{B(\\alpha, \\beta)}\\) is a constant. Let’s denote our chosen values of \\(\\alpha = 3\\) and \\(\\beta = 15\\) as \\(\\alpha^*\\) and \\(\\beta^*\\). As we see in a moment, it’s convenient distinguish the parameters in the prior distribution from other parameters. \\[ \\text{the prior: } f(\\pi) = \\frac{1}{B(\\alpha^*, \\beta^*)} \\pi^{\\alpha^* - 1}(1 - \\pi)^{\\beta^* - 1} \\] 2.2.3 The Posterior Now we need to compute the posterior by multiplying the likelihood times the prior and then finding the normalizing constant. \\[ \\text{the posterior: } \\displaystyle \\underbrace{f(\\pi \\mid x)}_{\\text{posterior}} = \\frac{\\overbrace{f(x \\mid \\pi)}^{\\text{likelihood}} \\times \\overbrace{f(\\pi)}^{\\text{prior}}}{\\displaystyle \\underbrace{\\int_{-\\infty}^\\infty f(x \\mid \\pi)f(\\pi) d\\pi}_{\\text{normalizing constant}}} \\\\ \\] Now we plug in the likelihood, plug in the prior, and denote the normalizing constant as \\(C_1\\) to remind ourselves that it’s just a constant. \\[ \\displaystyle f(\\pi \\mid x) = \\frac{\\left[ \\pi^{k} (1 - \\pi)^{(N - k) }\\right] \\times \\left[ \\frac{1}{B(\\alpha^*, \\beta^*)} \\pi^{\\alpha^* - 1}(1 - \\pi)^{\\beta^* - 1} \\right]}{ C_1} \\\\ \\] \\[ \\text{the posterior: } \\displaystyle \\underbrace{f(\\pi \\mid x)}_{\\text{posterior}} = \\frac{\\overbrace{\\left[ \\pi^{k} (1 - \\pi)^{(N - k) }\\right] }^{\\text{likelihood}} \\times \\overbrace{ \\left[ \\frac{1}{B(\\alpha^*, \\beta^*)} \\pi^{\\alpha^* - 1}(1 - \\pi)^{\\beta^* - 1} \\right] }^{\\text{prior}}}{\\displaystyle \\underbrace{C_1}_{\\text{normalizing constant}}} \\\\ \\] Now we need to simplify the right-hand side. First, notice that the term \\(\\frac{1}{B(\\alpha^*, \\beta^*)}\\) in the numerator is just a constant. We can incorporate that constant term with \\(C_1\\) by multiplying top and bottom by \\(B(\\alpha^*, \\beta^*)\\) and letting \\(C_2 = C_1 \\times B(\\alpha^*, \\beta^*)\\). \\[ \\text{the posterior: } \\displaystyle \\underbrace{f(\\pi \\mid x)}_{\\text{posterior}} = \\frac{\\overbrace{\\left[ \\pi^{k} (1 - \\pi)^{(N - k) }\\right] }^{\\text{likelihood}} \\times \\left[ \\pi^{\\alpha^* - 1}(1 - \\pi)^{\\beta^* - 1} \\right] }{\\displaystyle \\underbrace{C_2}_{\\text{new normalizing constant}}} \\\\ \\] Now we can collect the exponents with base \\(\\pi\\) and the exponents with base \\((1 - \\pi)\\). \\[ \\text{the posterior: } \\displaystyle \\underbrace{f(\\pi \\mid x)}_{\\text{posterior}} = \\frac{\\left[ \\pi^{k} \\times \\pi^{\\alpha^* - 1} \\right] \\times \\left[ (1 - \\pi)^{(N - k) } \\times (1 - \\pi)^{\\beta^* - 1} \\right] }{ C_2} \\\\ \\] Recalling that \\(x^a \\times x^b = x^{a + b}\\), we combine the powers. \\[ \\text{the posterior: } \\displaystyle \\underbrace{f(\\pi \\mid x)}_{\\text{posterior}} = \\frac{\\left[ \\pi^{(\\alpha^* + k) - 1} \\right] \\times \\left[ (1 - \\pi)^{[\\beta^* + (N - k)] - 1} \\right] }{ C_2} \\\\ \\] \\[ \\displaystyle f(\\theta \\mid x) = \\frac{f(x \\mid \\theta) \\times f(\\theta)}{\\displaystyle \\int_{-\\infty}^\\infty f(x \\mid \\theta)f(\\theta) d\\theta} \\] Because we’re clever, we notice that this is almost a beta distribution with \\(\\alpha = (\\alpha^* + k)\\) and \\(\\beta = [\\beta^* + (N - k)]\\). If \\(C_2 = B(\\alpha^* + k, \\beta^* + (N - k))\\), then the posterior is exactly a \\(\\text{beta}(\\alpha^* + k, \\beta^* + [N - k]))\\) distribution. This is completely expected. We chose a beta distribution for the prior because it would give us a beta posterior distribution. For simplicity, we can denote the parameter for the beta posterior as \\(\\alpha^\\prime\\) and \\(\\beta^\\prime\\), so that \\(\\alpha^\\prime = \\alpha^* + k\\) and \\(\\beta^\\prime = \\beta^* + [N - k]\\) \\[ \\begin{aligned} \\text{the posterior: } \\displaystyle \\underbrace{f(\\pi \\mid x)}_{\\text{posterior}} &amp;= \\frac{ \\pi^{\\overbrace{(\\alpha^* + k)}^{\\alpha^\\prime} - 1} \\times (1 - \\pi)^{\\overbrace{[\\beta^* + (N - k)]}^{\\beta^\\prime} - 1} }{ B(\\alpha^* + k, \\beta^* + [N - k])} \\\\ &amp;= \\frac{ \\pi^{\\alpha^\\prime - 1} \\times (1 - \\pi)^{\\beta^\\prime - 1} }{ B(\\alpha^\\prime, \\beta^\\prime)}, \\text{where } \\alpha^\\prime = \\alpha^* + k \\text{ and } \\beta^\\prime = \\beta^* + [N - k] \\end{aligned} \\] This is an elegant, simple solution. To obtain the parameters for the beta posterior distribution, we just add the number of tops (Bernoulli successes) to the prior value for \\(\\alpha\\) and the number of not-tops (sides and bottoms; Bernoulli failures) to the prior value for \\(\\beta\\). Suppose that I tossed the toothpaste cap 150 times and got 8 tops. # prior parameters alpha_prior &lt;- 3 beta_prior &lt;- 15 # data k &lt;- 8 N &lt;- 150 # posterior parameters alpha_posterior &lt;- alpha_prior + k beta_posterior &lt;- beta_prior + N - k # plot prior and posterior gg_prior &lt;- ggplot() + stat_function(fun = dbeta, args = list(shape1 = alpha_prior, shape2 = beta_prior)) + labs(title = &quot;prior distribution&quot;, x = &quot;pi&quot;, y = &quot;prior density&quot;) gg_posterior &lt;- ggplot() + stat_function(fun = dbeta, args = list(shape1 = alpha_posterior, shape2 = beta_posterior)) + labs(title = &quot;posterior distribution&quot;, x = &quot;pi&quot;, y = &quot;posterior density&quot;) library(patchwork) gg_prior + gg_posterior 2.2.4 Point Estimates The posterior mean. The posterior mean minimizes a squared-error loss function. That is, the cost of guessing \\(a\\) when the truth is \\(\\alpha\\) is \\((a - \\alpha)^2\\). In the case of the beta posterior, it’s just \\(\\dfrac{\\alpha^\\prime}{\\alpha^\\prime + \\beta^\\prime}\\). For our prior and data, we have \\(\\dfrac{3 + 8}{(3 + 8) + (15 + 150 - 8)} \\approx 0.065\\). The posterior median: The posterior median minimizes an absolute loss function where the cost of guessing \\(a\\) when the truth is \\(\\alpha\\) is \\(|a - \\alpha|\\). Intuitively, there’s a 50% chance that \\(\\pi\\) falls above and below the posterior median. In the case of the beta posterior, it’s just \\(\\dfrac{\\alpha^\\prime - \\frac{1}{3}}{\\alpha^\\prime + \\beta^\\prime - \\frac{2}{3}}\\) (for \\(\\alpha^\\prime, \\beta^\\prime &gt; 1\\)). For our prior and data, we have \\(\\dfrac{3 + 8 -\\frac{1}{3}}{(3 + k) + (15 + 150 - 8) - \\frac{2}{3}} \\approx 0.064\\). The posterior mode: The posterior mode is the most likely value of \\(\\pi\\), so it minimizes a loss function that penalizes all misses equally. In the case of the beta posterior, it’s just \\(\\dfrac{\\alpha^\\prime - 1}{\\alpha^\\prime + \\beta^\\prime - 2}\\) (for \\(\\alpha^\\prime, \\beta^\\prime &gt; 1\\)). For our prior and data, we have \\(\\dfrac{3 + 8 - 1}{(3 + k) + (15 + 150 - 8) - 2} \\approx 0.060\\). 2.2.5 Credible Interval Using the percentile method, we can compute the 90% and 95% credible intervals with qbeta(). # 90% credible interval qbeta(c(0.05, 0.95), 3 + 8, 15 + 150 - 8) ## [1] 0.03737493 0.09945329 # 95% credible interval qbeta(c(0.025, 0.975), 3 + 8, 15 + 150 - 8) ## [1] 0.03333712 0.10736323 2.2.6 Simulation We don’t need to use simulation here—we have the simple closed-form posterior. However, let’s see how simulation would work. post_sims &lt;- rbeta(1000, 3 + 8, 15 + 150 - 8) # posterior density gg_data &lt;- tibble(post_sims) ggplot(gg_data, aes(x = post_sims)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # posterior mean mean(post_sims) ## [1] 0.06558303 # credible interval "],["example-poisson-distribution-3.html", "2.3 Example: Poisson Distribution", " 2.3 Example: Poisson Distribution Suppose we collect \\(N\\) random samples \\(x = \\{x_1, x_2, ..., x_N\\}\\) and model each draw as a random variable \\(X \\sim \\text{Poisson}(\\lambda)\\). Find the posterior distribution of \\(\\lambda\\) for the gamma prior distribution. Hint: the gamma distribution is the conjugate prior for the Poisson likelihood. \\[ \\begin{aligned} \\text{Poisson likelihood: } f(x \\mid \\lambda) &amp;= \\prod_{n = 1}^N \\frac{\\lambda^{x_n} e^{-\\lambda}}{x_n!} \\\\ &amp;= \\displaystyle \\left[ \\frac{1}{\\prod_{n = 1}^N x_n !} \\right]e^{-N\\lambda}\\lambda^{\\sum_{n = 1}^N x_n} \\end{aligned} \\] \\[ \\text{Gamma prior: } f( \\lambda; \\alpha^*, \\beta^*) = \\frac{{\\beta^*}^{\\alpha^*}}{\\Gamma(\\alpha^*)} \\lambda^{\\alpha^* - 1} e^{-\\beta^*\\lambda} \\] To find the posterior, we multiply the likelihood times the prior and normalize. Because the gamma prior distribution is the conjugate prior for the Poisson likelihood, we know that the posterior will be a gamma distribution. \\[ \\begin{aligned} \\text{Gamma posterior: } f( \\lambda \\mid x) &amp;= \\frac{\\left( \\displaystyle \\left[ \\frac{1}{\\prod_{n = 1}^N x_n !} \\right]e^{-N\\lambda}\\lambda^{\\sum_{n = 1}^N x_n}\\right) \\times \\left( \\left[ \\frac{{\\beta^*}^{\\alpha^*}}{\\Gamma(\\alpha^*)} \\right] \\lambda^{\\alpha^* - 1} e^{-\\beta^*\\lambda}\\right)}{C_1} \\\\ \\end{aligned} \\] Because \\(x\\), \\(\\alpha_*\\), and \\(\\beta\\) are fixed, the terms in square brackets are constant, so we can safely consider those part of the normalizing constant. \\[ \\begin{aligned} &amp;= \\frac{\\left( \\displaystyle e^{-N\\lambda}\\lambda^{\\sum_{n = 1}^N x_n}\\right) \\times \\left( \\lambda^{\\alpha^* - 1} e^{-\\beta^*\\lambda}\\right)}{C_2} \\\\ \\end{aligned} \\] Now we can collect the exponents with the same base. \\[ \\begin{aligned} &amp;= \\frac{\\left( \\lambda^{\\alpha^* - 1} \\times \\lambda^{\\sum_{n = 1}^N x_n}\\right) \\times \\left( \\displaystyle e^{-N\\lambda} \\times e^{-\\beta^*\\lambda} \\right)}{C_2} \\\\ &amp;= \\frac{\\lambda^{ \\overbrace{\\left[ \\alpha^* + \\sum_{n = 1}^N x_n \\right]}^{\\alpha^\\prime} - 1} e^{-\\overbrace{[\\beta^* + N]}^{\\beta^\\prime}\\lambda} }{C_2} \\\\ \\end{aligned} \\] We recognize this as almost a Gamma distribution with parameters \\(\\alpha^\\prime = \\alpha^* + \\sum_{n = 1}^N x_n\\) and \\(\\beta^\\prime = \\beta^* + N\\). Indeed, if \\(\\frac{1}{C_2} = \\frac{{\\beta^\\prime}^{\\alpha^\\prime}}{\\Gamma(\\alpha^{\\prime})}\\), then we have exactly a gamma distribution. \\[ \\begin{aligned} &amp;= \\frac{{\\beta^\\prime}^{\\alpha^\\prime}}{\\Gamma(\\alpha^{\\prime})} \\lambda^{ \\alpha^\\prime - 1} e^{-\\beta^\\prime\\lambda}, \\text{where } \\alpha^\\prime = \\alpha^* + \\sum_{n = 1}^N x_n \\text{ and } \\beta^\\prime = \\beta^* + N \\end{aligned} \\] Like the Bernoulli likelihood with the beta prior, the Poisson likelihood withe the gamma prior gives a nice result. We start with values parameters of the gamma distribution \\(\\alpha = \\alpha^*\\) and \\(\\beta + \\beta^*\\) so that the gamma prior distribution describes our prior beliefs about the parameters \\(\\lambda\\) of the Poisson distribution. Then we add the sum of the data \\(x\\) to \\(\\alpha^*\\) and the number of samples \\(N\\) to \\(\\beta^*\\) to obtain the parameters of the gamma posterior distribution. The code below shows the posterior distribution # set see to make reproducible set.seed(1234) # prior parameters alpha_prior &lt;- 3 beta_prior &lt;- 3 # create an &quot;unknown&quot; value of lambda to estimate lambda &lt;- 2 # generate a data set N &lt;- 5 # number of samples x &lt;- rpois(N, lambda = lambda) print(x) # print the data set ## [1] 0 2 2 2 4 # posterior parameters alpha_posterior &lt;- alpha_prior + sum(x) beta_posterior &lt;- beta_prior + N # plot prior and posterior gg_prior &lt;- ggplot() + xlim(0, 5) + stat_function(fun = dgamma, args = list(shape = alpha_prior, rate = beta_prior)) + labs(title = &quot;prior distribution&quot;, x = &quot;lambda&quot;, y = &quot;prior density&quot;) gg_posterior &lt;- ggplot() + xlim(0, 5) + stat_function(fun = dgamma, args = list(shape = alpha_posterior, rate = beta_posterior)) + labs(title = &quot;posterior distribution&quot;, x = &quot;lambda&quot;, y = &quot;posterior density&quot;) gg_prior + gg_posterior # uses patchwork package # posterior mean: alpha/beta alpha_posterior/beta_posterior ## [1] 1.625 # posterior mode: (alpha - 1)/beta for alpha &gt; 1 (alpha_posterior - 1)/beta_posterior ## [1] 1.5 # 90% credible interval qgamma(c(0.05, 0.95), alpha_posterior, beta_posterior) ## [1] 0.9611973 2.4303212 # 95% credible interval qgamma(c(0.025, 0.975), alpha_posterior, beta_posterior) ## [1] 0.8652441 2.6201981 In the case of the posterior median, there is no closed-form solution, even though we know the form of the posterior. We can use simulation to obtain the median. # posterior median: no closed form, so simulate post_sims &lt;- rgamma(1000, alpha_posterior, beta_posterior) median(post_sims) ## [1] 1.59919 "],["remarks-1.html", "2.4 Remarks", " 2.4 Remarks Bayesian inference presents two difficulties. Choosing a prior. It can be hard to actually construct a prior distribution. It’s challenging when dealing with a single parameter. It becomes much more difficult when dealing with several or many parameters. Priors are subjective, so that one researcher’s prior might not work for another. Computing the posterior. Especially for many-parameter problems and non-conjugate priors, computing the posterior can be nearly intractable. However, there are several practical solutions to these difficulties. Choosing a prior. We can use a “uninformative” or constant prior. Sometimes, we can use an improper prior that doesn’t integrate to one, but places equal prior weight on all values. We can use an extremely diffuse prior. For example, if we wanted to estimate the average height in a population in inches, we might use a normal distribution centered at zero with an SD of 10,000. This prior says: “The average height is about zero, give or take 10,000 inches or so.” We can use an informative prior, but conduct careful robustness checks to assess whether the conclusions depend on the particular prior. We can use a weakly informative prior, that rules places meaningful prior weight on all the plausible values and little prior weight only on the most implausible values. As a guideline, you might create a weakly informative prior by doubling or tripling the SD of the informative prior. Computing the posterior. While analytically deriving the posterior becomes intractable for most applied problems, it’s relatively easy to sample from the posterior distribution for many models. Algorithms like Gibbs samplers, MCMC, and HMC make this sampling procedure straightforward for a given model. Software such as Stan make sampling easy to set up and very fast. Post-processing R packages such as tidybayes make it each to work with the posterior simulations. "],["week-3-adding-predictors.html", "Chapter 3 Week 3: Adding Predictors", " Chapter 3 Week 3: Adding Predictors So far, we have discussed several major ideas: Maximum likelihood to obtain point estimates of model parameters and the invariance property to transform those estimates into quantities of interest. In this framework, we can use the parametric bootstrap to create confidence intervals and the predictive distribution to understand fitted models. Bayesian inference to obtain posterior beliefs (i.e., distributions) of model parameters. In most applied cases, we will simulate from the posterior. We can transform those simulations to obtain posterior distributions of the quantities of interest. We can use the posterior predictive distribution to understand the fit. We’ve discussed the tools above in the context of the Bernoulli, Poisson, and exponential models. Using the toothpaste cap, binary survey responses, civilian casualties, and government survival data. Today, we’re going to focus on two narrow parts of models and explore how two current tools generalize to the regression context. The linear predictor \\(X\\beta\\). The inverse link function. How the [posterior] predictive distribution generalizes to regression. How quantities of interest generalize to regression. For this week, we’ll need the following packages: rstan/rstanarm tidybayes Zelig; devtools::install_github('IQSS/Zelig') "],["review-the-normal-model.html", "3.1 Review: The Normal Model", " 3.1 Review: The Normal Model To fix ideas, we are going to re-develop the linear model from POS 5746. We imagine a continuous outcome \\(y = \\{y_1, y_1,..., y_n\\}\\) and a set of predictors or “explanatory variables” \\(x_1 = \\{x_{11}, x_{21}, ..., x_{n1}\\}, x_2 = \\{x_{12}, x_{22}, ..., x_{n2}\\}, ..., x_k = \\{x_{1k}, x_{2k}, ..., x_{nk}\\}\\). The notation \\(y_i\\) refers to the \\(i\\)th observation of the outcome variable. The notation \\(x_{ij}\\) refers to the \\(i\\)th observation of the \\(j\\)th control variable. The we write the linear regression model as \\[ y_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\beta_k x_{ik} + r_i. \\] We might then assume that the \\(r_i\\)s follow a normal distribution, so that \\(r_i \\sim N(0, \\sigma^2)\\) for all \\(i\\). The we can define \\(\\mu_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\beta_k x_{ik}\\) and see that \\[ y_i \\sim N(\\mu_i, \\sigma^2). \\] Taking the expectation, we have \\(E(y_i \\mid x_1, x_2, ... , x_n) = \\mu_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\beta_k x_{ik}\\). This is just a conditional average (the average of the outcome conditional on the explanatory variables). Sometimes we refer to this quantity as \\(\\hat{y}_i\\). There are two important features of this model that I want to explore: the distribution or “stochastic component” and the linear predictor of the model. 3.1.1 Distribution This model uses the normal distribution to describe the unexplained variation in \\(y_i - \\hat{y}_i\\). POS 5746 focuses (mostly) on models that assume a normal distribution for the outcome. King (1998) calls this the “stochastic” component of the model. For now, simply note that we are not restricted to a normal model, we could easily adapt the model to use a Bernoulli, exponential, or Poisson distribution, for example. 3.1.2 Linear Predictor The linear predictor \\(\\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\beta_k x_{ik}\\) is critically important. So we should spend some time to get familiar with it. For the sake of this exercise, the values of the \\(\\beta\\)s and the \\(x_{ij}\\)s are arbitrary, # devtools::install_github(&#39;IQSS/Zelig&#39;) data(macro, package = &quot;Zelig&quot;) set.seed(1234) small_macro &lt;- macro %&gt;% select(unem, gdp, capmob, trade) %&gt;% sample_n(5) %&gt;% mutate(across(.fns = signif, digits = 2)) kableExtra::kable(small_macro, format = &quot;markdown&quot;) unem gdp capmob trade 284 1.5 5.2 -1 88 336 2.0 4.8 -1 27 101 2.7 3.2 -2 74 111 6.8 5.3 0 94 133 2.6 5.4 -1 33 fit &lt;- lm(unem ~ gdp + capmob + trade, data = small_macro) signif(coef(fit), digits = 2) ## (Intercept) gdp capmob trade ## 19.0000 -2.4000 4.5000 0.0027 In-Class Exercise For the \\(\\beta\\)s and the \\(x_{ij}\\)s above, compute each \\(\\mu_i\\) and \\(r_i = y_i - \\mu_i\\). Now, let’s bind the explanatory variables into a matrix, so that \\[ X = [x_1, x_2, ..., x_k] = \\begin{bmatrix} x_{11} &amp; x_{12} &amp;\\dots &amp; x_{1k}\\\\ x_{21} &amp; x_{22} &amp;\\dots &amp; x_{2k}\\\\ \\vdots &amp; \\vdots &amp;\\ddots &amp; \\vdots\\\\ x_{n1} &amp; x_{n2} &amp; \\dots &amp; x_{nk} \\end{bmatrix}. \\] And let’s bind the \\(\\beta\\)s into a column-vector, so that \\[ \\beta = \\begin{bmatrix} \\beta_{1} \\\\ \\beta_{2} \\\\ \\vdots\\\\ \\beta_{k} \\end{bmatrix}. \\] \\(\\beta = [\\beta_0, \\beta_1, \\beta_2, ..., \\beta_k]\\). Notice that we have a \\(n \\times (k + 1)\\) matrix \\(X\\) and a \\((k + 1) x 1\\) matrix \\(\\beta\\). I content that the matrix multiplication \\(\\mu = X\\beta\\) is identical to \\(\\mu_i = \\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\beta_k x_{ik}\\). In-Class Exercise For the \\(\\beta\\)s and the \\(x_{ij}\\)s above, compute each \\(\\mu = X\\beta\\) and \\(r = y - \\mu\\). We can confirm with R. y &lt;- small_macro$unem X &lt;- cbind(1, small_macro$gdp, small_macro$capmob, small_macro$trade) print(X) ## [,1] [,2] [,3] [,4] ## [1,] 1 5.2 -1 88 ## [2,] 1 4.8 -1 27 ## [3,] 1 3.2 -2 74 ## [4,] 1 5.3 0 94 ## [5,] 1 5.4 -1 33 beta &lt;- matrix(signif(coef(fit), digits = 2), ncol = 1) print(beta) ## [,1] ## [1,] 19.0000 ## [2,] -2.4000 ## [3,] 4.5000 ## [4,] 0.0027 mu &lt;- X%*%beta; mu ## [,1] ## [1,] 2.2576 ## [2,] 3.0529 ## [3,] 2.5198 ## [4,] 6.5338 ## [5,] 1.6291 r &lt;- small_macro$unem - mu; r ## [,1] ## [1,] -0.7576 ## [2,] -1.0529 ## [3,] 0.1802 ## [4,] 0.2662 ## [5,] 0.9709 From now on, we can just write… \\(X_i\\beta\\) rather than \\(\\beta_0 + \\beta_1 x_{i1} + \\beta_2 x_{i2} + \\beta_k x_{ik}\\) (returns a scalar \\(\\mu_i\\)) \\(X\\beta\\) rather than \\(\\beta_0 + \\beta_1 x_{1} + \\beta_2 x_{2} + \\beta_k x_{k}\\) (returns a vector \\(\\mu\\)) 3.1.3 Fitting the Normal-Linear Model 3.1.3.1 Maximum Likelihood It turns out that the usual least-squares solution from POS 5746 is the maximum likelihood estimate of \\(\\beta\\). And the RMS of the residuals is the ML estimator of \\(\\sigma\\). beta_hat &lt;- solve(t(X)%*%X)%*%t(X)%*%y print(beta_hat, digits = 2) ## [,1] ## [1,] 18.8277 ## [2,] -2.3766 ## [3,] 4.5184 ## [4,] 0.0027 sigma_hat &lt;- sqrt(sum((y - X%*%beta_hat)^2)) print(sigma_hat, digits = 2) ## [1] 1.6 fit &lt;- lm(unem ~ gdp + capmob + trade, data = small_macro) arm::display(fit) ## lm(formula = unem ~ gdp + capmob + trade, data = small_macro) ## coef.est coef.se ## (Intercept) 18.83 11.64 ## gdp -2.38 1.77 ## capmob 4.52 2.33 ## trade 0.00 0.03 ## --- ## n = 5, k = 4 ## residual sd = 1.64, R-Squared = 0.85 We can get confidence intervals with the parametric bootstrap. # get ml estimates fit &lt;- lm(unem ~ gdp + capmob + trade, data = small_macro) mu_hat &lt;- predict(fit) # same as X%*%beta_hat sigma_hat &lt;- sqrt(sum(residuals(fit)^2)) # do parametric bootstrap n_bs &lt;- 100 bs_est &lt;- matrix(NA, ncol = length(coef(fit)), nrow = n_bs) for (i in 1:n_bs) { bs_y &lt;- rnorm(nrow(small_macro), mean = mu_hat, sd = sigma_hat) bs_fit &lt;- update(fit, bs_y ~ .) bs_est[i, ] &lt;- coef(bs_fit) } # compute the quantiles for each coef apply(bs_est, 2, quantile, probs = c(0.05, 0.95)) ## [,1] [,2] [,3] [,4] ## 5% 0.6518702 -4.9998081 1.690274 -0.04557350 ## 95% 35.5920062 0.4865889 7.987606 0.06363354 3.1.3.2 Bayesian The stan_glm() function allows us to easily get posterior simulations for the coefficients (and \\(\\sigma\\)) for the normal linear model. library(rstanarm); options(mc.cores = parallel::detectCores()) stan_fit &lt;- stan_glm(unem ~ gdp + capmob + trade, data = small_macro, family = &quot;gaussian&quot;, chains = 1, prior = NULL, prior_intercept = NULL) print(stan_fit) ## stan_glm ## family: gaussian [identity] ## formula: unem ~ gdp + capmob + trade ## observations: 5 ## predictors: 4 ## ------ ## Median MAD_SD ## (Intercept) 19.3 11.7 ## gdp -2.4 1.7 ## capmob 4.5 2.3 ## trade 0.0 0.0 ## ## Auxiliary parameter(s): ## Median MAD_SD ## sigma 1.8 0.9 ## ## ------ ## * For help interpreting the printed output see ?print.stanreg ## * For info on the priors used see ?prior_summary.stanreg 3.1.4 Applied Example # load data cg &lt;- read_csv(&quot;data/parties.csv&quot;) %&gt;% glimpse() ## Rows: 555 ## Columns: 11 ## $ country &lt;chr&gt; &quot;Albania&quot;, &quot;Albania&quot;, &quot;Albania&quot;, &quot;Argentina&quot;, &quot;A… ## $ year &lt;dbl&gt; 1992, 1996, 1997, 1946, 1951, 1954, 1958, 1960, … ## $ average_magnitude &lt;dbl&gt; 1.00, 1.00, 1.00, 10.53, 10.53, 4.56, 8.13, 4.17… ## $ eneg &lt;dbl&gt; 1.106929, 1.106929, 1.106929, 1.342102, 1.342102… ## $ enep &lt;dbl&gt; 2.190, 2.785, 2.870, 5.750, 1.970, 1.930, 2.885,… ## $ upper_tier &lt;dbl&gt; 28.57, 17.86, 25.80, 0.00, 0.00, 0.00, 0.00, 0.0… ## $ en_pres &lt;dbl&gt; 0.00, 0.00, 0.00, 2.09, 1.96, 1.96, 2.65, 2.65, … ## $ proximity &lt;dbl&gt; 0.00, 0.00, 0.00, 1.00, 1.00, 0.20, 1.00, 0.20, … ## $ established_democracy &lt;dbl&gt; 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ social_heterogeneity &lt;chr&gt; &quot;Bottom 3rd of ENEG&quot;, &quot;Bottom 3rd of ENEG&quot;, &quot;Bot… ## $ electoral_system &lt;chr&gt; &quot;Single-Member District&quot;, &quot;Single-Member Distric… # fitting model with ls/ml f &lt;- enep ~ eneg*log(average_magnitude) + eneg*upper_tier + en_pres*proximity fit &lt;- lm(f, data = cg) arm::display(fit, detail = TRUE) ## lm(formula = f, data = cg) ## coef.est coef.se t value Pr(&gt;|t|) ## (Intercept) 2.81 0.20 14.31 0.00 ## eneg 0.19 0.08 2.47 0.01 ## log(average_magnitude) 0.33 0.11 2.88 0.00 ## upper_tier 0.05 0.01 4.98 0.00 ## en_pres 0.35 0.07 4.84 0.00 ## proximity -3.42 0.38 -8.98 0.00 ## eneg:log(average_magnitude) 0.08 0.06 1.28 0.20 ## eneg:upper_tier -0.02 0.00 -3.37 0.00 ## en_pres:proximity 0.80 0.15 5.34 0.00 ## --- ## n = 555, k = 9 ## residual sd = 1.59, R-Squared = 0.30 # fitting model with Stan fit &lt;- stan_glm(f, data = cg, chains = 1) print(fit) ## stan_glm ## family: gaussian [identity] ## formula: enep ~ eneg * log(average_magnitude) + eneg * upper_tier + en_pres * ## proximity ## observations: 555 ## predictors: 9 ## ------ ## Median MAD_SD ## (Intercept) 2.8 0.2 ## eneg 0.2 0.1 ## log(average_magnitude) 0.3 0.1 ## upper_tier 0.0 0.0 ## en_pres 0.3 0.1 ## proximity -3.4 0.4 ## eneg:log(average_magnitude) 0.1 0.1 ## eneg:upper_tier 0.0 0.0 ## en_pres:proximity 0.8 0.1 ## ## Auxiliary parameter(s): ## Median MAD_SD ## sigma 1.6 0.0 ## ## ------ ## * For help interpreting the printed output see ?print.stanreg ## * For info on the priors used see ?prior_summary.stanreg "],["bernoulli-model.html", "3.2 Bernoulli Model", " 3.2 Bernoulli Model In the case of the normal model, we used \\(y_i \\sim N(\\mu_i, \\sigma^2)\\), where \\(\\mu_i = X_i\\beta\\). The normal model does a great job with roughly continuous outcomes like ENEP. But sometimes we care about binary outcomes. Binary outcomes are categorical outcome variables with exactly two categories, such as whether or not someone voted, whether two countries are at war, and so on. These variables are usually coded as \\(y_i \\in \\{0, 1\\}\\), with one representing “an event” and zero representing “a non-event.” In generic language, we’ll say that \\(y_i = 1\\) means that “an event has occurred” and \\(y_i = 0\\) means that “an event has not occurred.” This allows us to talk about the “probability of an event” (e.g., the probability of war, etc) The normal model cannot describe a binary outcome well. But it doesn’t make much conceptual sense to model 0s and 1s as following a normal distribution. 3.2.1 The Linear Probability Model We can use the linear model (i.e., OLS) with binary outcome variables. Recall that we the linear model is represented by the equation \\(E(y_i) = X_i\\beta\\). It is important to note that a probability is just a particular kind of expected value—a probability is an expected value of a binary variable. Since \\(y_i\\) is binary, the \\(E(y_i) = \\Pr(y_i = 1) = \\Pr(y_i)\\), giving us \\(\\Pr(y_i) = X_i\\beta\\). The LPM has two advantages: It’s is very easy to estimate (i.e., OLS; \\(\\hat{\\beta} = (X&#39;X)^{-1}X&#39;y\\)). It is easy to interpret (i.e., a one unit change in \\(x_j\\) leads to a \\(\\hat{\\beta_j}\\) unit increase in \\(\\Pr(y)\\)). The LPM has several disadvantages Unbounded Predictions Because the potential values for the explanatory variables are unbounded, you can obtain predicted probabilities above one and below zero. Of course, these predictions make no sense. Conditional Heteroskedasticity The normal-linear model assumes a constant variance \\(\\sigma^2\\). However, it is impossible to have homoskedastic residuals of a binary outcome if the probability of an event varies. Specifically, if \\(y_i\\) is binary, then \\(\\text{Var}(y_i) = \\Pr(y_i)[1 - \\Pr(y_i)]\\), which, for the LPM, equals \\(X_i\\beta(1 - X_i\\beta)\\). (Non-zero coefficients imply heteroskedasticity.) Non-Normal Errors Normal errors implies that the residuals can take on any value along the real line, with values closer to zero being more likely and errors outside three standard deviations being quite unlikely. However, if \\(y_i\\) is binary, then the residual can take on only two values: \\(-Pr(y_i)\\) or \\(1 - Pr(y_i)\\). Functional Form Theoretically, you’d probably expect explanatory variables to have smaller effects as \\(Pr(y_i)\\) approaches zero or one (called “compression”). The LPM assumes that the effects are constant. Let’s fit the normal model to data from Wolfinger and Rosenstone (1993), Nagler (1994, the “Scobit” paper), and Berry, DeMeritt, and Esarey (2010). scobit &lt;- haven::read_dta(&quot;data/scobit.dta&quot;) %&gt;% filter(newvote != -1) %&gt;% # weird -1s in data; unsure if sufficient glimpse() ## Rows: 99,676 ## Columns: 16 ## $ state &lt;dbl&gt; 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 9… ## $ vote &lt;dbl&gt; 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2… ## $ age &lt;dbl&gt; 60, 80, 32, 25, 55, 63, 20, 53, 49, 27, 58, 56, 34, 34, 35, 3… ## $ educ &lt;dbl&gt; 13, 13, 13, 13, 11, 14, 11, 11, 13, 13, 11, 13, 19, 19, 15, 1… ## $ citizen &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ rweight &lt;dbl&gt; 207134, 215836, 184639, 184883, 168557, 179148, 181510, 19285… ## $ south &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ gov &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ closing &lt;dbl&gt; 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 2… ## $ age2 &lt;dbl&gt; 3600, 6400, 1024, 625, 3025, 3969, 400, 2809, 2401, 729, 3364… ## $ educ2 &lt;dbl&gt; 25, 25, 25, 25, 16, 36, 16, 16, 25, 25, 16, 25, 64, 64, 36, 2… ## $ cloeduc &lt;dbl&gt; 145, 145, 145, 145, 116, 174, 116, 116, 145, 145, 116, 145, 2… ## $ cloeduc2 &lt;dbl&gt; 725, 725, 725, 725, 464, 1044, 464, 464, 725, 725, 464, 725, … ## $ newvote &lt;dbl&gt; 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0… ## $ newage &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ neweduc &lt;dbl&gt; 5, 5, 5, 5, 4, 6, 4, 4, 5, 5, 4, 5, 8, 8, 6, 5, 5, 3, 5, 1, 6… f &lt;- newvote ~ poly(neweduc, 2, raw = TRUE) + closing + poly(age, 2, raw = TRUE) + south + gov fit &lt;- lm(f, data = scobit) mu_hat &lt;- predict(fit) # the linear predictor for each row of data frame sigma_hat &lt;- sqrt(sum(residuals(fit)^2)) y_tilde &lt;- rnorm(nrow(scobit), mu_hat, sigma_hat) # note: the code below uses variables NOT in the data frame; this is sloppy library(patchwork) gg1 &lt;- ggplot(scobit, aes(x = mu_hat, y = newvote)) + geom_jitter(height = 0.05, alpha = 0.1, shape = 21, size = 0.3) gg2 &lt;- ggplot(scobit, aes(x = mu_hat, y = y_tilde)) + geom_point(alpha = 0.1, shape = 21, size = 0.3) gg1 + gg2 rstanarm has a convenient pp_check() function that allows you to compare the posterior predictive distribution to the observed distribution. library(rstanarm); options(mc.cores = parallel::detectCores()) stan_fit &lt;- stan_glm(f, data = scobit, family = &quot;gaussian&quot;, chains = 1) pp_check(stan_fit) 3.2.2 The Logit Model As an initial effort to handle the “non-normal” distribution of the data, we might then use the Bernoulli model \\(y_i \\sim \\text{Bernoulli}(\\pi_i)\\), where \\(\\pi_i = X_i\\beta\\). However, this has a big problem that can make the approach unworkable: \\(X_i\\beta\\) might be less than zero or greater than one. To address bounds of \\(\\pi_i\\) and \\(X_i\\beta\\), we are going to introduce a new concept called the “inverse link function.” Many of the “disadvantages” of the LPM above follow from the fact that the linear predictor is unbounded. For the normal model, the inverse link function is not necessary because the parameter of interest \\(\\mu\\) is unbounded and maps to the entire real line. But for other models, the key parameter has a restricted domain. In the case of the Bernoulli distribution, \\(\\pi_i \\in [0, 1] \\subset \\mathbb{R}\\). The idea of the inverse link function is to wrap around the linear predictor and force its values into the desired domain. For the Bernoulli distribution, we might use the inverse link function \\(g^{-1}(x) = \\frac{e^x}{1 + e^x}\\). This is called the “inverse logit” and it has an “S”-shape. It’s job is to map \\(X\\beta\\) into \\([0, 1]\\). (It’s also the cdf of the standard logistic distribution.) inv_logit &lt;- function(x) { (exp(x))/(1 + exp(x)) } ggplot() + xlim(-10, 10) + stat_function(fun = inv_logit) Hint: The inverse-logit function is the cdf of the standard logistic distribution, so you can just use plogis() in R, rather than hard-coding the inv_logit() function I create above. Swapping the normal distribution for the Bernoulli and adding the inverse-logit inverse-link function gives us the logit model (or “logistic regression”). \\[ y_i \\sim \\text{Bernoulli}(\\pi_i)\\text{, where } \\pi_i = \\text{logit}^{-1}(X_i\\beta). \\] We can fit this model using maximum likelihood or posterior simulation. 3.2.3 Fitting a Logit Model 3.2.3.1 With optim() To develop the log-likelihood of the logit model, we start with the Bernoulli likelihood from Week 1. \\[ f(y; \\beta) = L(\\beta) = \\prod_{i = 1}^{N}\\pi_i^{y_i} (1 - \\pi_i)^{(1 - y_i)}\\text{, where } \\pi_i = \\text{logit}^{-1}(X_i\\beta) \\] Taking the log, we have \\[ \\log L(\\beta) = \\sum_{i = 1}^{N} y_i \\log \\pi_i + \\sum_{i = 1}^{N}(1 - y_i) \\log(1 - \\pi_i)\\text{, where } \\pi_i = \\text{logit}^{-1}(X_i\\beta) \\] We can program this into R for use in optim(). logit_ll &lt;- function(beta, y, X) { mu &lt;- X%*%beta # pi is special in R, so I use p p &lt;- exp(mu)/(1 + exp(mu)) ll &lt;- sum(y*log(p)) + sum((1 - y)*log(1 - p)) return(ll) } # alternatively logit_ll2 &lt;- function(beta, y, X) { ll &lt;- sum(dbinom(y, size = 1, prob = plogis(X%*%beta), log = TRUE)) # easier to use R&#39;s d*() functions return(ll) } The tricky part about using optim() here is not the log-likelihood function, but setting up X and y. The code below creates the outcome vector \\(y\\) and the matrix \\(X\\) of explanatory variables (with a leading columns of 1s). # create formula st &lt;- function(x) { arm::rescale(x) } f &lt;- newvote ~ poly(st(neweduc), 2, raw = TRUE) + st(closing) + poly(st(age), 2, raw = TRUE) + st(south) + st(gov) #f &lt;- newvote ~ poly(neweduc, 2, raw = TRUE) + closing + poly(age, 2, raw = TRUE) + south + gov # obtain the model matrix X mf &lt;- model.frame(f, data = scobit) # model frame X &lt;- model.matrix(f, mf) # model matrix X # obtain the outcome variable y y &lt;- model.response(mf) Then we can use optim(). # for some reason, this isn&#39;t converging par_start &lt;- c(-3, rep(0, ncol(X) - 1)) opt &lt;- optim(par_start, fn = logit_ll, y = y, X = X, method = &quot;BFGS&quot;, control = list(fnscale = -1, reltol = .Machine$double.eps)) opt$par ## [1] 1.055387404 1.574811426 0.239661630 -0.267674764 1.524032427 ## [6] -1.073869727 -0.190402661 0.005271742 # # test w/ same X and y; works # coef(glm.fit(X, y, family = binomial())) # # # try optimx # library(optimx) # # optx &lt;- optimx(par_start, fn = logit_ll, y = y, X = X, # method = c(&quot;BFGS&quot;, &quot;Nelder-Mead&quot;, &quot;CG&quot;), # control = list(fnscale = -1, reltol = .Machine$double.eps, maxit = 1000)) # optx 3.2.3.2 With glm() fit &lt;- glm(f, data = scobit, family = &quot;binomial&quot;) coef(fit) ## (Intercept) poly(st(neweduc), 2, raw = TRUE)1 ## 1.055387325 1.574811361 ## poly(st(neweduc), 2, raw = TRUE)2 st(closing) ## 0.239661717 -0.267674768 ## poly(st(age), 2, raw = TRUE)1 poly(st(age), 2, raw = TRUE)2 ## 1.524032313 -1.073869592 ## st(south) st(gov) ## -0.190402654 0.005271703 3.2.3.3 With Stan small_scobit &lt;- sample_n(scobit, 1000) stan_fit &lt;- stan_glm(f, data = small_scobit, family = &quot;binomial&quot;) summary(stan_fit) ## ## Model Info: ## function: stan_glm ## family: binomial [logit] ## formula: newvote ~ poly(neweduc, 2, raw = TRUE) + closing + poly(age, ## 2, raw = TRUE) + south + gov ## algorithm: sampling ## sample: 4000 (posterior sample size) ## priors: see help(&#39;prior_summary&#39;) ## observations: 1000 ## predictors: 8 ## ## Estimates: ## mean sd 10% 50% 90% ## (Intercept) -3.4 0.9 -4.5 -3.4 -2.3 ## poly(neweduc, 2, raw = TRUE)1 -0.1 0.3 -0.4 -0.1 0.3 ## poly(neweduc, 2, raw = TRUE)2 0.1 0.0 0.0 0.1 0.1 ## closing 0.0 0.0 0.0 0.0 0.0 ## poly(age, 2, raw = TRUE)1 0.1 0.0 0.1 0.1 0.1 ## poly(age, 2, raw = TRUE)2 0.0 0.0 0.0 0.0 0.0 ## south -0.3 0.2 -0.5 -0.3 -0.1 ## gov -0.1 0.2 -0.3 -0.1 0.2 ## ## Fit Diagnostics: ## mean sd 10% 50% 90% ## mean_PPD 0.7 0.0 0.7 0.7 0.7 ## ## The mean_ppd is the sample average posterior predictive distribution of the outcome variable (for details see help(&#39;summary.stanreg&#39;)). ## ## MCMC diagnostics ## mcse Rhat n_eff ## (Intercept) 0.0 1.0 2781 ## poly(neweduc, 2, raw = TRUE)1 0.0 1.0 2314 ## poly(neweduc, 2, raw = TRUE)2 0.0 1.0 2260 ## closing 0.0 1.0 3897 ## poly(age, 2, raw = TRUE)1 0.0 1.0 2502 ## poly(age, 2, raw = TRUE)2 0.0 1.0 2495 ## south 0.0 1.0 3961 ## gov 0.0 1.0 3869 ## mean_PPD 0.0 1.0 3970 ## log-posterior 0.0 1.0 1752 ## ## For each parameter, mcse is Monte Carlo standard error, n_eff is a crude measure of effective sample size, and Rhat is the potential scale reduction factor on split chains (at convergence Rhat=1). "],["poisson-model.html", "3.3 Poisson Model", " 3.3 Poisson Model We’ve now got two models: \\[ y_i \\sim N(\\mu_i, \\sigma^2)\\text{, where } \\mu_i = X_i\\beta \\] and \\[ y_i \\sim \\text{Bernoulli}(\\pi_i)\\text{, where } \\pi_i = \\text{logit}^{-1}(X_i\\beta). \\] We can extend this in many ways by modifying the distribution \\(f\\) and the inverse-link function \\(g^{-1}\\) appropriately. \\[ y_i \\sim f(\\theta_i)\\text{, where } \\theta_i = g^{-1}(X_i\\beta). \\] In the case of the normal model, \\(f\\) and \\(g^{-1}\\) are the normal distribution and the identity function. In the case of the logit model, they are the Bernoulli distribution and the inverse logit function. To build a Poisson regression model, we can use the Poisson distribution for \\(f\\). We just need to identify an appropriate inverse-link function. The Poisson distribution has a mean parameter \\(\\lambda\\) that must be positive. Therefore, we need a function that maps the real line to the positive (or non-negative) reals. The exponential function \\(g^{-1}(x) = e^x\\) does this. \\[ y_i \\sim \\text{Poisson}(\\lambda_i)\\text{, where } \\lambda_i = e^{X_i\\beta}. \\] We can program the log-likelihood function into R for use in optim(). # create log-likelihood poisson_ll &lt;- function(beta, y, X) { lambda &lt;- exp(X%*%beta) ll &lt;- sum(dpois(y, lambda = lambda, log = TRUE)) return(ll) } # load hks data hks &lt;- read_csv(&quot;data/hks.csv&quot;) %&gt;% na.omit() ## Rows: 3972 Columns: 10 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (10): osvAll, troopLag, policeLag, militaryobserversLag, brv_AllLag, osv... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # create X and y f &lt;- osvAll ~ troopLag + policeLag + militaryobserversLag + brv_AllLag + osvAllLagDum + incomp + epduration + lntpop mf &lt;- model.frame(f, data = hks) # model frame X &lt;- model.matrix(f, mf) # model matrix X y &lt;- model.response(mf) # outcome variable y par_start &lt;- rep(0, ncol(X)) # this poisson model is so bad that optim has a bit of trouble # intutitively, there&#39;s a single outlier that basically makes # all poissons nearly impossible. opt &lt;- optim(par_start, fn = poisson_ll, y = y, X = X, control = list(fnscale = -1)) opt$par ## [1] -2.032493946 0.056296852 -1.000415138 -0.629900495 -0.002084798 ## [6] -0.015359471 1.949812320 -0.009831003 0.357133706 Or we can use the glm() function. fit &lt;- glm(f, data = hks, family = poisson) coef(fit) ## (Intercept) troopLag policeLag ## -3.579287811 -0.169658063 -3.272474092 ## militaryobserversLag brv_AllLag osvAllLagDum ## 8.099848984 0.000560565 0.291144441 ## incomp epduration lntpop ## 3.486201819 -0.022230231 0.189391395 We could also use stan_glm() to obtain simulations from the posterior distribution. 3.3.1 Predictive Distribution observed_data &lt;- hks %&gt;% mutate(type = &quot;observed&quot;, linpred_hat = predict(fit, type = &quot;link&quot;)) sim_list &lt;- list() for (i in 1:5) { sim_list[[i]] &lt;- observed_data %&gt;% mutate(osvAll = rpois(nrow(observed_data), lambda = exp(observed_data$linpred_hat)), type = paste0(&quot;simulated #&quot;, i)) } gg_data &lt;- bind_rows(sim_list) %&gt;% bind_rows(observed_data) %&gt;% glimpse() ## Rows: 22,476 ## Columns: 12 ## $ osvAll &lt;dbl&gt; 305, 313, 1080, 284, 436, 198, 201, 209, 177, 192… ## $ troopLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ policeLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ militaryobserversLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ brv_AllLag &lt;dbl&gt; 0, 138, 2428, 30, 850, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ osvAllLagDum &lt;dbl&gt; 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ incomp &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2… ## $ epduration &lt;dbl&gt; 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1… ## $ lntpop &lt;dbl&gt; 10.88525, 10.88525, 10.88525, 10.88525, 10.88525,… ## $ conflict_id &lt;dbl&gt; 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 7… ## $ type &lt;chr&gt; &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;… ## $ linpred_hat &lt;dbl&gt; 5.701372, 5.756500, 7.017963, 5.651498, 6.088931,… ggplot(gg_data, aes(x = linpred_hat, y = osvAll + 1)) + geom_point(alpha = 0.1, shape = 21, size = 0.3) + facet_wrap(vars(type)) + scale_y_log10() ggplot(gg_data, aes(x = troopLag, y = osvAll + 1)) + geom_point(alpha = 0.3, shape = 21, size = 0.3) + facet_wrap(vars(type)) + scale_y_log10() + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;gam&#39; and formula = &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; 3.3.2 Posterior Predictive Distribution library(rstanarm); options(mc.cores = parallel::detectCores()) ## Loading required package: Rcpp ## Warning: package &#39;Rcpp&#39; was built under R version 4.1.2 ## This is rstanarm version 2.21.1 ## - See https://mc-stan.org/rstanarm/articles/priors for changes to default priors! ## - Default priors may change, so it&#39;s safest to specify priors, even if equivalent to the defaults. ## - For execution on a local, multicore CPU with excess RAM we recommend calling ## options(mc.cores = parallel::detectCores()) stan_fit &lt;- stan_glm(f, data = hks, family = &quot;poisson&quot;) library(tidybayes) ppd &lt;- hks %&gt;% add_predicted_draws(stan_fit, ndraws = 8) %&gt;% mutate(.draw = paste0(&quot;Draw #&quot;, .draw)) %&gt;% pivot_wider(names_from = .draw, values_from = .prediction) %&gt;% mutate(`Observed` = osvAll) %&gt;% pivot_longer(`Draw #1`:`Observed`, names_to = &quot;type&quot;, values_to = &quot;osvAll2&quot;) %&gt;% glimpse() ## Rows: 33,714 ## Columns: 15 ## Groups: osvAll, troopLag, policeLag, militaryobserversLag, brv_AllLag, osvAllLagDum, incomp, epduration, lntpop, conflict_id, .row [3,746] ## $ osvAll &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1… ## $ troopLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ policeLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ militaryobserversLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ brv_AllLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 138, 138, 138, 13… ## $ osvAllLagDum &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ incomp &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2… ## $ epduration &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3… ## $ lntpop &lt;dbl&gt; 10.88525, 10.88525, 10.88525, 10.88525, 10.88525,… ## $ conflict_id &lt;dbl&gt; 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 7… ## $ .row &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ type &lt;chr&gt; &quot;Draw #1&quot;, &quot;Draw #2&quot;, &quot;Draw #3&quot;, &quot;Draw #4&quot;, &quot;Draw… ## $ osvAll2 &lt;dbl&gt; 300, 318, 296, 292, 306, 303, 296, 291, 4, 312, 3… ggplot(ppd, aes(x = troopLag, y = osvAll2 + 1)) + geom_point(alpha = 0.2, shape = 21, size = 0.3) + facet_wrap(vars(type)) + geom_smooth(se = FALSE) + scale_y_log10() ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; "],["posterior-predictive-distribution-1.html", "3.4 [Posterior] Predictive Distribution", " 3.4 [Posterior] Predictive Distribution As with simple models without covariates, we can use the predictive distribution and the posterior predictive distribution to understand models with covariate. In fact, these tools become more valuable as the complexity of the model increases. 3.4.1 … for the logit model scobit &lt;- haven::read_dta(&quot;data/scobit.dta&quot;) %&gt;% filter(newvote != -1) %&gt;% # weird -1s in data; unsure if sufficient glimpse() ## Rows: 99,676 ## Columns: 16 ## $ state &lt;dbl&gt; 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 9… ## $ vote &lt;dbl&gt; 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2… ## $ age &lt;dbl&gt; 60, 80, 32, 25, 55, 63, 20, 53, 49, 27, 58, 56, 34, 34, 35, 3… ## $ educ &lt;dbl&gt; 13, 13, 13, 13, 11, 14, 11, 11, 13, 13, 11, 13, 19, 19, 15, 1… ## $ citizen &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ rweight &lt;dbl&gt; 207134, 215836, 184639, 184883, 168557, 179148, 181510, 19285… ## $ south &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ gov &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ closing &lt;dbl&gt; 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 2… ## $ age2 &lt;dbl&gt; 3600, 6400, 1024, 625, 3025, 3969, 400, 2809, 2401, 729, 3364… ## $ educ2 &lt;dbl&gt; 25, 25, 25, 25, 16, 36, 16, 16, 25, 25, 16, 25, 64, 64, 36, 2… ## $ cloeduc &lt;dbl&gt; 145, 145, 145, 145, 116, 174, 116, 116, 145, 145, 116, 145, 2… ## $ cloeduc2 &lt;dbl&gt; 725, 725, 725, 725, 464, 1044, 464, 464, 725, 725, 464, 725, … ## $ newvote &lt;dbl&gt; 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0… ## $ newage &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ neweduc &lt;dbl&gt; 5, 5, 5, 5, 4, 6, 4, 4, 5, 5, 4, 5, 8, 8, 6, 5, 5, 3, 5, 1, 6… f &lt;- newvote ~ poly(neweduc, 2, raw = TRUE) + closing + poly(age, 2, raw = TRUE) + south + gov fit &lt;- glm(f, data = scobit, family = &quot;binomial&quot;) # compute estimates of linear predictor and pi linpred_hat &lt;- predict(fit, type = &quot;link&quot;) # on scale of linear predictor pi_hat &lt;- predict(fit, type = &quot;response&quot;) # on probability scale # put observed data into a data frame with linpred and pi ests observed_data &lt;- scobit %&gt;% mutate(type = &quot;observed&quot;, linpred_hat = linpred_hat, pi_hat = pi_hat) # create data frames with simulated data from predictive distribution sim_list &lt;- list() for (i in 1:5) { y_tilde &lt;- rbinom(nrow(observed_data), size = 1, prob = pi_hat) sim_list[[i]] &lt;- observed_data %&gt;% mutate(newvote = y_tilde, type = paste0(&quot;simulated #&quot;, i)) } # bind data together gg_data &lt;- bind_rows(sim_list) %&gt;% bind_rows(observed_data) %&gt;% glimpse() ## Rows: 598,056 ## Columns: 19 ## $ state &lt;dbl&gt; 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93… ## $ vote &lt;dbl&gt; 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2… ## $ age &lt;dbl&gt; 60, 80, 32, 25, 55, 63, 20, 53, 49, 27, 58, 56, 34, 34, 35… ## $ educ &lt;dbl&gt; 13, 13, 13, 13, 11, 14, 11, 11, 13, 13, 11, 13, 19, 19, 15… ## $ citizen &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ rweight &lt;dbl&gt; 207134, 215836, 184639, 184883, 168557, 179148, 181510, 19… ## $ south &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ gov &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ closing &lt;dbl&gt; 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29… ## $ age2 &lt;dbl&gt; 3600, 6400, 1024, 625, 3025, 3969, 400, 2809, 2401, 729, 3… ## $ educ2 &lt;dbl&gt; 25, 25, 25, 25, 16, 36, 16, 16, 25, 25, 16, 25, 64, 64, 36… ## $ cloeduc &lt;dbl&gt; 145, 145, 145, 145, 116, 174, 116, 116, 145, 145, 116, 145… ## $ cloeduc2 &lt;dbl&gt; 725, 725, 725, 725, 464, 1044, 464, 464, 725, 725, 464, 72… ## $ newvote &lt;dbl&gt; 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0… ## $ newage &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ neweduc &lt;dbl&gt; 5, 5, 5, 5, 4, 6, 4, 4, 5, 5, 4, 5, 8, 8, 6, 5, 5, 3, 5, 1… ## $ type &lt;chr&gt; &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;simulated… ## $ linpred_hat &lt;dbl&gt; 1.35582513, 1.33800426, 0.27569097, -0.19579006, 0.7610264… ## $ pi_hat &lt;dbl&gt; 0.7950803, 0.7921616, 0.5684895, 0.4512082, 0.6815766, 0.8… # plot fake and obs data against linear predictor. ggplot(gg_data, aes(x = linpred_hat, y = newvote)) + geom_jitter(height = 0.05, alpha = 0.01, shape = 21, size = 0.3) + facet_wrap(vars(type)) + geom_smooth() ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; # plot fake and obs data against age. ggplot(gg_data, aes(x = age, y = newvote)) + geom_jitter(height = 0.05, alpha = 0.01, shape = 21, size = 0.3) + facet_wrap(vars(type)) + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; This model, because we included a second-order polynomial for age, does a great job of picking up the nonlinear relationship between age and voting. If we replace the polynomial with a simple linear term, then the observed and predictive distributions show a stark dissimilarity. f &lt;- newvote ~ poly(neweduc, 2, raw = TRUE) + closing + age + south + gov fit &lt;- glm(f, data = scobit, family = &quot;binomial&quot;) observed_data &lt;- scobit %&gt;% mutate(type = &quot;observed&quot;, linpred_hat = predict(fit, type = &quot;link&quot;)) sim_list &lt;- list() for (i in 1:5) { y_tilde &lt;- rbinom(nrow(observed_data), size = 1, prob = plogis(observed_data$linpred_hat)) sim_list[[i]] &lt;- observed_data %&gt;% mutate(newvote = y_tilde, type = paste0(&quot;simulated #&quot;, i)) } gg_data &lt;- bind_rows(sim_list) %&gt;% bind_rows(observed_data) %&gt;% glimpse() ## Rows: 598,056 ## Columns: 18 ## $ state &lt;dbl&gt; 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93… ## $ vote &lt;dbl&gt; 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2… ## $ age &lt;dbl&gt; 60, 80, 32, 25, 55, 63, 20, 53, 49, 27, 58, 56, 34, 34, 35… ## $ educ &lt;dbl&gt; 13, 13, 13, 13, 11, 14, 11, 11, 13, 13, 11, 13, 19, 19, 15… ## $ citizen &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ rweight &lt;dbl&gt; 207134, 215836, 184639, 184883, 168557, 179148, 181510, 19… ## $ south &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ gov &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ closing &lt;dbl&gt; 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29… ## $ age2 &lt;dbl&gt; 3600, 6400, 1024, 625, 3025, 3969, 400, 2809, 2401, 729, 3… ## $ educ2 &lt;dbl&gt; 25, 25, 25, 25, 16, 36, 16, 16, 25, 25, 16, 25, 64, 64, 36… ## $ cloeduc &lt;dbl&gt; 145, 145, 145, 145, 116, 174, 116, 116, 145, 145, 116, 145… ## $ cloeduc2 &lt;dbl&gt; 725, 725, 725, 725, 464, 1044, 464, 464, 725, 725, 464, 72… ## $ newvote &lt;dbl&gt; 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0… ## $ newage &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ neweduc &lt;dbl&gt; 5, 5, 5, 5, 4, 6, 4, 4, 5, 5, 4, 5, 8, 8, 6, 5, 5, 3, 5, 1… ## $ type &lt;chr&gt; &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;simulated… ## $ linpred_hat &lt;dbl&gt; 1.227725576, 1.973989420, 0.182956194, -0.078236152, 0.510… ggplot(gg_data, aes(x = age, y = newvote)) + geom_jitter(height = 0.05, alpha = 0.01, shape = 21, size = 0.3) + facet_wrap(vars(type)) + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; We can do this same thing with Stan. However, working with the posterior simulations can be tricky. I use tidybayes add_predicted_draws() function along with some clever pivoting to get the data ready for ggplot(). library(rstanarm); options(mc.cores = parallel::detectCores()) ## Loading required package: Rcpp ## Warning: package &#39;Rcpp&#39; was built under R version 4.1.2 ## This is rstanarm version 2.21.1 ## - See https://mc-stan.org/rstanarm/articles/priors for changes to default priors! ## - Default priors may change, so it&#39;s safest to specify priors, even if equivalent to the defaults. ## - For execution on a local, multicore CPU with excess RAM we recommend calling ## options(mc.cores = parallel::detectCores()) small_scobit &lt;- sample_n(scobit, 1000) # subsample b/c model is slow stan_fit &lt;- stan_glm(f, data = small_scobit, family = &quot;binomial&quot;) library(tidybayes) ppd &lt;- small_scobit %&gt;% add_predicted_draws(stan_fit, ndraws = 8) %&gt;% mutate(.draw = paste0(&quot;Draw #&quot;, .draw)) %&gt;% pivot_wider(names_from = .draw, values_from = .prediction) %&gt;% mutate(`Observed` = newvote) %&gt;% pivot_longer(`Draw #1`:`Observed`, names_to = &quot;type&quot;, values_to = &quot;newvote2&quot;) %&gt;% glimpse() ## Rows: 9,000 ## Columns: 21 ## Groups: state, vote, age, educ, citizen, rweight, south, gov, closing, age2, educ2, cloeduc, cloeduc2, newvote, newage, neweduc, .row [1,000] ## $ state &lt;dbl&gt; 84, 84, 84, 84, 84, 84, 84, 84, 84, 93, 93, 93, 93, 93, 93,… ## $ vote &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ age &lt;dbl&gt; 20, 20, 20, 20, 20, 20, 20, 20, 20, 69, 69, 69, 69, 69, 69,… ## $ educ &lt;dbl&gt; 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15,… ## $ citizen &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ rweight &lt;dbl&gt; 75464, 75464, 75464, 75464, 75464, 75464, 75464, 75464, 754… ## $ south &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ gov &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1,… ## $ closing &lt;dbl&gt; 32, 32, 32, 32, 32, 32, 32, 32, 32, 29, 29, 29, 29, 29, 29,… ## $ age2 &lt;dbl&gt; 400, 400, 400, 400, 400, 400, 400, 400, 400, 4761, 4761, 47… ## $ educ2 &lt;dbl&gt; 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,… ## $ cloeduc &lt;dbl&gt; 192, 192, 192, 192, 192, 192, 192, 192, 192, 174, 174, 174,… ## $ cloeduc2 &lt;dbl&gt; 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1044,… ## $ newvote &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ newage &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ neweduc &lt;dbl&gt; 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,… ## $ .row &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3,… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,… ## $ type &lt;chr&gt; &quot;Draw #1&quot;, &quot;Draw #2&quot;, &quot;Draw #3&quot;, &quot;Draw #4&quot;, &quot;Draw #5&quot;, &quot;Dra… ## $ newvote2 &lt;dbl&gt; 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,… ggplot(ppd, aes(x = age, y = newvote2)) + geom_jitter(height = 0.15, alpha = 0.2, shape = 21, size = 0.3) + facet_wrap(vars(type)) + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; 3.4.2 … for the Poisson model The code below repeated this exercise for the Poisson model using the HKS data. # load hks data hks &lt;- read_csv(&quot;data/hks.csv&quot;) %&gt;% na.omit() ## Rows: 3972 Columns: 10 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (10): osvAll, troopLag, policeLag, militaryobserversLag, brv_AllLag, osv... ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. # fit poisson model f &lt;- osvAll ~ troopLag + policeLag + militaryobserversLag + brv_AllLag + osvAllLagDum + incomp + epduration + lntpop fit &lt;- glm(f, data = hks, family = poisson) # simulate fake data from predictive distribution observed_data &lt;- hks %&gt;% mutate(type = &quot;observed&quot;, linpred_hat = predict(fit, type = &quot;link&quot;)) sim_list &lt;- list() for (i in 1:5) { sim_list[[i]] &lt;- observed_data %&gt;% mutate(osvAll = rpois(nrow(observed_data), lambda = exp(observed_data$linpred_hat)), type = paste0(&quot;simulated #&quot;, i)) } gg_data &lt;- bind_rows(sim_list) %&gt;% bind_rows(observed_data) %&gt;% glimpse() ## Rows: 22,476 ## Columns: 12 ## $ osvAll &lt;dbl&gt; 306, 313, 1090, 283, 436, 207, 203, 207, 171, 203… ## $ troopLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ policeLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ militaryobserversLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ brv_AllLag &lt;dbl&gt; 0, 138, 2428, 30, 850, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ osvAllLagDum &lt;dbl&gt; 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ incomp &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2… ## $ epduration &lt;dbl&gt; 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1… ## $ lntpop &lt;dbl&gt; 10.88525, 10.88525, 10.88525, 10.88525, 10.88525,… ## $ conflict_id &lt;dbl&gt; 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 7… ## $ type &lt;chr&gt; &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;simulated #1&quot;, &quot;… ## $ linpred_hat &lt;dbl&gt; 5.701372, 5.756500, 7.017963, 5.651498, 6.088931,… # plot fake and observed data against linear predictor ggplot(gg_data, aes(x = linpred_hat, y = osvAll + 1)) + geom_point(alpha = 0.1, shape = 21, size = 0.3) + facet_wrap(vars(type)) + scale_y_log10() # plot fake and observed data against number of troops ggplot(gg_data, aes(x = troopLag, y = osvAll + 1)) + geom_point(alpha = 0.3, shape = 21, size = 0.3) + facet_wrap(vars(type)) + scale_y_log10() + geom_smooth(se = FALSE) ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; And below is code to work with the posterior predictive distribution. stan_fit &lt;- stan_glm(f, data = hks, family = &quot;poisson&quot;, chains = 1) ppd &lt;- hks %&gt;% add_predicted_draws(stan_fit, ndraws = 8) %&gt;% mutate(.draw = paste0(&quot;Draw #&quot;, .draw)) %&gt;% pivot_wider(names_from = .draw, values_from = .prediction) %&gt;% mutate(`Observed` = osvAll) %&gt;% pivot_longer(`Draw #1`:`Observed`, names_to = &quot;type&quot;, values_to = &quot;osvAll2&quot;) %&gt;% glimpse() ## Rows: 33,714 ## Columns: 15 ## Groups: osvAll, troopLag, policeLag, militaryobserversLag, brv_AllLag, osvAllLagDum, incomp, epduration, lntpop, conflict_id, .row [3,746] ## $ osvAll &lt;dbl&gt; 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1… ## $ troopLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ policeLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ militaryobserversLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ brv_AllLag &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 138, 138, 138, 13… ## $ osvAllLagDum &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ incomp &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2… ## $ epduration &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3… ## $ lntpop &lt;dbl&gt; 10.88525, 10.88525, 10.88525, 10.88525, 10.88525,… ## $ conflict_id &lt;dbl&gt; 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 7… ## $ .row &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2… ## $ .chain &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ .iteration &lt;int&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ type &lt;chr&gt; &quot;Draw #1&quot;, &quot;Draw #2&quot;, &quot;Draw #3&quot;, &quot;Draw #4&quot;, &quot;Draw… ## $ osvAll2 &lt;dbl&gt; 313, 313, 299, 267, 300, 318, 328, 311, 4, 348, 3… ggplot(ppd, aes(x = troopLag, y = osvAll2 + 1)) + geom_point(alpha = 0.2, shape = 21, size = 0.3) + facet_wrap(vars(type)) + geom_smooth(se = FALSE) + scale_y_log10() ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; "],["quantities-of-interest.html", "3.5 Quantities of Interest", " 3.5 Quantities of Interest We’ve now got three models: the normal model the logit model the Poisson model In only the case of the normal distribution are the parameters directly interpretable. The meaning of the coefficients in the case of the logit and Poisson model is especially unclear. Thus, we are interested not in the coefficients themselves, but in other “quantities of interest.” 3.5.1 Expected Value The first quantity of interest is the expected value \\(E(y \\mid X_s)\\). Imagine a particular scenario of interest \\(X_s\\). For the logit model, we can compute the expected value of \\(y\\) for that scenario using \\(\\hat{E}(y \\mid X_p) = \\hat{\\pi}_s = \\text{logit}^{-1}(X_s\\hat{\\beta})\\). For the Poisson model, it’s \\(\\hat{E}(y \\mid X_p) = \\hat{\\lambda}_s = e^{X_s\\hat{\\beta}}\\). Let’s see how this would work with the scobit data. scobit &lt;- haven::read_dta(&quot;data/scobit.dta&quot;) %&gt;% filter(newvote != -1) f &lt;- newvote ~ poly(neweduc, 2, raw = TRUE) + closing + poly(age, 2, raw = TRUE) + south + gov fit &lt;- glm(f, data = scobit, family = binomial) First, let’s create the scenario of interest. # create the scenario of interest X_s (but a data frame) scenario &lt;- tibble( neweduc = median(scobit$neweduc), closing = median(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) %&gt;% glimpse() ## Rows: 1 ## Columns: 5 ## $ neweduc &lt;dbl&gt; 5 ## $ closing &lt;dbl&gt; 30 ## $ age &lt;dbl&gt; 40 ## $ south &lt;dbl&gt; 0 ## $ gov &lt;dbl&gt; 0 # now use the predict() function to get pi_hat pi_hat &lt;- predict(fit, newdata = scenario, type = &quot;response&quot;) So when all the \\(x\\)s are set to their median, the estimated probability of voting is pi_hat. We could all compute the expected value for all values of a single variable with other variables set to their median. scenarios &lt;- tibble( neweduc = sort(unique(scobit$neweduc)), closing = median(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) %&gt;% glimpse() ## Rows: 8 ## Columns: 5 ## $ neweduc &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8 ## $ closing &lt;dbl&gt; 30, 30, 30, 30, 30, 30, 30, 30 ## $ age &lt;dbl&gt; 40, 40, 40, 40, 40, 40, 40, 40 ## $ south &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0 ## $ gov &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0 scenarios$pi_hat &lt;- predict(fit, newdata = scenarios, type = &quot;response&quot;) ggplot(scenarios, aes(x = neweduc, y = pi_hat))+ geom_point() 3.5.2 First Difference Perhaps the most important quantity of interest, though, is the first difference. Imagine two scenario of interest \\(X_{lo}\\) and \\(X_{hi}\\). We then compute the difference \\(\\Delta\\) between the expected values \\(X_{lo}\\) and \\(X_{hi}\\), so that \\(\\hat{\\Delta} = \\hat{E}(y \\mid X_{hi}) - \\hat{E}(y \\mid X_{lo})\\). This works for (almost?) all models we’ll see in this course. lo_scenario &lt;- tibble( neweduc = quantile(scobit$neweduc, 0.10), # 25th percentile closing = median(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) %&gt;% glimpse() ## Rows: 1 ## Columns: 5 ## $ neweduc &lt;dbl&gt; 3 ## $ closing &lt;dbl&gt; 30 ## $ age &lt;dbl&gt; 40 ## $ south &lt;dbl&gt; 0 ## $ gov &lt;dbl&gt; 0 hi_scenario &lt;- tibble( neweduc = quantile(scobit$neweduc, 0.90), # 75th percentile closing = median(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) %&gt;% glimpse() ## Rows: 1 ## Columns: 5 ## $ neweduc &lt;dbl&gt; 7 ## $ closing &lt;dbl&gt; 30 ## $ age &lt;dbl&gt; 40 ## $ south &lt;dbl&gt; 0 ## $ gov &lt;dbl&gt; 0 fd_hat &lt;- predict(fit, newdata = hi_scenario, type = &quot;response&quot;) - predict(fit, newdata = lo_scenario, type = &quot;response&quot;) print(fd_hat) ## 1 ## 0.4240654 This shows that if we move education from it minimum value (1) to its maximum value (8), the expected value goes up by 0.70. Since the expected value here is a probability, we can say that the chance of voting goes up by 42 percentage points (from 44% to 87%). "],["week-4-confidence-intervals.html", "Chapter 4 Week 4: Confidence Intervals", " Chapter 4 Week 4: Confidence Intervals This week, we expand our confidence interval toolkit. We have three core methods: parametric bootstrap, which can be used directly for coefficients or quantities of interest. nonparametric bootstrap, which can be used directly for coefficients or quantities of interest. Wald confidence interval for coefficients, extended to quantities of interest using the delta method. "],["the-parametric-bootstrap-1.html", "4.1 The Parametric Bootstrap", " 4.1 The Parametric Bootstrap We’ve already seen the parametric bootstrap, but a brief review is worthwhile. To do compute a confidence interval using the parametric bootstrap, do the following: Approximate \\(f(y; \\theta)\\) with \\(\\hat{f} = f(y; \\hat{\\theta})\\). Simulate a new outcome \\(y^{\\text{bs}}\\) from the estimated distribution. Re-compute the estimate of interest \\(\\hat{\\theta}^{\\text{bs}}\\) or \\(\\hat{\\tau}^{\\text{bs}}\\) using the bootstrapped outcome variable \\(y^{\\text{bs}}\\) rather than the observed outcome \\(y\\). Repeat 1 and 2 many times (say 2,000) to obtain many bootstrapped estimates. To obtain the 95% confidence interval, take the 2.5th and 97.5th percentiles of the estimates. In general, to obtain a \\(100(1 - \\alpha)\\%\\) confidence interval, \\(\\frac{\\alpha}{2}\\)th and \\((1 - \\frac{\\alpha}{2})\\)th percentiles. This is known as the percentile method. The parametric bootstrap is a powerful, general tool to obtain confidence intervals for estimates from parametric models, but it relies heavily on the parametric assumptions. "],["the-nonparametric-bootstrap.html", "4.2 The Nonparametric Bootstrap", " 4.2 The Nonparametric Bootstrap The nonparametric bootstrap works similarly to the parametric bootstrap. But rather than simulate a new outcome from the fitted parametric distribution, we sample (with replacement) a new data set from the observed data set (of the same size). Suppose a data set \\(D\\) with \\(N\\) rows. To do compute a confidence interval using the nonparametric bootstrap, do the following: Sample \\(N\\) rows with replacement from \\(D\\) to create a single bootstrap data set \\(D^{bs}\\). Re-compute the estimate of interest \\(\\hat{\\theta}^{\\text{bs}}\\) or \\(\\hat{\\tau}^{\\text{bs}}\\) using the bootstrap data set \\(D^{bs}\\) (rather than the observed data set \\(D\\)). Repeat 1 and 2 many times (say 2,000) to obtain many bootstrap estimates. To obtain the 95% confidence interval, take the 2.5th and 97.5th percentiles of the estimates. In general, to obtain a \\(100(1 - \\alpha)\\%\\) confidence interval, \\(\\frac{\\alpha}{2}\\)th and \\((1 - \\frac{\\alpha}{2})\\)th percentiles. This is known as the percentile method. Important: The parametric bootstrap obtains a single bootstrap data set by simulated a new outcome from the fitted parametric distribution. The nonparametric bootstrap creates a single bootstrap data set by sampling from the data set with replacement. 4.2.1 Example: Coefficients from the Civilian Casualties Model # load hks data hks &lt;- read_csv(&quot;data/hks.csv&quot;) %&gt;% na.omit() # fit poisson regression model f &lt;- osvAll ~ troopLag + policeLag + militaryobserversLag + brv_AllLag + osvAllLagDum + incomp + epduration + lntpop # fit poisson regression model fit &lt;- glm(f, data = hks, family = poisson) texreg::screenreg(fit) ## ## ===================================== ## Model 1 ## ------------------------------------- ## (Intercept) -3.58 *** ## (0.04) ## troopLag -0.17 *** ## (0.00) ## policeLag -3.27 *** ## (0.02) ## militaryobserversLag 8.10 *** ## (0.01) ## brv_AllLag 0.00 *** ## (0.00) ## osvAllLagDum 0.29 *** ## (0.00) ## incomp 3.49 *** ## (0.02) ## epduration -0.02 *** ## (0.00) ## lntpop 0.19 *** ## (0.00) ## ------------------------------------- ## AIC 2139137.24 ## BIC 2139193.29 ## Log Likelihood -1069559.62 ## Deviance 2134800.81 ## Num. obs. 3746 ## ===================================== ## *** p &lt; 0.001; ** p &lt; 0.01; * p &lt; 0.05 First, for comparison, let’s using the familiar parametric bootstrap. # parametric bs for coefficients n_bs &lt;- 2000 coef_bs &lt;- matrix(nrow = n_bs, ncol = length(coef(fit))) names(coef_bs) &lt;- names(coef(fit)) for (i in 1:n_bs) { lambda_hat &lt;- predict(fit, type = &quot;response&quot;) y_bs &lt;- rpois(length(lambda_hat), lambda = lambda_hat) fit_bs &lt;- update(fit, formula = y_bs ~ .) coef_bs[i, ] &lt;- coef(fit_bs) } # compute the 2.5th and 97.5th percentiles cis &lt;- apply(coef_bs, 2, quantile, probs = c(0.05, 0.95)); cis ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] ## 5% -3.651811 -0.1726437 -3.310953 8.080174 0.0005467366 0.2832622 3.454219 ## 95% -3.503847 -0.1668833 -3.230958 8.120243 0.0005740558 0.2990284 3.516186 ## [,8] [,9] ## 5% -0.02235465 0.1858499 ## 95% -0.02209819 0.1928230 # put the cis into a nice little data frame for use later pbs_ci_df &lt;- tibble(var = names(coef(fit)), est = coef(fit), lwr = cis[&quot;5%&quot;, ], upr = cis[&quot;95%&quot;, ], type = &quot;Parametric Bootstrap&quot;) Now let’s use the nonparametric bootstrap. The two changed lines are flagged with comments # nonparametric bs for coefficients n_bs &lt;- 2000 coef_bs &lt;- matrix(nrow = n_bs, ncol = length(coef(fit))) names(coef_bs) &lt;- names(coef(fit)) for (i in 1:n_bs) { bs_data &lt;- sample_n(hks, size = nrow(hks), replace = TRUE) # sample from hks w/ repl. fit_bs &lt;- update(fit, data = bs_data) # fit same model on resampled data coef_bs[i, ] &lt;- coef(fit_bs) } cis &lt;- apply(coef_bs, 2, quantile, probs = c(0.05, 0.95)); cis ## [,1] [,2] [,3] [,4] [,5] [,6] ## 5% -14.344215 -0.37885418 -7.5344749 -0.1225277 -0.0005440105 -1.726691 ## 95% 4.358104 0.05088762 -0.9204064 19.2516538 0.0022893751 2.605080 ## [,7] [,8] [,9] ## 5% 2.222256 -0.03827870 -0.5299241 ## 95% 4.270703 -0.00653603 1.0733752 nbs_ci_df &lt;- tibble(var = names(coef(fit)), est = coef(fit), lwr = cis[&quot;5%&quot;, ], upr = cis[&quot;95%&quot;, ], type = &quot;Nonparametric Bootstrap&quot;) Now let’s compare the estimates. # combined the two dfs w/ the cis into a single df ci_df &lt;- bind_rows(pbs_ci_df, nbs_ci_df) # plots the coefficient estimates and cis ggplot(ci_df, aes(x = est, xmin = lwr, xmax = upr, y = var, color = type)) + geom_errorbarh(position = position_dodge(width = .4), height = 0) + geom_point(position = position_dodge(width = .4)) We could also make a little table. ci_df %&gt;% mutate(ci_chr = paste0(&quot;[&quot;, scales::number(lwr, 0.001), &quot;, &quot;, scales::number(upr, 0.001), &quot;]&quot;), est_chr = scales::number(est, 0.001)) %&gt;% select(var, est_chr, ci_chr, type) %&gt;% pivot_wider(names_from = type, values_from = ci_chr) %&gt;% rename(`Variable` = var, `Coefficient Estimate` = est_chr) %&gt;% kableExtra::kable(format = &quot;markdown&quot;) Variable Coefficient Estimate Parametric Bootstrap Nonparametric Bootstrap (Intercept) -3.579 [-3.652, -3.504] [-14.344, 4.358] troopLag -0.170 [-0.173, -0.167] [-0.379, 0.051] policeLag -3.272 [-3.311, -3.231] [-7.534, -0.920] militaryobserversLag 8.100 [8.080, 8.120] [-0.123, 19.252] brv_AllLag 0.001 [0.001, 0.001] [-0.001, 0.002] osvAllLagDum 0.291 [0.283, 0.299] [-1.727, 2.605] incomp 3.486 [3.454, 3.516] [2.222, 4.271] epduration -0.022 [-0.022, -0.022] [-0.038, -0.007] lntpop 0.189 [0.186, 0.193] [-0.530, 1.073] 4.2.2 Example: First Difference from the Civilian Casualties Model # load hks data hks &lt;- read_csv(&quot;data/hks.csv&quot;) %&gt;% na.omit() # fit poisson regression model f &lt;- osvAll ~ troopLag + policeLag + militaryobserversLag + brv_AllLag + osvAllLagDum + incomp + epduration + lntpop fit &lt;- glm(f, data = hks, family = poisson) # compute qi using the invariance property X_lo &lt;- tibble(troopLag = 0, policeLag = 0, militaryobserversLag = 0, brv_AllLag = 0, osvAllLagDum = 0, incomp = 2, epduration = 46, lntpop = 9.19) lambda_hat_lo &lt;- predict(fit, newdata = X_lo, type = &quot;response&quot;) X_hi &lt;- mutate(X_lo, troopLag = 29.209) lambda_hat_hi &lt;- predict(fit, newdata = X_hi, type = &quot;response&quot;) fd_hat &lt;- lambda_hat_hi - lambda_hat_lo; fd_hat ## 1 ## -60.57989 Now let’s get a 90% confidence interval for the first difference using the parametric bootstrap. # parametric bs for coefficients n_bs &lt;- 1000 fd_bs &lt;- numeric(n_bs) names(coef_bs) &lt;- names(coef(fit)) for (i in 1:n_bs) { lambda_hat &lt;- predict(fit, type = &quot;response&quot;) y_bs &lt;- rpois(length(lambda_hat), lambda = lambda_hat) fit_bs &lt;- update(fit, formula = y_bs ~ .) lh_lo_bs &lt;- predict(fit_bs, newdata = X_lo, type = &quot;response&quot;) lh_hi_bs &lt;- predict(fit_bs, newdata = X_hi, type = &quot;response&quot;) fd_bs[i] &lt;- lh_hi_bs - lh_lo_bs } quantile(fd_bs, probs = c(0.05, 0.95)) ## 5% 95% ## -60.91010 -60.26159 Now let’s get a 90% confidence interval for the first difference using the nonparametric bootstrap. # nonparametric bs for coefficients n_bs &lt;- 1000 fd_bs &lt;- numeric(n_bs) names(coef_bs) &lt;- names(coef(fit)) for (i in 1:n_bs) { bs_data &lt;- sample_n(hks, size = nrow(hks), replace = TRUE) # sample from hks w/ repl. fit_bs &lt;- update(fit, data = bs_data) # fit same model on resampled data lh_lo_bs &lt;- predict(fit_bs, newdata = X_lo, type = &quot;response&quot;) lh_hi_bs &lt;- predict(fit_bs, newdata = X_hi, type = &quot;response&quot;) fd_bs[i] &lt;- lh_hi_bs - lh_lo_bs } quantile(fd_bs, probs = c(0.05, 0.95)) ## 5% 95% ## -90.66696 33.85956 "],["wald-confidence-intervals.html", "4.3 Wald Confidence Intervals", " 4.3 Wald Confidence Intervals We can easily use the log-likelihood function to obtain point estimates. It turns out, though, that this same log-likelihood function contains information that helps use estimate the precision of those estimates as well. As an example, consider the following two log-likelihood functions: ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. Which of these two log-likelihood functions do you think provides a more precise estimate? Note: These likelihoods are from a normal model with unknown mean. I simulated 100 observations for \\(y_1\\) and 500 observations for \\(y_2\\). (I centered the data so the sample means both occurred exactly at two. Key Idea: We can use the curvature around the maximum likelihood estimate to get a sense of the uncertainty. What quantity tells us about the amount of curvature at the maximum? The second derivative. As the second derivative goes down, the curvature goes up. As the curvature goes up, the uncertainty goes down. 4.3.1 Curvature in a Single Dimmension To develop our intuition about “curvature” and confidence intervals, I analyze the Stylized Normal Model (\\(\\sigma = 1\\)). Here, we model the data as a normal distribution with \\(\\mu\\) unknown (and to be estimated), but \\(\\sigma = 1\\) (known; not estimated). That is, \\(y \\sim N(\\mu, 1)\\). \\[ \\begin{aligned} \\log \\mathcal{L}(\\mu) &amp;= -\\frac{n}{2\\pi} - \\frac{1}{2}\\sum_{i = 1}^n (y_i - \\mu)^2\\\\ \\dfrac{\\partial \\log \\mathcal{L}(\\mu)}{\\partial \\mu} &amp;= \\sum_{i = 1}^n y_i - \\mu n\\\\ \\dfrac{\\partial^2 \\log \\mathcal{L}(\\mu)}{\\partial^2 \\mu} &amp;= - n \\end{aligned} \\] Facts: As \\(n\\) increases, \\(\\frac{\\partial^2 \\log \\mathcal{L}(\\mu | y)}{\\partial^2 \\mu}\\) becomes more negative. As \\(\\frac{\\partial^2 \\log \\mathcal{L}(\\mu | y)}{\\partial^2 \\mu}\\) gets more negative, the curvature increases. As the curvature increases, the uncertainty decreases. Wouldn’t it be really nice if we could use \\(\\frac{\\partial^2 \\log \\mathcal{L}(\\mu)}{\\partial^2 \\mu}\\) to estimate the standard error? It turns out that this quantity is a direct, almost magically intuitive estimator of the standard error. In the single parameter case, we have the following approximation. \\[ \\widehat{\\text{Var}}(\\hat{\\theta}) \\approx \\left[\\left. - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta)}{\\partial^2 \\theta}\\right| _{\\theta = \\hat{\\theta}}\\right] ^{-1} \\] I should be careful here. This is an asymptotic result. As the sample size grows, the variance of \\(\\hat{\\beta}\\) gets closer and closer to \\(\\left[\\left. - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta)}{\\partial^2 \\theta}\\right| _{\\theta = \\hat{\\theta}}\\right] ^{-1}\\). I’m interpreting this large sample result as a small sample approximation. This mean that we find the second derivative, evaluate it at the maximum (\\(\\theta = \\hat{\\theta}\\)), and find the inverse (\\(-1\\)). That’s an estimate of the variance. To convert it to a standard error, just take the square root. \\[ \\widehat{\\text{SE}}(\\hat{\\theta}) \\approx \\sqrt{\\left[\\left. - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta)}{\\partial^2 \\theta}\\right| _{\\theta = \\hat{\\theta}}\\right] ^{-1}} \\] If we continue the stylized normal example, we have the following. \\[ \\begin{equation*} \\dfrac{\\partial^2 \\log \\mathcal{L}(\\mu | y)}{\\partial^2 \\mu} = - n ~{\\color{purple}{\\Longrightarrow}}~ \\left[\\left. - \\frac{\\partial^2 \\log \\mathcal{L}(\\mu | y)}{\\partial^2 \\mu}\\right| _{\\mu = \\hat{\\mu}}\\right] ^{-1} = \\dfrac{1}{n} \\approx \\widehat{\\text{Var}}(\\hat{\\mu}) \\end{equation*} \\] And then \\[ \\begin{equation*} \\widehat{\\text{SE}}(\\hat{\\mu}) \\approx \\sqrt{\\dfrac{1}{n}} \\end{equation*} \\] Does this answer make sense? What is the standard error of the mean from Methods II? Hint: It’s \\(\\text{SE}[\\text{avg}(y)] \\approx \\sqrt{\\dfrac{\\text{population SD}}{n}}\\). In this case, the “population SD” is \\(\\sigma = 1\\), as assumed by the stylized normal model. 4.3.2 Curvature in a Multiple Dimmensions To add multiple dimensions, let’s consider the beta model from Week 1. Here, we assume that \\(y \\sim \\text{Beta}(\\alpha, \\beta)\\), and our goal is to estimate \\(\\alpha\\) and \\(\\beta\\). The key is that we have multiple (i.e., two) parameters to estimate. It’s a bit trickier to think about curvature in multiple dimensions. Here’s what the log-likelihood function might look like for a give data set. To make more sense, of this 3D plot, let’s look at the contour plot. The curvature around the maximum vertically tells use the variance in \\(\\hat{\\beta}\\). The curvature around the maximum horizontally tells use the variance in \\(\\hat{\\alpha}\\). But there’s a third direction that’s relevant here: the curvature diagonally. The diagonal curvature tells us the covariance of \\(\\hat{\\alpha}\\) and \\(\\hat{\\beta}\\). That is, if we over-estimate \\(\\alpha\\), how much do we tend to over- (or under-)estimate \\(\\beta\\)? Rather than a single variance, we get a variance matrix (sometimes called the “covariance matrix” or the “variance-covariance matrix”. \\[ \\begin{equation*} \\widehat{\\text{Var}}(\\hat{\\theta})= \\widehat{\\text{Cov}}(\\hat{\\theta}) \\approx \\left. \\left[ \\displaystyle \\begin{matrix} - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial^2 \\theta_1} &amp; - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_1 \\partial \\theta_2}\\\\ - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_2 \\partial \\theta_1} &amp; - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial^2 \\theta_2}\\\\ \\end{matrix}\\right]^{-1} \\right|_{\\theta = \\hat{\\theta}} \\end{equation*} \\] The elements along the diagonal (in red) are the variances for each parameter, so the square root of the diagonal gives you the standard errors. This is exactly what we’d expect. \\[ \\begin{equation*} \\widehat{\\text{Var}}(\\hat{\\theta}) \\approx \\left. \\left[ \\displaystyle \\begin{matrix} \\color{red}{- \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial^2 \\theta_1}} &amp; - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_1 \\partial \\theta_2}\\\\ - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_2 \\partial \\theta_1} &amp; \\color{red}{- \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial^2 \\theta_2}}\\\\ \\end{matrix}\\right]^{-1} \\right|_{\\theta = \\hat{\\theta}} \\end{equation*} \\] The off-diagonal elements (in blue) are the covariances–they’ll be really important to us later, but we don’t have a direct use for them at the moment. \\[ \\begin{equation*} \\widehat{\\text{Var}}(\\hat{\\theta}) \\approx \\left. \\left[ \\displaystyle \\begin{matrix} - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial^2 \\theta_1} &amp; \\color{blue}{- \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_1 \\partial \\theta_2}}\\\\ \\color{blue}{- \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_2 \\partial \\theta_1}} &amp; - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial^2 \\theta_2}\\\\ \\end{matrix}\\right]^{-1} \\right|_{\\theta = \\hat{\\theta}} \\end{equation*} \\] But what about more than two parameters? It’s exactly what you’d expect. We call this matrix of second-derivatives the “information matrix” \\(\\mathcal{I}(\\theta)\\). When evaluated at the ML estimate, we call it the “observed information matrix” \\(\\mathcal{I}(\\hat{\\theta})\\). \\[ \\begin{equation*} \\begin{aligned} \\widehat{\\text{Var}}(\\hat{\\theta}) &amp;\\approx \\left. \\left[ \\displaystyle \\begin{matrix} - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial^2 \\theta_1} &amp; - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_1 \\partial \\theta_2} &amp; \\ldots &amp;- \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_1 \\partial \\theta_k}\\\\ - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_2 \\partial \\theta_1} &amp; - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial^2 \\theta_2} &amp; \\ldots &amp; - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_2 \\partial \\theta_k}\\\\ \\vdots &amp; \\vdots &amp; \\ddots &amp; \\vdots \\\\ - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_k \\partial \\theta_1} &amp; - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial \\theta_k \\partial \\theta_2} &amp; \\ldots &amp; - \\frac{\\partial^2 \\log \\mathcal{L}(\\theta| y)}{\\partial^2 \\theta_k}\\\\ \\end{matrix}\\right]^{-1} \\right|_{\\theta = \\hat{\\theta}}\\\\ &amp; \\approx \\mathcal{I}(\\theta)^{-1}|_{\\theta = \\hat{\\theta}}\\\\ &amp;\\approx \\mathcal{I}(\\hat{\\theta})^{-1} \\end{aligned} \\end{equation*} \\] 4.3.3 From Curvature to Confidence Intervals To convert this variance estimate into a confidence interval, we need the following large sample result. It turns out that, as the sample size grows large, the ML estimate converges to a normally distributed random variable with mean \\(theta_{true}\\) and variance \\(\\mathcal{I}(\\theta_{true})^{-1}\\).. key fact: \\(\\hat{\\theta} \\overset{a}{\\sim} N\\left[ \\theta_{true}, \\mathcal{I}(\\theta_{true})^{-1}\\right]\\) In practice, we’ll take this to mean it’s approximately normal. \\[ \\begin{align*} 90\\%~\\text{C.I.} &amp;\\approx \\hat{\\theta} \\pm 1.64\\dfrac{1}{\\sqrt{\\mathcal{I}(\\hat{\\theta})}}\\\\ 95\\%~\\text{C.I.} &amp;\\approx \\hat{\\theta} \\pm 1.96\\dfrac{1}{\\sqrt{\\mathcal{I}(\\hat{\\theta})}} \\end{align*} \\] To work with these intervals, then, we just need the variance matrix \\(\\widehat{\\text{Var}}(\\hat{\\theta}) = \\mathcal{I}(\\hat{\\theta})^{-1}\\). Much like we can access the ML estimates of the model coefficients \\(\\hat{\\beta}\\) with coef(), we can access \\(\\widehat{\\text{Var}}(\\hat{\\theta})\\). # load hks data hks &lt;- read_csv(&quot;data/hks.csv&quot;) %&gt;% na.omit() # fit poisson regression model f &lt;- osvAll ~ troopLag + policeLag + militaryobserversLag + brv_AllLag + osvAllLagDum + incomp + epduration + lntpop fit &lt;- glm(f, data = hks, family = poisson) # compute 90% confidence intervals beta_hat &lt;- coef(fit) var_hat &lt;- vcov(fit) se_hat &lt;- sqrt(diag(var_hat)) # keep only the diagonal elements ci_lwr &lt;- beta_hat - 1.64*se_hat ci_upr &lt;- beta_hat + 1.64*se_hat # make a nice table tibble(`Variable` = names(beta_hat), `Coefficient Estimate` = scales::number(beta_hat, 0.001), `90% Confidence Interval` = paste0(&quot;[&quot;, scales::number(ci_lwr, 0.001), &quot;,&quot;, scales::number(ci_upr, 0.001), &quot;]&quot;)) %&gt;% kableExtra::kable(format = &quot;markdown&quot;) Variable Coefficient Estimate 90% Confidence Interval (Intercept) -3.579 [-3.649,-3.509] troopLag -0.170 [-0.173,-0.167] policeLag -3.272 [-3.313,-3.232] militaryobserversLag 8.100 [8.080,8.120] brv_AllLag 0.001 [0.001,0.001] osvAllLagDum 0.291 [0.283,0.299] incomp 3.486 [3.457,3.516] epduration -0.022 [-0.022,-0.022] lntpop 0.189 [0.186,0.193] Compare these confidence intervals to the parametric and nonparametric intervals from the previous section. 4.3.4 Final Notes The Wald confidence interval does not easily extend to quantities of interest. It turns out that their is a way, called the “delta method.” It’s a bit tedious and not necessary since we have other methods. But I’ll mention it here: “the delta method.” King, Tomz, and Wittenberg (2001) give us an easy alternative to the delta method; we’ll see their method in a couple of weeks. If you use optim() to find the ML estimates, then you can have it return the observed information matrix \\(\\mathcal{I}(\\hat{\\theta})\\) to you by supplying the argument hession = TRUE to optim(). optim() returns a list; the component named \"hessian\" is the Hessian matrix. You simple need to find the inverse of the negative of the Hessian to obtain the estimated variance matrix. Something like est &lt;- optim(..., hessian = TRUE) followed by var_hat &lt;- solve(-est$hessian). "],["evaluating-confidence-intervals.html", "4.4 Evaluating Confidence Intervals", " 4.4 Evaluating Confidence Intervals 4.4.1 Coverage Before we discuss these three intervals, let’s review how we evaluate intervals. How do we know if a particular method works well? We evaluate confidence intervals in terms of their coverage: a \\(100(1 - \\alpha)\\%\\) confidence interval, should capture the parameter \\(100(1 - \\alpha)\\%\\) of the time under repeated sampling. That is, if we imagine repeating the study over-and-over (in the usual frequentist sense), then \\(100(1 - \\alpha)\\%\\) of the confidence intervals contain the true parameter. 4.4.2 Monte Carlo Simulation to Assess Coverage 4.4.2.1 A Simple Example As an example, let’s consider the usual 90% confidence interval for the mean: 95% CI = \\([\\text{avg}(y) - 1.64 \\times \\hat{\\text{SE}}, \\text{avg}(y) + 1.64 \\times \\hat{\\text{SE}}]\\), where \\(\\hat{\\text{SE}} = \\frac{\\text{SD}(y)}{\\sqrt{n}}\\). We learned in an earlier class that this interval should capture the population average in about 90% of repeated trials. For out purposes, the “population average” refers to the mean parameter of some probability distribution. Let’s let the unknown distribution be \\(Y \\sim \\text{Poisson}(\\lambda = 10)\\). The “population” mean hear is \\(E(Y) = \\lambda = 10\\). Now let’s use a Monte Carlo simulation to evaluate this particular interval. For this study, let’s use a small sample size of 15 observations. # number of MC simulations (i.e., repeated trials) n_mc_sims &lt;- 10000 # contains for lower and upper bounds of 90% cis lwr &lt;- numeric(n_mc_sims) upr &lt;- numeric(n_mc_sims) # mc simulations for (i in 1:n_mc_sims) { y &lt;- rpois(15, lambda = 10) se_hat &lt;- sd(y)/sqrt(length(y)) lwr[i] &lt;- mean(y) - 1.64*se_hat upr[i] &lt;- mean(y) + 1.64*se_hat } # combine results into a data frame mc_sims &lt;- tibble(iteration = 1:n_mc_sims, lwr, upr) %&gt;% mutate(captured = lwr &lt; 10 &amp; upr &gt; 10) # compute the proportion of simulations that capture the parameter mean(mc_sims$captured) ## [1] 0.8705 This simulation demonstrates that this simple interval captures the parameter \\(\\lambda = 10\\) in about 90% of repeated samples. This interval is slightly too narrow, because we should really use the \\(t\\)-interval here due to the small sample size. The simulation below shows that this interval has better coverage (i.e., closer to 90%). # number of MC simulations (i.e., repeated trials) n_mc_sims &lt;- 10000 # contains for lower and upper bounds of 90% cis lwr &lt;- numeric(n_mc_sims) upr &lt;- numeric(n_mc_sims) # mc simulations for (i in 1:n_mc_sims) { y &lt;- rpois(15, lambda = 10) se_hat &lt;- sd(y)/sqrt(length(y)) lwr[i] &lt;- mean(y) - qt(.95, df = length(y) - 1)*se_hat upr[i] &lt;- mean(y) + qt(.95, df = length(y) - 1)*se_hat } # combine results into a data frame mc_sims &lt;- tibble(iteration = 1:n_mc_sims, lwr, upr) %&gt;% mutate(captured = lwr &lt; 10 &amp; upr &gt; 10) # compute the proportion of simulations that capture the parameter mean(mc_sims$captured) ## [1] 0.9006 With this criterion in mind, let’s consider three types of confidence intervals that we can use in the context of maximum likelihood estimation. 4.4.2.2 The Parametric Bootstrap We can evaluate the parametric bootstrap using a similar Monte Carlo approach. However, this can be confusing because we have two types of simulation happening. Monte Carlo simulation to evaluate the CI. We’re having our computer conduct the same “study” over and over to compute the long-run, frequentist properties of the CI. Parametric bootstrap to compute each CI. To compute each CI, we’re simulating many fake outcome variables \\(y^{bs}\\) from the fitted parametric distribution and refitting the model to obtain new estimates \\(\\hat{\\beta}^{bs}\\) that we then summarize to find a single CI. To start, let’s create the data-generating process or “probability model” or population. The data are Bernoulli and the model is logit. # model parameters n &lt;- 100 b0 &lt;- 0 b1 &lt;- 0.5 b2 &lt;- -0.5 # data x1 &lt;- rnorm(n, mean = 0, sd = 0.5) x2 &lt;- rbinom(n, size = 1, prob = 0.5) # probability of success; Pr(y | x) Xb &lt;- b0 + b1*x1 + b2*x2 p &lt;- plogis(Xb) Now let’s simulate just one “observed” data set and compute the confidence intervals for that data set using the parametric bootstrap. # simulate *one* sample and compute the 90% ci using parametric bs y_obs &lt;- rbinom(n, size = 1, prob = p) data &lt;- data.frame(y_obs, x1, x2) fit &lt;- glm(y_obs ~ x1 + x2, data = data, family = binomial) # parametric bs for coefficients n_bs &lt;- 2000 # should be 2000 or more coef_bs &lt;- matrix(nrow = n_bs, ncol = length(coef(fit))) names(coef_bs) &lt;- names(coef(fit)) for (i in 1:n_bs) { p_hat &lt;- predict(fit, type = &quot;response&quot;) y_bs &lt;- rbinom(length(p_hat), size = 1, prob = p_hat) fit_bs &lt;- update(fit, formula = y_bs ~ .) coef_bs[i, ] &lt;- coef(fit_bs) } # compute quantiles apply(coef_bs, 2, quantile, probs = c(0.05, 0.95)) ## [,1] [,2] [,3] ## 5% -0.6790475 0.9415808 -1.37164658 ## 95% 0.3439898 2.7477924 0.09866435 Now let’s simulate many “observed” data sets and compute the confidence intervals for each using the parametric bootstrap. # do a monte carlo simulation to compute the coverage for parametric bs # note: this is not *at all* optimized for speed n_mc_sims &lt;- 100 ci_list &lt;- list() for (i in 1:n_mc_sims) { # simulate the &quot;observed&quot; data for one &quot;study&quot; y_obs &lt;- rbinom(n, size = 1, prob = p) data &lt;- data.frame(y_obs, x1, x2) fit &lt;- glm(y_obs ~ x1 + x2, data = data, family = binomial) # parametric bs for coefficients n_bs &lt;- 2000 # should be 2000 or more coef_bs &lt;- matrix(nrow = n_bs, ncol = length(coef(fit))) colnames(coef_bs) &lt;- names(coef(fit)) for (j in 1:n_bs) { p_hat &lt;- predict(fit, type = &quot;response&quot;) y_bs &lt;- rbinom(length(p_hat), size = 1, prob = p_hat) fit_bs &lt;- update(fit, formula = y_bs ~ .) coef_bs[j, ] &lt;- coef(fit_bs) } # compute quantiles cis &lt;- apply(coef_bs, 2, quantile, probs = c(0.05, 0.95)) # put cis into data frame; these are the intervals for a single &quot;study&quot; ci_list[[i]] &lt;- tibble(coef_name = colnames(cis), true = c(b0, b1, b2), lwr = cis[&quot;5%&quot;, ], upr = cis[&quot;95%&quot;, ], bs_id = i) } # combine the intervals for the many &quot;studies&quot; in a single data frame ci_df &lt;- bind_rows(ci_list) # compute the coverage for each parameter ci_df %&gt;% mutate(captured = lwr &lt; true &amp; upr &gt; true) %&gt;% group_by(coef_name) %&gt;% summarize(coverage = mean(captured), se_hat = sd(captured)/sqrt(n())) ## # A tibble: 3 × 3 ## coef_name coverage se_hat ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 0.86 0.0349 ## 2 x1 0.88 0.0327 ## 3 x2 0.88 0.0327 Thus the parametric bootstrap works well, the coverage is about 90%. But notice that we know the parametric model here, because we created the “observed” data ourselves and matched the GDP exactly with the parametric bootstrap. "],["week-5-models-of-binary-outcomes-and-model-fit-summaries.html", "Chapter 5 Week 5: Models of Binary Outcomes and Model Fit Summaries", " Chapter 5 Week 5: Models of Binary Outcomes and Model Fit Summaries This week, we have two goals. Develop out measures of model fit beyond the predictive distribution, adding cross validation and information criteria to our tool kit. Modify the usual logit model in subtle and not-so-subtle ways to expand our options for modeling binary data "],["measures-of-model-fit.html", "5.1 Measures of Model Fit", " 5.1 Measures of Model Fit 5.1.1 Scoring Binary Predictions Suppose you have a binary outcome \\(y_i\\) for \\(i = \\{1, 2, ..., n\\}\\) and you develop a set of predictions for each outcome in the from of probabilities \\(p_i\\) for \\(i = \\{1, 2, ..., n\\}\\) and a competitor develops the set \\(q_i\\) for \\(i = \\{1, 2, ..., n\\}\\). Intuitively, if the \\(p_i\\)s are “closer” to the \\(y_i\\)s than the \\(q_i\\)s, then the \\(p_i\\)s are a better prediction. By extension, the model that produced the \\(p_i\\)s is a better model than the model that produced the \\(q_i\\)s. But we need a formal rule for defining what we mean by “closer.” There are two common scoring rules at the level of the individual predictions. Brier Score The Brier score is squared error of the prediction \\(p_i\\) and the outcome \\(y_i\\), so that \\(\\text{Brier Score_i} = (p_i -y_i)^2\\). This is analogous to linear regression, where we minimize the RMS of the residuals. Log Score The log score is the logarithm of the probabilities assigned to the event that occurred. This can be awkward to interpret, since better predictions produce less negative values. Therefore, it’s common to multiply log scores by \\(-1\\). In practice, we tend to we can compute this as \\(\\text{Log Score}_i = - [y_i \\log(p_i) + (1 - y_i) \\log (1 - p_i)]\\) To aggregate the scores across the observations, we can use a simple average for both the Brier and log scores. To see these scoring rules in action, let’s fit fit the familiar logit model to data from Krupnikov (2011). In this AJPS article, she argues that late campaign negativity targeted toward a liked candidate demobilizes voters while other forms of negativity do not. She concludes: …the substantive results reinforce the conclusion that it is late negativity that targets the individual’s preferred candidate that leads to significant changes in the likelihood of turnout. Increases in negativity about the preferred candidate decrease turnout likelihood by as much as 6 percentage points; even more importantly, the decrease in turnout is statistically significant. In contrast, the substantive effects of negativity about the other candidate, as well as overall negativity, are statistically indistinguishable from 0. In the model below (from her Model 3 in Table 4 on p. 807), she is specifically interested in comparing the effects of negaboutdislike and negaboutlike. She shows that the estimated coefficient for negaboutdislike is not statistically significant, while the estimated coefficient for negaboutlike is statistically significant. First, let’s reproduce her fitted model results. # load data krup_raw &lt;- haven::read_dta(&quot;data/krup.dta&quot;) # model formula (model 3, tab. 4, p. 807, krupnikov 2011) f &lt;- turnout ~ # negativity negaboutdislike + negaboutlike + # resources income + education + age + unemployed + # evaluation of parties and candidates PIDStrength + AffectPID + care + AffectPRES + # social involvement lnYears + Church + homeowners + working + # mobilization contacted + # interest, exposure, and efficacy external + internal + interest + media_index + # other demographics married + black + southern + hispanic + gender + # state conditions closeness + governors + primaries + # volume and year controls volume2 + dummy1988 + dummy2000 + dummy1992 + dummy1996 # drop rows with missing values from the data set krup &lt;- krup_raw %&gt;% get_all_vars(f, data = .) %&gt;% na.omit() fit &lt;- glm(f, data = krup, family = &quot;binomial&quot;) Now let’s compute the Brier scores for each observation and the aggregate to the data set by averaging. # obtain prediction p &lt;- predict(fit, type = &quot;response&quot;) # compute brier scores y &lt;- krup$turnout # create a vector to make code more readable brier_scores &lt;- (y - p)^2 # compute manually brier_scores_alt &lt;- scoring::brierscore(y ~ p) # compute with the scoring package # aggregate by averaging bs &lt;- mean(brier_scores) print(bs, digits = 2) ## [1] 0.089 Now let’s do the same for the log scores. # compute log scores log_scores &lt;- -(y*log(p) + (1 - y)*log(1 - p)) log_scores_alt &lt;- scoring::logscore(y ~ p) # aggregate by averaging ls &lt;- mean(log_scores) print(ls, digits = 2) ## [1] 0.3 It’s usually difficult to interpret or act upon the Brier and log scores for a single model. Instead, we typically use them to choose among a set of models. As an simple example, I removed the two late-negativity variables from the model (Krupnikov’s key explanatory variables) Important: When using the Brier and log scores, lower scores indicate a better fit. Model Name Avg. Log Score Avg. Brier Score Full Model 0.2984 0.0893 Remove Negativity About Disliked Candidates 0.2986 0.0893 Remove Negativity About Liked Candidates 0.2986 0.0893 Remove Both Negativity Variables 0.2986 0.0893 5.1.2 Cross-Validation But here’s the dirty little secret: you can always make your model better within your sample by making the model more complex. As a simple illustration, I added a quadruple interactions between both forms of negativity and education, income, and gender. turnout ~ negaboutdislike*education*income*gender + negaboutlike*education*income*gender + ... This model will better predictions than the baseline model. Model Name Avg. Log Score Avg. Brier Score Full Model 0.2983961 0.08928690 Adding Wild Interactions 0.2966916 0.08876646 Consider the two models fit trough the data below. A simple line (in green) fits the data quite nicely. However, a 10th-order polynomial (in orange) fits the observed data even better (in fact, it has no error at all!). set.seed(1234) n &lt;- 11 x &lt;- seq(-1, 1, length.out = n) y &lt;- rnorm(n) + x data &lt;- tibble(y, x) fit &lt;- lm(y ~ x, data = data) fit10 &lt;- lm(y ~ poly(x, 10), data = data) ggplot(data, aes(x, y)) + geom_smooth(method = lm, se = FALSE, color = &quot;#1b9e77&quot;) + geom_smooth(method = lm, se = FALSE, formula = y ~ poly(x, 10), n = 1001, color = &quot;#d95f02&quot;) + geom_point() ## `geom_smooth()` using formula = &#39;y ~ x&#39; But if we used the 10th-order polynomial for prediction, it would perform horribly. Why? Because it overfits the data. That is, it explains both the systematic and idiosyncratic features of the observed data. Suppose we need to make a prediction for \\(x = -0.95\\). The complex model generates a prediction of about -14. To avoid over-fitting the model, we can use two approaches. cross validation information criteria Let’s start with leave-one-out cross validation. For each observation \\(i\\) in the data set: Drop that observation \\(i\\). Fit the model using the remaining data. Predict the dropped observation. Compute the score for that observation. Because the observation being predicted is left-out and not in the data set used to fit the model, the model cannot “cheat” and fit the idiosyncratic variation in the left-out data point. In order to perform well, it must identify systematic variation in the other data points and use that information to predict the left-out observation. If your data set has \\(n\\) observations, then you must fit \\(n\\) models to perform leave-one-out cross validation. Let’s estimate the time-cost for Krupnikov’s model. # fit model and store time time &lt;- system.time( fit &lt;- glm(f, data = krup, family = &quot;binomial&quot;) ) # multiply elapsed time times number of observations round(time[&quot;elapsed&quot;]*nrow(krup)/(60), 1) # convert to minutes ## elapsed ## 7.6 Each model takes about 0.05 seconds to fit. This seems fast, but you need to do it about 6,000 times, which takes about 300 seconds or five minutes. # note system time start_time &lt;- Sys.time() # perform cross validation results_list &lt;- list() #for (i in 1:nrow(krup)) { for (i in 1:10) { if (i %% 100 == 0) print(i) # create training data and test data, to make code readable training &lt;- slice(krup, -i) test &lt;- slice(krup, i) # fit model fit_i &lt;- glm(f, data = training, family = &quot;binomial&quot;) # compute scores for test data (compute scores later) y_i &lt;- test$turnout p_i &lt;- predict(fit_i, newdata = test, type = &quot;response&quot;) # store results results_list[[i]] &lt;- tibble(case_id = i, y = y_i, p = p_i) } # note system time end_time &lt;- Sys.time() diff_time &lt;- difftime(end_time, start_time, units = &quot;mins&quot;) # combine results and compute scores results &lt;- bind_rows(results_list) %&gt;% mutate(log_score = -(y*log(p) + (1 - y)*log(1 - p)), brier_score = (y - p)^2) # average scores print(mean(results$log_score), 3) ## [1] 0.411 print(mean(results$brier_score), 3) ## [1] 0.13 This code took 0) minutes to run. This isn’t always practical, especially for large data sets. (It is embarrassingly parallel, though, so it’s possible to dramatically shrink this time using parallel computing.) For large data sets, rather than drop each observation individually, we can divide the data into \\(k\\) equally-sized (or as close to equal as possible) groups. The we repeat the same process but drop and predict each group rather than the individual data points. This is called \\(k\\)-fold cross validation. If \\(k = n\\), then we just have leave-one-out cross-validation. The code below uses \\(k = 10\\) and finds the average log and Brier scores for out-of-sample prediction using \\(k\\)-fold cross-validation for the scobit data. # cross validation groups k &lt;- 10 group &lt;- sample(rep(1:k, length.out = nrow(krup))) # perform cross validation results_list &lt;- list() for (i in 1:k) { # create training data and test data, to make code readable training &lt;- filter(krup, group != i) test &lt;- filter(krup, group == i) # fit model fit_i &lt;- glm(f, data = training, family = &quot;binomial&quot;) # compute scores for test data (compute scores later) y_i &lt;- test$turnout p_i &lt;- predict(fit_i, newdata = test, type = &quot;response&quot;) # store results results_list[[i]] &lt;- tibble(group = i, y = y_i, p = p_i) } # combine results and compute scores results &lt;- bind_rows(results_list) %&gt;% mutate(log_score = -(y*log(p) + (1 - y)*log(1 - p)), brier_score = (y - p)^2) # average scores print(mean(results$log_score), 3) ## [1] 0.303 print(mean(results$brier_score), 3) ## [1] 0.0908 This result took just a second or two. To illustrate how we can use \\(k\\)-fold cross-validation to evaluate models, I use \\(k\\)-fold cross validation to compute the average scores for all seven models (simpler and more complex) models discussed above. The results are really close and can depend on the random assignment to the \\(k\\) groups, so we want a large \\(k\\) (or use leave-one-out cross validation). For the results below, I use 100-fold cross-validation. Model Name Avg. Log Score Avg. Brier Score Adding Wild Interactions 0.2937 0.0855 Full Model 0.2901 0.0849 Remove Both Negativity Variables 0.2909 0.0851 Remove Negativity About Disliked Candidates 0.2905 0.0849 Remove Negativity About Liked Candidates 0.2909 0.0851 5.1.3 Information Criteria As an alternative to cross-validation, we can use information criteria for a similar purpose without needing to refit the model many times. Information criteria have the following general structure: \\[ -2 \\log L(\\hat{\\theta}) + [\\text{constant}\\times k ] \\] Here, \\(\\log L(\\hat{\\theta})\\) is the value achieved when we maximized the log-likelihood function (not the \\(\\hat{\\theta}\\), but the value of \\(\\log L\\) itself), \\(k\\) is the number of parameters, and \\(\\text{constant}\\) is a constant term that varies across information criteria. The two most common information criteria are: Akaike Information Criterion (AIC) \\(= -2 \\log L(\\hat{\\theta}) + [2 \\times k]\\) Bayesian Information Criterion (AIC) \\(= -2 \\log L(\\hat{\\theta}) + [\\log(n) \\times k]\\) The AIC and BIC have a deep and detailed theoretical development–the choice of constant is not at all arbitrary. It doesn’t seem helpful to reproduce the theory here, but instead mention a few practical points. The magnitude of the IC is generally not of interest. Instead, we focus on the difference in the IC between models. Both the the AIC and the BIC work to identify the “best” model, but in two difference senses: The AIC roughly compares the observed and predictive distributions are tries to identify the best match. The BIC roughly identifies the model with the highest posterior probability—the most likely model to have generated the data. Both AIC and BIC penalize adding parameters. That is, in order to improve the IC, a more complex model must improve the fit enough to offset the additional penalty. That said, the BIC imposes a larger penalty for \\(n \\geq 8\\). ADD SOME DISCUSSION ABOUT THE MAGNITUDE OF THE DIFFERENCE OF AIC AND BIC. ADD RAFTERY’s TABLE HERE. To compute the AIC and BIC, we have the easy-to-use AIC() and BIC() functions. We can use those to compare models with and without the negaboutlike variable, for example. The AIC slightly prefers including the variable, but the BIC prefers the model without Krupnikov’s key explanatory variable. # aic and bic for full model AIC(fit) ## [1] 3774.467 BIC(fit) ## [1] 3996.707 # compare models fit0 &lt;- update(fit, . ~ . -negaboutlike) fit1 &lt;- update(fit, . ~ . -negaboutdislike) fit2 &lt;- update(fit, . ~ . -negaboutdislike - negaboutlike) AIC(fit, fit0) ## df AIC ## fit 33 3774.467 ## fit0 32 3775.490 BIC(fit, fit0) ## df BIC ## fit 33 3996.707 ## fit0 32 3990.996 # compute model weights # note: in krupnikov&#39;s theory, fit1 should be best (fit includes unnecessary variable) AIC(fit, fit0, fit1, fit2) %&gt;% mutate(diff_min = AIC - min(AIC), akiaike_weights = exp(-0.5*diff_min)/sum(exp(-0.5*diff_min))) ## df AIC diff_min akiaike_weights ## fit 33 3774.467 0.8580177 0.2448183 ## fit0 32 3775.490 1.8814836 0.1467578 ## fit1 32 3774.571 0.9617180 0.2324479 ## fit2 31 3773.609 0.0000000 0.3759760 BIC(fit, fit0, fit1, fit2) %&gt;% mutate(diff_min = BIC - min(BIC), post_prob = exp(-0.5*diff_min)/sum(exp(-0.5*diff_min))) ## df BIC diff_min post_prob ## fit 33 3996.707 14.327138 0.0007477026 ## fit0 32 3990.996 8.616044 0.0129980202 ## fit1 32 3990.077 7.696278 0.0205874133 ## fit2 31 3982.380 0.000000 0.9656668640 "],["models-of-binary-outcomes.html", "5.2 Models of Binary Outcomes", " 5.2 Models of Binary Outcomes Here, I describe a diverse collection of models of binary outcomes. 5.2.1 Logit \\[ y_i \\sim \\text{Bernoulli}(\\pi_i), \\text{ where } \\pi_i = \\text{logit}^{-1}(X_i\\beta) \\text{ and } \\text{logit}^{-1}(x) = \\frac{e^x}{1 + e^x} \\] Quantity Description Distribution \\(y_i \\sim \\text{Bernoulli}(\\pi_i)\\) Inverse Link Function \\(\\pi_i = \\text{logit}^{-1}(X_i\\beta) = \\frac{e^{X_i\\beta}}{1 + e^{X_i\\beta}}\\) Fit Syntax glm(formula, data, family = binomial() Expected Value \\(\\hat{E}(\\tilde{y} \\mid X_s) = \\hat{\\pi}_s = \\text{logit}^{-1}(X_s\\hat{\\beta})\\) Manual Computation of EV pi_s = plogis(X_s %*% beta_hat) predict() Computation of EV pi_s = predict(fit, newdata = X_s, type = \"response\") Marginal Effect \\(\\frac{ \\partial \\hat{E}(\\tilde{y} \\mid X_s)}{\\partial x_j} = \\hat{\\beta}_j\\hat{\\pi}_s(1 - \\hat{\\pi}_s)\\) Computation of Marginal Effect coef(fit)*p_s*(1 - p_s) Note: the marginal effect above assumes that \\(x_j\\) is included in the model linearly with no polynomial or interactions. # load nagler&#39;s scobit data scobit &lt;- haven::read_dta(&quot;data/scobit.dta&quot;) %&gt;% filter(newvote != -1) # weird -1s in data; unsure if sufficient # simplest model specification; no polynomials or interactions f &lt;- newvote ~ neweduc + closing + age + south + gov # fit model fit &lt;- glm(f, data = scobit, family = binomial()) Now let’s compute quantities of interest. Let’s first compute the expected value or “predicted probability” as closing varies from zero to 50 with all other variables at their medians. # let education vary across all possible values; else median s &lt;- tibble( neweduc = 1:8, closing = median(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov) ) # expected value or &quot;predicted probability&quot; s$expected_value &lt;- predict(fit, newdata = s, type = &quot;response&quot;) # marginal effect of closing on expected value s$marginal_effect &lt;- coef(fit)[&quot;neweduc&quot;]*s$expected_value*(1-s$expected_value) Now let’s make a plot of the expected values and marginal effects. # plot gg1 &lt;- ggplot(s, aes(x = neweduc, y = expected_value)) + geom_line() + geom_point() + theme_bw() gg2 &lt;- ggplot(s, aes(x = neweduc, y = marginal_effect)) + geom_line() + geom_point() + theme_bw() # combine plots and print library(patchwork) gg1 + gg2 For this model, let’s briefly consider the other predictors in the model. In particular, let’s reproduce the figure above, but for every combination of the other covariates that appeared in the data set. (It turns out the every combination was overwhelming, so I used a sample of 100 other scenarios from the exhaustive list). You can see that as the other covariates change, the expected value changes. But more importantly, the maginal effect of education changes as the other covariates change. That’s why it’s critical to develop an appropriate scenario that specifies values for all the covariates in the model. Lastly, before we proceed to the next model, I’m going to save the expected values and marginal effects that I computed for the logit model to compare to the other models we discuss. s_logit &lt;- s # estimates of ev and me from logit model fit_logit &lt;- fit # logit model fit 5.2.2 Probit The probit model replaced the CDF of the standard logistic distribution with the CDF of the standard normal distribution. Rather than the “inverse logit” inverse link function, we use the CDF of the standard normal distrubtion. Quantity Description Distribution \\(y_i \\sim \\text{Bernoulli}(\\pi_i)\\) Inverse Link Function \\(\\pi_i = \\Phi(X_i\\beta)\\), where \\(\\Phi()\\) is the PDF of the standard normal distributio Fit Syntax glm(formula, data, family = binomial(link = \"probit\") Expected Value \\(\\hat{E}(\\tilde{y} \\mid X_s) = \\hat{\\pi}_s = \\Phi(X_s\\hat{\\beta})\\) Manual Computation of EV pi_s = pnorm(X_s %*% beta_hat) predict() Computation of EV pi_s = predict(fit, newdata = X_s, type = \"response\") Marginal Effect \\(\\frac{ \\partial \\hat{E}(\\tilde{y} \\mid X_s)}{\\partial x_j} = \\phi(X\\hat{\\beta}) \\hat{\\beta}_j\\), where \\(\\phi()\\) is the PDF of the standard normal distribution Computation of Marginal Effect dnorm(predict(fit, newdata = X_s, type = \"link\"))*coef(fit)[j] # fit model fit &lt;- glm(f, data = scobit, family = binomial(link = &quot;probit&quot;)) Now let’s compute quantities of interest. Let’s first compute the expected value or “predicted probability” as neweduc varies from 1 to 8 (all possible values) with all other variables at their medians. # let education vary across all possible values; else median s &lt;- tibble( neweduc = 1:8, closing = median(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov) ) # expected value or &quot;predicted probability&quot; s$expected_value &lt;- predict(fit, newdata = s, type = &quot;response&quot;) # marginal effect of closing on expected value s$linpred &lt;- predict(fit, newdata = s, type = &quot;link&quot;) s$marginal_effect &lt;- coef(fit)[&quot;neweduc&quot;]*dnorm(s$linpred) Now let’s make a plot of the expected values and marginal effects. The grey lines show the orginal logit estimates. AIC(fit, fit_logit) %&gt;% mutate(diff_min = min(AIC) - AIC, rel_lik = exp(diff_min/2)) ## df AIC diff_min rel_lik ## fit 6 113111.1 -182.1109 2.851781e-40 ## fit_logit 6 112929.0 0.0000 1.000000e+00 BIC(fit, fit_logit) ## df BIC ## fit 6 113168.2 ## fit_logit 6 112986.1 5.2.3 Cloglog Quantity Description Distribution \\(y_i \\sim \\text{Bernoulli}(\\pi_i)\\) distribution Inverse Link Function \\(\\pi_i = 1 - e^{-e^{X_i\\beta}}\\) Fit Syntax glm(formula, data, family = binomial(link = \"cloglog\") Expected Value \\(\\hat{E}(\\tilde{y} \\mid X_s) = \\hat{\\pi}_s = 1 - e^{-e^{X_s\\beta}}\\) Manual Computation of EV pi_s = 1 - exp(-exp(X_s %*% beta_hat)) predict() Computation of EV pi_s = predict(fit, newdata = X_s, type = \"response\") Marginal Effect \\(\\frac{ \\partial \\hat{E}(\\tilde{y} \\mid X_s)}{\\partial x_j} = e^{-e^{X\\hat{\\beta}}}e^{X\\hat{\\beta}}\\hat{\\beta}_j\\) Computation of Marginal Effect exp(-exp(linpred))*exp(linpred)*coef(fit)[j], where linpred &lt;- predict(fit, newdata = X_s, type = \"link\") # fit model fit &lt;- glm(f, data = scobit, family = binomial(link = &quot;cloglog&quot;)) Now let’s compute quantities of interest. Let’s first compute the expected value or “predicted probability” as neweduc varies from 1 to 8 (all possible values) with all other variables at their medians. # let education vary across all possible values; else median s &lt;- tibble( neweduc = 1:8, closing = median(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov) ) # expected value or &quot;predicted probability&quot; s$expected_value &lt;- predict(fit, newdata = s, type = &quot;response&quot;) # marginal effect of closing on expected value s$linpred &lt;- predict(fit, newdata = s, type = &quot;link&quot;) s$marginal_effect &lt;- exp(-exp(s$linpred))*exp(s$linpred)*coef(fit)[&quot;neweduc&quot;] Now let’s make a plot of the expected values and marginal effects. The grey lines show the orginial logit estimates. Importantly, the cloglog model is not symmetric (like logit and probit) around 0.5. AIC(fit, fit_logit) %&gt;% mutate(diff_min = AIC - min(AIC), akiaike_weights = exp(-0.5*diff_min)/sum(exp(-0.5*diff_min))) ## df AIC diff_min akiaike_weights ## fit 6 113664 734.9586 2.545478e-160 ## fit_logit 6 112929 0.0000 1.000000e+00 BIC(fit, fit_logit) %&gt;% mutate(diff_min = BIC - min(BIC), post_prob = exp(-0.5*diff_min)/sum(exp(-0.5*diff_min))) ## df BIC diff_min post_prob ## fit 6 113721.0 734.9586 2.545478e-160 ## fit_logit 6 112986.1 0.0000 1.000000e+00 5.2.4 Cauchit Like the probit uses the normal CDF as the inverse link function, the cauchit uses the Cauchy CDF. Why logit and probit are similar, there is a meaningful difference between the logit and cauchit. Because the Cauchy has heavier tails that the logistic and normal distributions, it behaves more linearly Quantity Description Distribution \\(y_i \\sim \\text{Bernoulli}(\\pi_i)\\) distribution Inverse Link Function \\(\\pi_i = \\frac{1}{\\pi}\\text{arctan} (X_i\\beta) + \\frac{1}{2} = F_{Cauchy}(X_i\\beta)\\). Fit Syntax glm(formula, data, family = binomial(link = \"cauchit\") Expected Value \\(\\hat{E}(\\tilde{y} \\mid X_s) = \\hat{\\pi}_s = \\frac{1}{\\pi}\\text{arctan} (X_s\\beta) + \\frac{1}{2}\\) Manual Computation of EV pi_s = (1/pi)*atan(X_s %*% beta_hat) + 0.5 (Make sure you haven’t redefined pi!) predict() Computation of EV pi_s = predict(fit, newdata = X_s, type = \"response\") Marginal Effect \\(\\frac{ \\partial \\hat{E}(\\tilde{y} \\mid X_s)}{\\partial x_j} = \\pi\\left[ 1 + (X_s\\hat{\\beta})^2 \\right] \\hat{\\beta}_j = f_{\\text{Cauchy}}(X_s\\hat{\\beta})\\hat{\\beta}_j\\) Computation of Marginal Effect dcauchy(linpred)*(coef(fit)[j], where linpred &lt;- predict(fit, newdata = X_s, type = \"link\") To illustrate the tail behavior of the logit and cauchit model, I simulated a data set using the true cauchit model, and fitted the logit and cauchit models. The logit curve smoothly transitions from flat to steep to flat again. The cauchit model seems to have three distinct sections a roughly linear portion below \\(\\pi = 0.15\\), another roughly linear portion between between 0.25 and 0.75, and another roughly linear portion above about 0.85. Between these roughly linear portions, the curve changes slope changes dramatically. # fit model fit &lt;- glm(f, data = scobit, family = binomial(link = &quot;cauchit&quot;)) Now let’s compute quantities of interest. Let’s first compute the expected value or “predicted probability” as neweduc varies from 1 to 8 (all possible values) with all other variables at their medians. # let education vary across all possible values; else median s &lt;- tibble( neweduc = 1:8, closing = median(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov) ) # expected value or &quot;predicted probability&quot; s$expected_value &lt;- predict(fit, newdata = s, type = &quot;response&quot;) # marginal effect of closing on expected value s$linpred &lt;- predict(fit, newdata = s, type = &quot;link&quot;) s$marginal_effect &lt;- dcauchy(s$linpred)*coef(fit)[&quot;neweduc&quot;] Now let’s make a plot of the expected values and marginal effects. The grey lines show the orginial logit estimates. AIC(fit, fit_logit) %&gt;% mutate(diff_min = AIC - min(AIC), akiaike_weights = exp(-0.5*diff_min)/sum(exp(-0.5*diff_min))) ## df AIC diff_min akiaike_weights ## fit 6 112650.1 0.0000 1.000000e+00 ## fit_logit 6 112929.0 278.9223 2.708833e-61 BIC(fit, fit_logit) %&gt;% mutate(diff_min = BIC - min(BIC), post_prob = exp(-0.5*diff_min)/sum(exp(-0.5*diff_min))) ## df BIC diff_min post_prob ## fit 6 112707.1 0.0000 1.000000e+00 ## fit_logit 6 112986.1 278.9223 2.708833e-61 5.2.5 Scobit Nagler (1994) argues that we should consider relaxing the assumption that the marginal effect \\(\\frac{ \\partial \\hat{E}(\\tilde{y} \\mid X_s)}{\\partial x_j}\\) is maximized at \\(\\hat{E}(\\tilde{y} \\mid X_s) = 0.5\\) and instead estimate a more general function that allows the point where the marginal effect is maximized to be estimated from the data. While the logit model uses the inverse link function \\(\\pi_i = \\frac{1}{ 1 + e^{-X_i\\beta}}\\), the scobit model uses the inverse link function \\(\\pi_i = \\frac{1}{\\left[ 1 + e^{-X_i\\beta}\\right]^\\alpha}\\). You can read more about Nagler’s Scobit model in is 1994 AJPS article. Quantity Description Distribution \\(y_i \\sim \\text{Bernoulli}(\\pi_i)\\) distribution Inverse Link Function \\(\\pi_i = \\frac{1}{\\left[ 1 + e^{-X_i\\beta}\\right]^\\alpha}\\) Fit Syntax None. I do not recommend ML. This model is difficult, so I recommend MCMC and weakly informative priors. Expected Value \\(\\hat{E}(\\tilde{y} \\mid X_s) = \\frac{1}{\\left[ 1 + e^{-X_s\\hat{\\beta}} \\right]^\\hat{\\alpha}}\\) Manual Computation of EV pi_s = 1/((1 + exp(-X_s %*% beta_hat))^alpha_hat) predict() Computation of EV None; use generated quantities block in Stan or manual post-processing of posterior simulations. Marginal Effect \\(\\frac{ \\partial \\hat{E}(\\tilde{y} \\mid X_s)}{\\partial x_j} = \\hat{\\alpha} [1 + e^{-X\\hat{\\beta}}][e^{-X\\hat{\\beta}}]\\hat{\\beta}_j\\) Computation of Marginal Effect Use generated quantities block in Stan or manual post-processing of posterior simulations. These models are notoriously difficult to estimate. Fortunately, we’ve got very good MCMC algorithms to deal with difficult likelihoods. If you must fit this model, you should fit it with Stan and be extra careful. I’ve tried fitting this lots of different ways and not had much success. I suggest using Stan’s sampling algorithm (or perhaps its optimization routine) and using a fairly strong prior around \\(\\alpha\\) to keep it near 1. data { int&lt;lower=0&gt; N; // number of data items int&lt;lower=0&gt; K; // number of predictors matrix[N, K] X; // predictor matrix int y[N]; // outcome vector } parameters { vector[K] beta; // coefficients for X real&lt;lower=0&gt; alpha; // nagler&#39;s shape parameter } transformed parameters { vector[N] pi; vector[N] linpred; for (i in 1:N) { linpred[i] = X[i, ]*beta; pi[i] = 1/pow((1 + exp(-(X[i, ]*beta))), alpha); } } model { alpha ~ gamma(6, 5); // alpha is &quot;near&quot; one; mode of gamma is (a - 1)/b; sd is sqrt(a)/b //beta ~ cauchy(0, 10); // weakly informative prior to rule out very large and small values y ~ bernoulli(pi); // likelihood } # obtain the model matrix X set.seed(1234) scobit_small = sample_n(scobit, 1000) # small sample to save time mf &lt;- model.frame(f, data = scobit_small) # model frame X &lt;- model.matrix(f, mf) # model matrix X # obtain the outcome variable y y &lt;- model.response(mf) # fit stan model stan_data &lt;- list(y = y, X = X, N = nrow(X), K = ncol(X)) stan_opt &lt;- rstan::optimizing(scobit_model, data = stan_data, algorithm = &quot;Newton&quot;) stan_samp &lt;- rstan::sampling(scobit_model, data = stan_data, pars = c(&quot;beta&quot;, &quot;alpha&quot;), cores = 3, chains = 3, iter = 2000) # ML results from stan optimization of scobit print(stan_opt$par[1:7]) ## beta[1] beta[2] beta[3] beta[4] beta[5] beta[6] alpha ## 0 0 0 0 0 0 1 # ML results from glm() logit coef(glm(f, data = scobit_small, family = binomial)) ## (Intercept) neweduc closing age south gov ## -4.04393179 0.62708977 -0.02039651 0.04715321 -0.27764434 0.01848814 # summary of stan mcmc samples print(stan_samp) ## Inference for Stan model: 2ea053ffa7101a65d510af4b2cb5978b. ## 3 chains, each with iter=2000; warmup=1000; thin=1; ## post-warmup draws per chain=1000, total post-warmup draws=3000. ## ## mean se_mean sd 2.5% 25% 50% 75% 97.5% n_eff Rhat ## beta[1] -3.74 0.04 0.98 -5.98 -4.31 -3.61 -3.06 -2.17 619 1 ## beta[2] 0.62 0.00 0.08 0.48 0.56 0.61 0.66 0.80 745 1 ## beta[3] -0.02 0.00 0.01 -0.04 -0.03 -0.02 -0.02 -0.01 2219 1 ## beta[4] 0.05 0.00 0.01 0.04 0.04 0.05 0.05 0.06 910 1 ## beta[5] -0.27 0.00 0.18 -0.62 -0.38 -0.26 -0.15 0.08 1836 1 ## beta[6] 0.02 0.00 0.20 -0.38 -0.12 0.02 0.16 0.41 2150 1 ## alpha 1.30 0.02 0.48 0.56 0.95 1.24 1.58 2.40 942 1 ## lp__ -561.24 0.07 2.09 -566.24 -562.31 -560.91 -559.75 -558.31 813 1 ## ## Samples were drawn using NUTS(diag_e) at Wed Sep 21 12:11:50 2022. ## For each parameter, n_eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor on split chains (at ## convergence, Rhat=1). We will leave the analysis of this model to later in the semester when we have more experience with Stan. 5.2.6 Heteroskedastic Probit We can develop the probit model using a “latent variable” or “latent utility” approach. Suppose an unobserved (or “latent”) outcome variable \\(y^*\\), so that \\(y^*_i \\sim N(\\mu_i, \\sigma = 1)\\), where \\(\\mu_i = X_i\\beta\\). Then suppose that if \\(y^*_i \\geq 0\\), we observe \\(y_i = 1\\). If \\(y^*_i &lt; 0\\), we observe \\(y_i = 0\\). A little simulation might help. n &lt;- 500 x &lt;- runif(n, -1, 1) b0 &lt;- 0 b1 &lt;- 1.5 mu &lt;- b0 + b1*x y_star &lt;- rnorm(n, mu, 1) y &lt;- ifelse(y_star &gt;= 0, 1, 0) data &lt;- tibble(x, y_star, y) ggplot(data, aes(x = x, y = y_star, color = factor(y))) + geom_hline(yintercept = 0, color = &quot;grey50&quot;) + geom_abline(slope = b1, intercept = b0, color = &quot;black&quot;) + geom_point() An implication of this framework is that \\(\\Pr(y_i = 1 \\mid X_i) = \\Pr(y^*_i \\geq 1 \\mid X_i) = \\Phi(X_i\\beta)\\), which gives us exactly the probit model. Long (1997) develops this further in Section 3.2. But we can use this framework to generalize the usual probit model into a heteroskedastic probit model. Rather than fix the error of the latent erors to \\(\\sigma = 1\\), we could allow them to vary with a set of explanatory variables so that \\(\\sigma = e^{Z\\gamma}\\). (We use \\(X\\beta\\) for the linear predictor that belongs to the mean and \\(Z\\gamma\\) for the linear predictor that belongs to \\(\\sigma\\).) The \\(Z\\) variables have an interesting relationship to \\(\\Pr(y_i = 1 \\mid X_i)\\). If a variable drives the linear predictor \\(Z\\gamma\\) (and therefore the error variance \\(\\sigma^2\\)) higher, it pushes \\(\\Pr(y_i = 1 \\mid X_i)\\) toward 0.5. That is, if the probability of an event is near one, increasing the latent variance decreases the chance of an event. But if the probability of an event is near zero, increasing the latent variance increases the chance of an event. Taken to an extreme, this can produce a non-monotic effect of a variable included linearly in both sets of explanatory variables. n &lt;- 500 x &lt;- runif(n, -1, 1) b0 &lt;- 0 b1 &lt;- 2 mu &lt;- b0 + b1*x g0 &lt;- 0 g1 &lt;- 2 sigma &lt;- exp(g0 + g1*x) y_star &lt;- rnorm(n, mu, sigma) y &lt;- ifelse(y_star &gt;= 0, 1, 0) data &lt;- tibble(x, y_star, y) gg1 &lt;- ggplot(data, aes(x = x, y = y_star, color = factor(y))) + geom_hline(yintercept = 0, color = &quot;grey50&quot;) + geom_abline(slope = b1, intercept = b0, color = &quot;black&quot;) + geom_point() pr &lt;- tibble(x = seq(-1, 1, by = 0.01)) %&gt;% mutate(pr = 1 - pnorm(0, mean = b0 + b1*x, sd = exp(g0 + g1*x))) gg2 &lt;- ggplot(pr, aes(x = x, y = pr)) + geom_line() gg1 + gg2 Quantity Description Distribution \\(y_i \\sim \\text{Bernoulli}(\\pi_i)\\) distribution Inverse Link Function \\(\\pi_i = \\Phi \\left( \\frac{X\\beta}{e^{Z\\gamma}}\\right)\\) Fit Syntax glmx::hetglm(formula, data, family = binomial() (probit link is default) Expected Value \\(\\hat{E}(\\tilde{y} \\mid X_s) = \\Phi \\left( \\frac{X_s\\hat{\\beta}}{e^{Z_s\\hat{\\gamma}}}\\right)\\) Manual Computation of EV pi_s = pnorm(X_s %*% beta_hat/exp(Z_s %*% gamma_hat)) predict() Computation of EV pi_s &lt;- predict(fit, newdata = s, type = \"response\") Marginal Effect \\(\\frac{ \\partial \\hat{E}(\\tilde{y} \\mid X_s)}{\\partial x_j} = \\phi \\left( \\frac{X_s\\hat{\\beta}}{e^{Z_s\\hat{\\gamma}}}\\right) \\left[ \\frac{\\hat{\\beta}_j - (X_s\\hat{\\beta})\\hat{\\gamma}_j}{e^{Z_s\\hat{\\gamma}}}\\right]\\) This assumes that \\(x_j\\) appears in both \\(X\\) and \\(Z\\). If not, then \\(\\hat{\\beta}_j\\) or \\(\\hat{\\gamma}_j\\) is zero and then the marginal effect simplifies. Computation of Marginal Effect See below; it’s a couple of lines and somewhat unexpected. # load packages library(glmx) # fit model fit &lt;- hetglm(newvote ~ neweduc + closing + age + south + gov | neweduc + closing + age + south + gov, data = scobit, family = binomial(link = &quot;probit&quot;)) Now let’s compute quantities of interest. Let’s first compute the expected value or “predicted probability” as neweduc varies from 1 to 8 (all possible values) with all other variables at their medians. # let education vary across all possible values; else median s &lt;- tibble( neweduc = 1:8, closing = median(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov) ) # expected value or &quot;predicted probability&quot; s$expected_value &lt;- predict(fit, newdata = s, type = &quot;response&quot;) # marginal effect of closing on expected value, analytically s$expZg &lt;- predict(fit, newdata = s, type = &quot;scale&quot;) s$Xb_over_expZg &lt;- predict(fit, newdata = s, type = &quot;link&quot;) # &lt;- UNEXPECTED BEHAVIOR (FOR ME) s$Xb &lt;- s$Xb_over_expZg*s$expZg s$marginal_effect &lt;- dnorm(s$Xb/s$expZg)*((coef(fit)[&quot;neweduc&quot;] - s$Xb*coef(fit)[&quot;(scale)_neweduc&quot;])/s$expZg) # marginal effect of closing on expected value, *numerically* delta &lt;- 0.00001 s_prime &lt;- s %&gt;% mutate(neweduc = neweduc + delta) s_prime$expected_value &lt;- predict(fit, newdata = s_prime, type = &quot;response&quot;) s$marginal_effect &lt;- (s_prime$expected_value - s$expected_value)/delta Now let’s make a plot of the expected values and marginal effects. The grey lines show the original logit estimates. AIC(fit, fit_logit) %&gt;% mutate(diff_min = AIC - min(AIC), akiaike_weights = exp(-0.5*diff_min)/sum(exp(-0.5*diff_min))) ## df AIC diff_min akiaike_weights ## fit 11 111876 0.000 1.000000e+00 ## fit_logit 6 112929 1053.012 2.194214e-229 BIC(fit, fit_logit) %&gt;% mutate(diff_min = BIC - min(BIC), post_prob = exp(-0.5*diff_min)/sum(exp(-0.5*diff_min))) ## df BIC diff_min post_prob ## fit 11 111980.6 0.000 1.000000e+00 ## fit_logit 6 112986.1 1005.464 4.637491e-219 Lastly, here’s a replication of Alvarez and Brehm’s classic example modeling ambivalence within abortion attitudes. col_names &lt;- c(&quot;abhlth&quot;, &quot;abpoor&quot;, &quot;absingle&quot;, &quot;abnomore&quot;, &quot;abdefect&quot;, &quot;abany&quot;, &quot;abrape&quot;, &quot;sexlty&quot;, &quot;relgty&quot;, &quot;sprolfe&quot;, &quot;sprochce&quot;, &quot;abstrgth&quot;, &quot;abimp&quot;, &quot;abinfo&quot;, &quot;abfirm&quot;, &quot;abcare&quot;, &quot;abproct&quot;, &quot;abconct&quot;, &quot;choice&quot;, &quot;mhealth&quot;, &quot;chealth&quot;, &quot;prolife&quot;, &quot;fechld&quot;, &quot;fefam&quot;, &quot;fehelp&quot;, &quot;fepresch&quot;, &quot;pill&quot;, &quot;teenpill&quot;, &quot;pillok&quot;, &quot;sexeduc&quot;, &quot;divlaw&quot;, &quot;premarsx&quot;, &quot;teensex&quot;, &quot;xmarsex&quot;, &quot;homosex&quot;, &quot;black&quot;, &quot;male&quot;, &quot;prot&quot;, &quot;cath&quot;, &quot;jew&quot;, &quot;reliten&quot;, &quot;attend&quot;, &quot;prayer&quot;, &quot;eraread&quot;, &quot;erameans&quot;, &quot;era&quot;, &quot;eratell&quot;) ab &lt;- read.fwf(&quot;data/ABGSS.DAT&quot;, widths = list(rep(15, 17), rep(15, 17), rep(15, 13)), col.names = col_names) %&gt;% mutate(across(.cols = everything(), ~ na_if(., 99999))) fit_probit &lt;- glm(abhlth ~ black + male + cath + reliten + attend + erameans + era, data = ab, family = binomial(link = &quot;probit&quot;)) library(glmx) fit_hetprobit &lt;- hetglm(abhlth ~ black + male + cath + reliten + attend + erameans + era | abproct*abconct + abimp + abinfo + abfirm, data = ab, family = binomial(link = &quot;probit&quot;)) And here’s a bit of code to use Stan to simulate from the posterior. data { int&lt;lower=0&gt; N; // number of data items in X and Z int&lt;lower=0&gt; K_x; // number of predictors in X int&lt;lower=0&gt; K_z; // number of predictors in Z matrix[N, K_x] X; // predictor matrix Z matrix[N, K_z] Z; // predictor matrix Z int y[N]; // outcome vector } parameters { vector[K_x] beta; // coefficients for X vector[K_z] gamma; // coefficients for Z } transformed parameters { vector[N] pi; vector[N] Xbeta; vector[N] Zgamma; for (i in 1:N) { Xbeta[i] = X[i, ]*beta; Zgamma[i] = Z[i, ]*gamma; pi[i] = Phi(Xbeta[i]/exp(Zgamma[i])); } } model { y ~ bernoulli(pi); // likelihood } # listwise delete missing values from all variables of interest ab_stan &lt;- ab %&gt;% select(abhlth, black, male, cath, reliten, attend, erameans, era, abproct, abconct, abimp, abinfo, abfirm) %&gt;% na.omit() # create X fx &lt;- abhlth ~ black + male + cath + reliten + attend + erameans + era mfx &lt;- model.frame(fx, data = ab_stan) # model frame X &lt;- model.matrix(fx, mfx) # model matrix X # obtain the outcome variable y y &lt;- model.response(mfx) # create Z fz &lt;- ~ abproct*abconct + abimp + abinfo + abfirm - 1 mfz &lt;- model.frame(fz, data = ab_stan) # model frame Z &lt;- model.matrix(fz, mfz) # model matrix X # fit stan model library(rstan); options(mc.cores = parallel::detectCores()) stan_data &lt;- list(y = y, X = X, Z = Z, N = nrow(X), K_x = ncol(X), K_z = ncol(Z)) # stan_opt &lt;- optimizing(hetprob_model, data = stan_data) # keeps crashing stan_samp &lt;- rstan::sampling(hetprob_model, data = stan_data, pars = c(&quot;beta&quot;, &quot;gamma&quot;), cores = 3, chains = 3, iter = 2000) "],["week-6-an-explosion-of-quantities-of-interest.html", "Chapter 6 Week 6: An Explosion of Quantities of Interest", " Chapter 6 Week 6: An Explosion of Quantities of Interest This week, more than others, we will focus on several specific papers that are important to the practice of political methodology. They are: King, Tomz, and Wittenberg (2001) on “informal posterior simulation” Brambor, Clark, and Golder (2006) on “marginal effect plots” Berry, Golder, and Milton (2012) on the hypotheses that one can/might derive from an interactive theory. Berry, DeMeritt, and Esarey (2010) on interaction in logit and probit models, along with Rainey’s (2016) critique. Hanmer and Kalkan (2013) on the “average case” and “observed value” approaches. "],["king-tomz-and-wittenberg-2001.html", "6.1 King, Tomz, and Wittenberg (2001)", " 6.1 King, Tomz, and Wittenberg (2001) King, Tomz, and Wittenberg (2001, KTW) suggest an alternative to the [non]parametric bootstrap (or delta method) to obtain confidence intervals for quantities of interest. I see their approach as simulation from an approximate posterior distribution. However, we might think of it as a faster version of the [non]parametric bootstrap. Suppose that we have ML estimates \\(\\hat{\\beta}\\) and estimated covariance matrix \\(\\widehat{\\text{Var}}(\\hat{\\beta})\\). Then we can approximate the [non]parametric bootstrap replications \\(\\hat{\\beta}^{bs}\\) or the posterior simulations \\(\\tilde{\\beta}\\) by sampling from \\(\\tilde{\\beta}^{KTW} \\sim MVN(\\hat{\\beta}, \\widehat{\\text{Var}}(\\hat{\\beta}))\\), where \\(MVN\\) is the multivariate normal distribution. We can then transform each simulation of \\(\\tilde{\\beta}^{KTW}_i\\) into the quantity of interest \\(\\tilde{\\tau}^{KTW}_i = \\tau \\left( \\tilde{\\beta}^{KTW}_i \\right)\\) and compute a confidence interval using using the percentiles (the same way we would for the bootstrap replicates or posterior simulations of the quantity of interest). In practice, while we can understand KTW’s methods as a Bayesian method, we refer to the resulting intervals as “confidence intervals.” # load data scobit &lt;- haven::read_dta(&quot;data/scobit.dta&quot;) %&gt;% filter(newvote != -1) # fit model f &lt;- newvote ~ poly(neweduc, 2, raw = TRUE) + closing + poly(age, 2, raw = TRUE) + south + gov fit &lt;- glm(f, data = scobit, family = binomial) # simulate beta_tildes using KTW&#39;s method beta_tilde &lt;- mvtnorm::rmvnorm(2000, mean = coef(fit), sigma = vcov(fit)) # print first few rows head(beta_tilde) ## (Intercept) poly(neweduc, 2, raw = TRUE)1 poly(neweduc, 2, raw = TRUE)2 ## [1,] -4.016289 0.2016001 0.03275628 ## [2,] -4.184576 0.2821922 0.02380006 ## [3,] -4.074789 0.2246211 0.03001892 ## [4,] -4.112547 0.2467200 0.02876137 ## [5,] -4.067749 0.2195911 0.03115172 ## [6,] -3.968551 0.2339342 0.02824499 ## closing poly(age, 2, raw = TRUE)1 poly(age, 2, raw = TRUE)2 south ## [1,] -0.01274338 0.1143925 -0.0008225287 -0.2202267 ## [2,] -0.01386391 0.1165889 -0.0008484358 -0.1982116 ## [3,] -0.01312896 0.1161354 -0.0008398087 -0.1942506 ## [4,] -0.01330758 0.1134811 -0.0008103919 -0.1850737 ## [5,] -0.01357771 0.1165762 -0.0008417297 -0.2184424 ## [6,] -0.01400237 0.1140690 -0.0008290698 -0.2039914 ## gov ## [1,] -0.006397118 ## [2,] 0.009583674 ## [3,] 0.027583637 ## [4,] 0.013763097 ## [5,] -0.005852715 ## [6,] -0.029716690 Now we “simply” need to compute the quantity of interest for the scenario(s) of interest. Let’s use two examples, first, let’s compute the predicted probability as closing varies from its minimum to its maximum. This will be a bit trickier than using predict() because we need to do the matrix multiplication manually. You should work through this code carefully. It’s subtle, but critical. # create scenario of interest scenario &lt;- tibble( neweduc = median(scobit$neweduc), closing = min(scobit$closing):max(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) # convert scenario data frame to matrix X_s f_scenario &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_scenario, scenario) X_s &lt;- model.matrix(mf, scenario) # transform simulations of beta into eta and pi eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor pi_tilde &lt;- plogis(eta_tilde) # simulations of expected value or, in this case, &quot;predicted probability&quot; # compute 90% ci with percentiles pi_ci &lt;- apply(pi_tilde, 1, quantile, probs = c(0.05, 0.95)) # compute ML estimates # note: we could use predict(), but I do the matrix computations # another note: I don&#39;t recommend using the mean of the *_tildes eta_hat &lt;- X_s%*%coef(fit) pi_hat &lt;- plogis(eta_hat) # add all of this back into scenario scenario$pi_hat &lt;- pi_hat scenario$pi_lwr &lt;- pi_ci[1, ] scenario$pi_upr &lt;- pi_ci[2, ] # plot the results ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) + geom_ribbon(fill = &quot;grey50&quot;) + geom_line() Now let’s use KTW’s method to obtain a 90% CI around the first-difference as closing in increases from its 25th to its 75th percentile. # create scenarios of interest scenario_lo &lt;- tibble( neweduc = median(scobit$neweduc), closing = quantile(scobit$closing, probs = 0.0), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) scenario_hi &lt;- tibble( neweduc = median(scobit$neweduc), closing = quantile(scobit$closing, probs = 1.0), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) # convert scenario data frame to matrix X_s f_scenario &lt;- update(f, NULL ~ .) # remove lhs for use below mf_lo &lt;- model.frame(f_scenario, scenario_lo) X_lo &lt;- model.matrix(mf, scenario_lo) mf_hi &lt;- model.frame(f_scenario, scenario_hi) X_hi &lt;- model.matrix(mf, scenario_hi) # transform simulations of beta into eta, pi, and fd eta_lo_tilde &lt;- X_lo%*%t(beta_tilde) # simulations of linear predictor eta_hi_tilde &lt;- X_hi%*%t(beta_tilde) pi_lo_tilde &lt;- plogis(eta_lo_tilde) # simulations of expected value or, in this case, &quot;predicted probability&quot; pi_hi_tilde &lt;- plogis(eta_hi_tilde) fd_tilde &lt;- as.numeric(pi_hi_tilde - pi_lo_tilde) # simulations of first-difference; as.numeric() needed b/c it&#39;s a matrix and I to simplify it to a vector # compute 90% ci with percentiles fd_ci &lt;- quantile(fd_tilde, probs = c(0.05, 0.95)) # compute ML estimates # note: we could use predict(), but I do the matrix computations; predict() will be more reliable # another note: I don&#39;t recommend using the mean of the *_tildes eta_lo_hat &lt;- X_lo%*%coef(fit) eta_hi_hat &lt;- X_hi%*%coef(fit) pi_lo_hat &lt;- plogis(eta_lo_hat) pi_hi_hat &lt;- plogis(eta_hi_hat) fd_hat &lt;- pi_hi_hat - pi_lo_hat # print the results print(fd_hat, digits = 2) ## [,1] ## 1 -0.14 print(fd_ci, digits = 4) ## 5% 95% ## -0.1554 -0.1284 # plot the results ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) + geom_ribbon(fill = &quot;grey50&quot;) + geom_line() And lastly, for the marginal effect of closing as closing varies from its minimum to it’s maximum. # create scenario of interest scenario &lt;- tibble( neweduc = median(scobit$neweduc), closing = min(scobit$closing):max(scobit$closing), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) # convert scenario data frame to matrix X_s f_scenario &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_scenario, scenario) X_s &lt;- model.matrix(mf, scenario) # transform simulations of beta into eta, pi, and me eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor pi_tilde &lt;- plogis(eta_tilde) # simulations of expected value or, in this case, &quot;predicted probability&quot; me_tilde &lt;- beta_tilde[, &quot;closing&quot;]*pi_tilde*(1 - pi_tilde) # compute 90% ci with percentiles me_ci &lt;- apply(me_tilde, 1, quantile, probs = c(0.05, 0.95)) # compute ML estimates # note: we could use predict(), but I do the matrix computations # another note: I don&#39;t recommend using the mean of the *_tildes eta_hat &lt;- X_s%*%coef(fit) pi_hat &lt;- plogis(eta_hat) me_hat &lt;- coef(fit)[&quot;closing&quot;]*pi_hat*(1 - pi_hat) # add all of this back into scenario scenario$me_hat &lt;- me_hat scenario$me_lwr &lt;- me_ci[1, ] scenario$me_upr &lt;- me_ci[2, ] # plot the results ggplot(scenario, aes(x = closing, y = me_hat, ymin = me_lwr, ymax = me_upr)) + geom_ribbon(fill = &quot;grey50&quot;) + geom_line() "],["brambor-clark-and-golder-2006.html", "6.2 Brambor, Clark, and Golder (2006)", " 6.2 Brambor, Clark, and Golder (2006) Brambor, Clark, and Golder (2006, BCG) suggest the use of “marginal effects plots” to understand marginal effects in multiplicative interaction models. In the case of a linear model, we can write the expected value of the outcome \\(y\\) for a particular scenario \\(X_s\\) as \\[ E(y \\mid X_s) = \\beta_0 + \\beta_x x_s + \\beta_z z_s + \\beta_{xz} x_s z_s + \\text{possibly other terms}. \\] By taking the first derivative wrt to \\(x_s\\), we can see that the marginal effect of \\(x_s\\) depend on the value of \\(z_s\\). \\[ \\frac{\\partial E(y \\mid X_s)}{\\partial x_s} = \\beta_x + \\beta_{xz} z_s. \\] Importantly, we can compute the standard error (and then the Wald CI) for this marginal effect \\[ \\widehat{\\text{SE}} \\left( \\frac{\\partial E(y \\mid X_s)}{\\partial x_s} \\right) = \\sqrt{\\widehat{\\text{Var}}(\\hat{\\beta_x}) + z_s^2\\widehat{\\text{Var}}(\\hat{\\beta_{xz}}) + 2z_s\\widehat{\\text{Cov}}(\\hat{\\beta_{x}}, \\hat{\\beta_{xz}})}, \\] where the variance and covariance terms refer to the respective elements from the covariance matrix (i.e., vcov()). As an example, let’s reproduce Figure 1 on p. 701 of Clark and Golder (2006). They use a slightly different approach to compute estimate their standard errors, so my standard errors are somewhat smaller. # load data cg &lt;- read_csv(&quot;data/parties.csv&quot;) %&gt;% filter(established_democracy == 1) # keep only established democracies # fit model; reproduces coefficients reported in Table 2, p. 698, 1946-2000 Established Democracys of Clark and Golder (2006) fit &lt;- lm(enep ~ eneg*log(average_magnitude) + eneg*upper_tier + en_pres*proximity, data = cg) # extract estimates beta_hat &lt;- coef(fit) sigma_hat &lt;- vcov(fit) # compute marginal effects and ses z &lt;- seq(min(log(cg$average_magnitude)), max(log(cg$average_magnitude)), length.out = 100) me &lt;- beta_hat[&quot;eneg&quot;] + beta_hat[&quot;eneg:log(average_magnitude)&quot;]*z se &lt;- sqrt(sigma_hat[&quot;eneg&quot;, &quot;eneg&quot;] + (z^2)*sigma_hat[&quot;eneg:log(average_magnitude)&quot;, &quot;eneg:log(average_magnitude)&quot;] + 2*z*sigma_hat[&quot;eneg&quot;, &quot;eneg:log(average_magnitude)&quot;]) # put into tibble and plot gg_data &lt;- tibble(log_average_magnitude = z, marginal_effect = me, se = se) ggplot(gg_data, aes(x = log_average_magnitude, y = marginal_effect, ymin = marginal_effect - 1.64*se, ymax = marginal_effect + 1.64*se)) + geom_hline(yintercept = 0) + geom_ribbon(fill = &quot;grey50&quot;) + geom_line() + labs(caption = &quot;Reproduction of Figure 1 on p. 701 of Clark and Golder (2006) with (vanilla) Wald CI&quot;) To reproduce their “cluster robust” standard errors from Stata, we could do the following, which reproduces the top panel (a) of Figure 1 on p. 701. The code below only changes the calculation for sigma_hat. # calculate cluster-robust standard errors Stata-style M &lt;- length(unique(cg$country)) N &lt;- length(cg$country) K &lt;- fit$rank dfc &lt;- (M/(M - 1)) * ((N - 1)/(N - K)) uj &lt;- apply(sandwich::estfun(fit), 2, function(x) tapply(x, cg$country, sum)); uj &lt;- na.omit(uj) sigma_hat &lt;- dfc * sandwich::sandwich(fit, meat = crossprod(uj)/N) # re-compute the standard errors of the marginal effect se &lt;- sqrt(sigma_hat[&quot;eneg&quot;, &quot;eneg&quot;] + (z^2)*sigma_hat[&quot;eneg:log(average_magnitude)&quot;, &quot;eneg:log(average_magnitude)&quot;] + 2*z*sigma_hat[&quot;eneg&quot;, &quot;eneg:log(average_magnitude)&quot;]) # put into tibble and plot gg_data &lt;- tibble(log_average_magnitude = z, marginal_effect = me, se = se) ggplot(gg_data, aes(x = log_average_magnitude, y = marginal_effect, ymin = marginal_effect - 1.64*se, ymax = marginal_effect + 1.64*se)) + geom_hline(yintercept = 0) + geom_ribbon(fill = &quot;grey50&quot;) + geom_line() + labs(caption = &quot;Reproduction of Figure 1 on p. 701 of Clark and Golder (2006) with Stata-style robust-cluster 90% CI&quot;) 6.2.1 A Warning about Misinterpreting Marginal Effect Plots In their Table 2 (final column; 1946-2000, Established Democracies), the coefficient for the product term \\(\\text{ENEG} \\times \\log(\\text{Avg. Magnitude})\\) is not statistically significant. Regardless of the look of the marginal effect plot, one cannot confidently conclude that the effect of \\(X\\) varies with \\(Z\\) if the coefficient for the product term is not statistically significant. In the marginal effect plot above, the estimated marginal effect of ENEG is (relatively) small and not statistically significant when the average magnitude is low, but the estimated effect is (relatively larger) and statistically significant when the average magnitude is large. When this happens, you will (not might, will) be tempted to conclude that the effect of \\(X\\) changes with \\(Z\\). However, that is wrong. You must remember that the difference between an estimate that is statistically significant (e.g., the RHS of the figure above) and another estimate that is not statistically significant (e.g., the LHS of the figure above) is not necessary statistically significant. (Read that last sentence again; it’s subtle but critical.) To illustrate the temptation, here’s what Clark and Golder write about the marginal effect plot on p. 700. On the other hand, the coefficient on \\(\\text{Ethic} \\times \\ln(\\text{Magnitude})\\) is positive and significant in only half of the models. However, it is important to remember that we are not primarily interested in whether the coefficient on this interaction term is significant. Instead, what we really want to know is whether the marginal effect of ethnic heterogeneity is positive and significant once the electoral system becomes sufficiently permissive… All three figures [including the one reproduced above] clearly illustrate that in established democracies, ethnic heterogeneity significantly increases the number of parties once the electoral system is sufficiently permissive. This is exactly what Duverger’s theory predicts. To be more specific, Figure 1a [the one reproduced above], based on the pooled model with established democracies, indicates that ethnic heterogeneity will increase the number of electoral parties once we move beyond nonpermissive electoral systems with single-member districts—when \\(\\ln(\\text{Magnitude}) = 0\\). In this summary, I see three claims: When the magnitude is one (i.e., single-member districts), the effect of social heterogeneity should be negligible. When the magnitude is large (i.e., large-magnitude PR systems), the effect of social heterogeneity should be positive (and meaningful). The effect of social heterogeneity should increase with district magnitude. From the information above, we have tests of each of these claims: In single-member district systems (the far left side of the figure above), the effect of ENEG is not statistically significant. The confidence interval goes up to about 0.4, so we can reject the null hypothesis that the effect is larger than 0.4. This would mean almost one-half of a party for each new ethnic group—this seems like a meaningful effect to me. Most importantly, though, the absence of statistical significance is not evidence that the effect is zero. In large-magnitude PR systems (the right side of the figure above), the effect of ENEG is statistically significant. So we can reject the null hypothesis that ENEG has no effect in these systems. However, the confidence interval almost reaches zero (down to about \\(\\frac{1}{20}\\)), so we cannot reject the null hypothesis that the effect is negligible (and, by implication, conclude that the effect is meaningful). The coefficient for the product term is not statistically significant, so we cannot reject the null hypothesis that the effect of ENEG is the same across these different electoral systems. In other words, we reject the hypothesis that the line showing the marginal effect plot in the figure above is flat (or even slightly negative). In sum: is the effect of ENEG positive in large-magnitude PR systems? Yes. Is it also positive in single-member district systems? Maybe. Is the effect the same in single-member district systems? Maybe. When stated this way, Clark and Golder’s marginal effect plot presents less evidence for their theory than it initially seems. Marginal effect plots are a valuable tool for thinking about interaction effects. In my view, they are an indispensible tool. However, they tempt the researcher to draw conclusions that might not be warranted, so please keep these temptations in mind. Berry, Golder, and Milton (2012) offer a valuable follow-up to Brambor, Clark, and Golder (2006). I highly recommend implementing their suggestions. "],["berry-golder-and-milton-2012.html", "6.3 Berry, Golder, and Milton (2012)", " 6.3 Berry, Golder, and Milton (2012) Berry, Golder, and Milton (2012, BGM) update BCG’s suggestions by providing a specific collection of hypotheses that they suggest researchers posit and test. They suggest that for each interactive hypothesis, there are actually five quantities of interest that the research hypothesize. \\(\\frac{\\partial E(y \\mid X_{z_s = \\text{lo}})}{\\partial x_s}\\): the effect of \\(x_s\\) when \\(z_s\\) takes on a low value. \\(\\frac{\\partial E(y \\mid X_{z_s=\\text{hi}})}{\\partial x_s}\\): the effect of \\(x_s\\) when \\(z_s\\) takes on a high value. \\(\\frac{\\partial E(y \\mid X_{x_s=\\text{lo}})}{\\partial z_s}\\): the effect of \\(z_s\\) when \\(x_s\\) takes on a low value. \\(\\frac{\\partial E(y \\mid X_{x=\\text{hi}})}{\\partial z_s}\\): the effect of \\(z_s\\) when \\(x_s\\) takes on a high value. \\(\\frac{\\partial E(y \\mid X_{s})}{\\partial x_s\\partial z_s}\\): the “interaction effect;” the effect of \\(z_s\\) on the effect of \\(x_s\\) on \\((y \\mid X_{s})\\). This quantity is symmetric, so it’s equivalent to the effect of \\(x_s\\) on the effect of \\(z_s\\) on \\((y \\mid X_{s})\\). In order to fully evaluate all five possible hypotheses, they suggest two marginal effect plots and reporting the statistical significance of the product term. # load data cg &lt;- read_csv(&quot;data/parties.csv&quot;) %&gt;% filter(established_democracy == 1) # keep only established democracies # fit model; reproduces coefficients reported in Table 2, p. 698, 1946-2000 Established Democracys of Clark and Golder (2006) fit &lt;- lm(enep ~ eneg*log(average_magnitude) + eneg*upper_tier + en_pres*proximity, data = cg) # extract coefficient estimates beta_hat &lt;- coef(fit) # calculate cluster-robust standard errors Stata-style (rather than the vanilla vcov()) M &lt;- length(unique(cg$country)) N &lt;- length(cg$country) K &lt;- fit$rank dfc &lt;- (M/(M - 1)) * ((N - 1)/(N - K)) uj &lt;- apply(sandwich::estfun(fit), 2, function(x) tapply(x, cg$country, sum)); uj &lt;- na.omit(uj) sigma_hat &lt;- dfc * sandwich::sandwich(fit, meat = crossprod(uj)/N) # compute marginal effects and ses z &lt;- seq(min(log(cg$average_magnitude)), max(log(cg$average_magnitude)), length.out = 100) me &lt;- beta_hat[&quot;eneg&quot;] + beta_hat[&quot;eneg:log(average_magnitude)&quot;]*z se &lt;- sqrt(sigma_hat[&quot;eneg&quot;, &quot;eneg&quot;] + (z^2)*sigma_hat[&quot;eneg:log(average_magnitude)&quot;, &quot;eneg:log(average_magnitude)&quot;] + 2*z*sigma_hat[&quot;eneg&quot;, &quot;eneg:log(average_magnitude)&quot;]) gg_data &lt;- tibble(log_average_magnitude = z, marginal_effect = me, se = se) # plot the marginal effects gg0 &lt;- ggplot(gg_data, aes(x = log_average_magnitude, y = marginal_effect, ymin = marginal_effect - 1.64*se, ymax = marginal_effect + 1.64*se)) + geom_hline(yintercept = 0) + geom_ribbon(fill = &quot;grey10&quot;, alpha = 0.5) + geom_line() + geom_rug(data = cg, aes(x = log(average_magnitude), y = NULL, ymin=NULL, ymax = NULL), sides = &quot;b&quot;, alpha = 0.2) + labs(x = &quot;log(Average Magnitude)&quot;, y = &quot;The Marginal Effect of ENEG&quot;) + theme_bw() # now add the histogram; which is harder than I expected # I used three steps # 1. compute the bins and counts manually # 2. grab the axis limits of the me plot # 3. add the rectangles (rescaled appropriately) *underneath* the layers of the me plot ## first, compute the counts for each bin, manually x &lt;- log(cg$average_magnitude) # variable to histogram (makes code below easier to read) n_breaks &lt;- 30 # number of breaks breaks &lt;- seq(from = min(x), to = max(x), length.out = n_breaks) ### a loop to compute the information for each bin (loop for correctness) n_bins &lt;- n_breaks - 1 lwr &lt;- upr &lt;- count &lt;- numeric(n_bins) for (i in 1:n_bins) { lwr[i] &lt;- breaks[i] upr[i] &lt;- breaks[i + 1] count[i] &lt;- ifelse(i == 1, sum(x &lt;= upr[i] &amp; x &gt;= lwr[i]), # 1st bin is closed on both sides sum(x &lt;= upr[i] &amp; x &gt; lwr[i])) # subsequent bins are open on the left } gg_hist &lt;- tibble(lwr, upr, count) %&gt;% mutate(rescaled_count = count/max(count)) # rescale counts so that largest is one ## second, get the limits of the marginal effects plot get_plot_limits &lt;- function(plot) { gb = ggplot_build(plot) xmin = gb$layout$panel_params[[1]]$x.range[1] xmax = gb$layout$panel_params[[1]]$x.range[2] ymin = gb$layout$panel_params[[1]]$y.range[1] ymax = gb$layout$panel_params[[1]]$y.range[2] list(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax) } lim0 &lt;- get_plot_limits(gg0) ## third, nsert rectangles underneath current layers, rescaling bars to fit vertical axis ### a function to add a layer underneath ### ref: https://stackoverflow.com/questions/20249653/insert-layer-underneath-existing-layers-in-ggplot2-object `-.gg` &lt;- function(plot, layer) { if (missing(layer)) { stop(&quot;Cannot use `-.gg()` with a single argument. Did you accidentally put - on a new line?&quot;) } if (!is.ggplot(plot)) { stop(&#39;Need a plot on the left side&#39;) } plot$layers = c(layer, plot$layers) plot } ### create an interaction term report to add to the top of the figure est &lt;- beta_hat[&quot;eneg:log(average_magnitude)&quot;] se &lt;- sqrt(sigma_hat[&quot;eneg:log(average_magnitude)&quot;, &quot;eneg:log(average_magnitude)&quot;]) ci_upr &lt;- est + 1.64*se ci_lwr &lt;- est - 1.64*se interaction_report &lt;- paste0(&quot;Estimated coefficient for product term is not statistically significant (Est. = &quot;, round(est, 2), &quot;; 90% CI = [&quot;, round(ci_lwr, 2), &quot;, &quot;, round(ci_upr, 2), &quot;])&quot;) ### add histogram and interaction report gg0 - # minus adds layer &quot;underneath&quot; the others geom_rect(data = gg_hist, aes(xmin = lwr, xmax = upr, ymin = 0 + lim0$ymin, ymax = 1.0*rescaled_count*(lim0$ymax - lim0$ymin) + lim0$ymin, x = NULL, y = NULL), alpha = 0.2) + # now add product term notes annotate(&quot;text&quot;, x = (lim0$xmin + lim0$xmax)/2, y = 0.98*(lim0$ymax - lim0$ymin) + lim0$ymin, label = interaction_report, size = 3) Now we reverse the role of magnitude and ENEG in the marginal effect plot and do the whole think again. # compute marginal effects and ses z &lt;- seq(min(cg$eneg), max(cg$eneg), length.out = 100) me &lt;- beta_hat[&quot;log(average_magnitude)&quot;] + beta_hat[&quot;eneg:log(average_magnitude)&quot;]*z se &lt;- sqrt(sigma_hat[&quot;log(average_magnitude)&quot;, &quot;log(average_magnitude)&quot;] + (z^2)*sigma_hat[&quot;eneg:log(average_magnitude)&quot;, &quot;eneg:log(average_magnitude)&quot;] + 2*z*sigma_hat[&quot;log(average_magnitude)&quot;, &quot;eneg:log(average_magnitude)&quot;]) gg_data &lt;- tibble(eneg = z, marginal_effect = me, se = se) gg0 &lt;- ggplot(gg_data, aes(x = eneg, y = marginal_effect, ymin = marginal_effect - 1.64*se, ymax = marginal_effect + 1.64*se)) + geom_hline(yintercept = 0) + geom_ribbon(fill = &quot;grey10&quot;, alpha = 0.5) + geom_line() + geom_rug(data = cg, aes(x = eneg, y = NULL, ymin=NULL, ymax = NULL), sides = &quot;b&quot;, alpha = 0.2) + labs(x = &quot;ENEG&quot;, y = &quot;The Marginal Effect of log(Average Magnitude)&quot;, caption = &quot;Reproduction of Figure 1 on p. 701 of Clark and Golder (2006)&quot;) + theme_bw() # now add the histogram; which is harder than I expected # I used three steps # 1. compute the bins and counts manually # 2. grab the axis limits of the me plot # 3. add the rectangles (rescaled appropriately) *underneath* the layers of the me plot ## first, compute the counts for each bin, manually x &lt;- cg$eneg # variable to histogram (makes code below easier to read) n_breaks &lt;- 30 # number of breaks breaks &lt;- seq(from = min(x), to = max(x), length.out = n_breaks) ### a loop to compute the information for each bin (loop for correctness) n_bins &lt;- n_breaks - 1 lwr &lt;- upr &lt;- count &lt;- numeric(n_bins) for (i in 1:n_bins) { lwr[i] &lt;- breaks[i] upr[i] &lt;- breaks[i + 1] count[i] &lt;- ifelse(i == 1, sum(x &lt;= upr[i] &amp; x &gt;= lwr[i]), # 1st bin is closed on both sides sum(x &lt;= upr[i] &amp; x &gt; lwr[i])) # subsequent bins are open on the left } gg_hist &lt;- tibble(lwr, upr, count) %&gt;% mutate(rescaled_count = count/max(count)) # rescale counts so that largest is one ## second, get the limits of the marginal effects plot get_plot_limits &lt;- function(plot) { gb = ggplot_build(plot) xmin = gb$layout$panel_params[[1]]$x.range[1] xmax = gb$layout$panel_params[[1]]$x.range[2] ymin = gb$layout$panel_params[[1]]$y.range[1] ymax = gb$layout$panel_params[[1]]$y.range[2] list(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax) } lim0 &lt;- get_plot_limits(gg0) ## third, nsert rectangles underneath current layers, rescaling bars to fit vertical axis ## ref: https://stackoverflow.com/questions/20249653/insert-layer-underneath-existing-layers-in-ggplot2-object `-.gg` &lt;- function(plot, layer) { if (missing(layer)) { stop(&quot;Cannot use `-.gg()` with a single argument. Did you accidentally put - on a new line?&quot;) } if (!is.ggplot(plot)) { stop(&#39;Need a plot on the left side&#39;) } plot$layers = c(layer, plot$layers) plot } gg0 - # minus adds layer &quot;underneath&quot; the others geom_rect(data = gg_hist, aes(xmin = lwr, xmax = upr, ymin = 0 + lim0$ymin, ymax = 1.0*rescaled_count*(lim0$ymax - lim0$ymin) + lim0$ymin, x = NULL, y = NULL), alpha = 0.2) + # now add product term notes annotate(&quot;text&quot;, x = (lim0$xmin + lim0$xmax)/2, y = 0.98*(lim0$ymax - lim0$ymin) + lim0$ymin, label = interaction_report, size = 3) "],["berry-demeritt-and-esarey-2010.html", "6.4 Berry, DeMeritt, and Esarey (2010)", " 6.4 Berry, DeMeritt, and Esarey (2010) Berry, DeMeritt, and Esarey (2010) make a critical point: If one is interested in the marginal effect of \\(x\\) on \\(E(\\tilde{y} \\mid X)\\), then the product term \\(x \\times z\\) can be a misleading indicator of the modifying effect of \\(z\\) on \\(\\frac{\\partial E(\\tilde{y} \\mid X)}{\\partial x}\\). Consider a probit model \\(y_i \\sim \\text{Bernoulli}(\\pi_i)\\), where \\(\\pi_i = \\Phi(\\eta_i)\\) and \\(\\eta_i = X_i\\beta\\). For simplicity, let’s suppose that \\[ X_i\\beta = \\beta_0 + \\beta_x x_i + \\beta_{z} z_i + \\beta_{xz}x_iz_i + \\text{other terms not involving } x \\text{ or } z. \\] In my mind, there are two “interaction effects” that one could compute here. First, we could compute the interaction of \\(x\\) and \\(z\\) in influencing \\(\\eta\\). In this case, the interaction is \\(\\frac{\\partial^2 \\pi}{\\partial x \\partial z}\\) or the analogous second-difference (and is quite complicated). BDE (2010) argue that this “is usually the case” (p. 250). I’m not sure that I agree that it’s most natural to think about interaction it terms of \\(\\pi\\) or \\(\\Pr(y)\\). BDE treat hypotheses about \\(\\eta\\) as the special case and hypotheses about \\(\\Pr(y)\\) as the “obvious” default. But social science theories are usually vague, and it takes precision to account for the compression of the probit link function in the hypothesis. As an example, a researcher might theorize that negative news coverage would have a larger impact on turning out to vote among people with higher levels of education because the most educated are paying the most attention to the news. However, this theoretical intuition does not account for the ceiling effect that the most educated experience. Contrary to BDE, I suspect that most natural place to think about interaction is “outside the link function” and in terms of \\(\\eta\\). Second, we could compute the interaction of \\(x\\) and \\(z\\) in influencing \\(\\eta\\). This excludes the interaction “due to compression.” In this case, the interaction is just \\(\\frac{\\partial^2 \\eta}{\\partial x \\partial z} = \\beta_{xz}\\). Testing this “interaction effect” does not require computing \\(\\frac{\\partial^2 \\pi}{\\partial x \\partial z}\\) or anything beyond the standard table of coefficients and p-values. I find myself more in this camp. Unless one has a specific reason for theorizing specifically about interaction due to the compression of the link function, it makes more sense to focus on \\(\\beta_{xz}\\) as the “interaction effect.” I think everyone writing in this literature would agree that these are two types of (or “measures of”) interaction: \\(\\frac{\\partial^2 \\pi}{\\partial x \\partial z}\\) and \\(\\frac{\\partial^2 \\eta}{\\partial x \\partial z}\\) . There’s disagreement about the type that researchers should “usually” care about. Most people—Bill Berry might be the only exception—would argue that \\(\\frac{\\partial^2 \\eta}{\\partial x \\partial z}\\) is the obvious default. Some might hold the extreme view that \\(\\frac{\\partial^2 \\eta}{\\partial x \\partial z}\\) is the only interaction effect worth hypothesizing about. Regardless, I don’t see any consensus that \\(\\frac{\\partial^2 \\pi}{\\partial x \\partial z}\\) is THE interaction effect. Regardless, you should be aware of the two possibilities for defining and measuring interaction. BDE define interaction in terms of the second derivative (or “cross partial derivative”) \\(\\frac{\\partial^2 \\pi}{\\partial x \\partial z}\\) or the analogous second difference. The second derivative is easier to write about (i.e., type), but the second difference is easier to compute. # load data scobit &lt;- haven::read_dta(&quot;data/scobit.dta&quot;) %&gt;% filter(newvote != -1) # fit model (w&amp;r&#39;s specification in bde table 1 on p. 263) f &lt;- newvote ~ poly(neweduc, 2, raw = TRUE) + closing + poly(age, 2, raw = TRUE) + south + gov fit &lt;- glm(f, data = scobit, family = binomial(link = &quot;probit&quot;)) # simulate beta_tildes using KTW&#39;s method beta_tilde &lt;- mvtnorm::rmvnorm(2000, mean = coef(fit), sigma = vcov(fit)) # four scenarios of the second difference; 10th to 90th percentile for both # note: 1st lo/hi refers to neweduc; 2nd refers to closing s_lo_lo &lt;- tibble( neweduc = quantile(scobit$neweduc, probs = 0.1), closing = quantile(scobit$neweduc, probs = 0.1), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_lo_lo) X_s &lt;- model.matrix(mf, s_lo_lo) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor eta_hat &lt;- X_s%*%coef(fit) # ml estimate of linear predictor pi_lo_lo_tilde &lt;- pnorm(eta_tilde) # simulations of expected value pi_lo_lo_hat &lt;- pnorm(eta_hat) # ml estimate of expected value # note: I only care to &quot;keep&quot; things with the _lo_lo tag, everything # else gets overwritten below. # hi; lo s_hi_lo &lt;- tibble( neweduc = quantile(scobit$neweduc, probs = 0.9), closing = quantile(scobit$neweduc, probs = 0.1), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_hi_lo) X_s &lt;- model.matrix(mf, s_hi_lo) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor eta_hat &lt;- X_s%*%coef(fit) # ml estimate of linear predictor pi_hi_lo_tilde &lt;- pnorm(eta_tilde) # simulations of expected value pi_hi_lo_hat &lt;- pnorm(eta_hat) # ml estimate of expected value # lo; hi s_lo_hi &lt;- tibble( neweduc = quantile(scobit$neweduc, probs = 0.1), closing = quantile(scobit$neweduc, probs = 0.9), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_lo_hi) X_s &lt;- model.matrix(mf, s_lo_hi) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor eta_hat &lt;- X_s%*%coef(fit) # ml estimate of linear predictor pi_lo_hi_tilde &lt;- pnorm(eta_tilde) # simulations of expected value pi_lo_hi_hat &lt;- pnorm(eta_hat) # ml estimate of expected value # hi; hi s_hi_hi &lt;- tibble( neweduc = quantile(scobit$neweduc, probs = 0.9), closing = quantile(scobit$neweduc, probs = 0.9), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_hi_hi) X_s &lt;- model.matrix(mf, s_hi_hi) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor eta_hat &lt;- X_s%*%coef(fit) # ml estimate of linear predictor pi_hi_hi_tilde &lt;- pnorm(eta_tilde) # simulations of expected value pi_hi_hi_hat &lt;- pnorm(eta_hat) # ml estimate of expected value # ml estimate (pi_hi_hi_hat - pi_lo_hi_hat) - # effect of education when closing is high (pi_hi_lo_hat - pi_lo_lo_hat) # effect of education when closing is low ## [,1] ## 1 0.00704756 # note: this is a difference between differences or a &quot;second difference&quot; # ktw simulations of second difference dd_tilde &lt;- (pi_hi_hi_tilde - pi_lo_hi_tilde) - # effect of education when closing is high (pi_hi_lo_tilde - pi_lo_lo_tilde) # effect of education when closing is low # 90% CI using ktw simulations quantile(dd_tilde, probs = c(0.05, 0.95)) ## 5% 95% ## 0.006318230 0.007776232 We can compare this to Nagler’s specification using the AIC and BIC. (BDE use a “likelihood ratio test” that we’ll talk about soon). f &lt;- newvote ~ poly(neweduc, 2, raw = TRUE)*closing + poly(age, 2, raw = TRUE) + south + gov fit1 &lt;- glm(f, data = scobit, family = binomial(link = &quot;probit&quot;)) AIC(fit, fit1) ## df AIC ## fit 8 111652.1 ## fit1 10 111650.6 BIC(fit, fit1) ## df BIC ## fit 8 111728.1 ## fit1 10 111745.6 The AIC barely prefers the model with the product terms. The BIC strongly prefers the model that omits the product terms. If we wanted, we could compute the second difference from Nagler’s specification and compare it to Wolfinger and Rosenstone’s. # simulate beta_tildes using KTW&#39;s method beta_tilde &lt;- mvtnorm::rmvnorm(2000, mean = coef(fit1), sigma = vcov(fit1)) # four scenarios of the second difference; 10th to 90th percentile for both # note: 1st lo/hi refers to neweduc; 2nd refers to closing s_lo_lo &lt;- tibble( neweduc = quantile(scobit$neweduc, probs = 0.1), closing = quantile(scobit$neweduc, probs = 0.1), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_lo_lo) X_s &lt;- model.matrix(mf, s_lo_lo) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor eta_hat &lt;- X_s%*%coef(fit1) # ml estimate of linear predictor pi_lo_lo_tilde &lt;- pnorm(eta_tilde) # simulations of expected value pi_lo_lo_hat &lt;- pnorm(eta_hat) # ml estimate of expected value # note: I only care to &quot;keep&quot; things with the _lo_lo tag, everything # else gets overwritten below. # hi; lo s_hi_lo &lt;- tibble( neweduc = quantile(scobit$neweduc, probs = 0.9), closing = quantile(scobit$neweduc, probs = 0.1), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_hi_lo) X_s &lt;- model.matrix(mf, s_hi_lo) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor eta_hat &lt;- X_s%*%coef(fit1) # ml estimate of linear predictor pi_hi_lo_tilde &lt;- pnorm(eta_tilde) # simulations of expected value pi_hi_lo_hat &lt;- pnorm(eta_hat) # ml estimate of expected value # lo; hi s_lo_hi &lt;- tibble( neweduc = quantile(scobit$neweduc, probs = 0.1), closing = quantile(scobit$neweduc, probs = 0.9), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_lo_hi) X_s &lt;- model.matrix(mf, s_lo_hi) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor eta_hat &lt;- X_s%*%coef(fit1) # ml estimate of linear predictor pi_lo_hi_tilde &lt;- pnorm(eta_tilde) # simulations of expected value pi_lo_hi_hat &lt;- pnorm(eta_hat) # ml estimate of expected value # hi; hi s_hi_hi &lt;- tibble( neweduc = quantile(scobit$neweduc, probs = 0.9), closing = quantile(scobit$neweduc, probs = 0.9), age = median(scobit$age), south = median(scobit$south), gov = median(scobit$gov)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_hi_hi) X_s &lt;- model.matrix(mf, s_hi_hi) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor eta_hat &lt;- X_s%*%coef(fit1) # ml estimate of linear predictor pi_hi_hi_tilde &lt;- pnorm(eta_tilde) # simulations of expected value pi_hi_hi_hat &lt;- pnorm(eta_hat) # ml estimate of expected value # ml estimate (pi_hi_hi_hat - pi_lo_hi_hat) - # effect of education when closing is high (pi_hi_lo_hat - pi_lo_lo_hat) # effect of education when closing is low ## [,1] ## 1 0.004674478 # note: this is a difference between differences or a &quot;second difference&quot; # ktw simulations of second difference dd_tilde &lt;- (pi_hi_hi_tilde - pi_lo_hi_tilde) - # effect of education when closing is high (pi_hi_lo_tilde - pi_lo_lo_tilde) # effect of education when closing is low # 90% CI using ktw simulations quantile(dd_tilde, probs = c(0.05, 0.95)) ## 5% 95% ## 0.002202094 0.007174123 Contrary to what you might expect, the model with the product term exhibits less interaction than the model without product terms (this is BDE’s basic point). "],["rainey-2016.html", "6.5 Rainey (2016)", " 6.5 Rainey (2016) Rainey (2016) ammends BDE (2010) slightly. BDE suggest that if one theorized interaction on the grounds of compression along (i.e., the coefficient of the product term equals zero), then there is no reason to include a product term in the regression equation. Rainey points out that this leads to a hypothesis test that performs poorly, because a statistically significant coefficient for \\(x\\) and \\(z\\) implies a statistically significant interaction effect in most cases. Somewhat counter-intuitively, Rainey points out that researchers need to include the product term so that interaction can be absent from the model. "],["hanmer-and-kalkan-2013.html", "6.6 Hanmer and Kalkan (2013)", " 6.6 Hanmer and Kalkan (2013) Hanmer and Kalkan (2013) make an important observation: a “typical” scenario \\(X_s\\) might product an atypical quantity of interest. To remedy these concerns, they suggest setting the “other” covariate to all combinations that appear in the data set, compute the quantity of interest for all those scenarios, and then average them. First, let’s see how the second difference from the previous chapter varies across all the existing combinations of the other covariates. We don’t need a CI, so we don’t need to use KTW’s simulation method–we can just use predict(). This can be numerically demanding, so I’m taking a random sample of 5,000 observations from BDE’s example data set to illustrate the computation. # load data scobit &lt;- haven::read_dta(&quot;data/scobit.dta&quot;) %&gt;% filter(newvote != -1) %&gt;% sample_n(5000) # fit model (nagler&#39;s specification in bde table 1 on p. 263) f &lt;- newvote ~ poly(neweduc, 2, raw = TRUE) + closing + poly(age, 2, raw = TRUE) + south + gov fit &lt;- glm(f, data = scobit, family = binomial(link = &quot;probit&quot;)) # four scenarios of the second difference; 10th to 90th percentile for both # note: 1st lo/hi refers to neweduc; 2nd refers to closing s_lo_lo &lt;- scobit %&gt;% # start with the observed data set select(age, south, gov) %&gt;% # select the &quot;other&quot; covariates mutate(neweduc = quantile(scobit$neweduc, probs = 0.1), closing = quantile(scobit$neweduc, probs = 0.1)) pi_lo_lo_hat &lt;- predict(fit, newdata = s_lo_lo, type = &quot;response&quot;) s_hi_lo &lt;- scobit %&gt;% # start with the observed data set select(age, south, gov) %&gt;% # select the &quot;other&quot; covariates mutate(neweduc = quantile(scobit$neweduc, probs = 0.9), closing = quantile(scobit$neweduc, probs = 0.1)) pi_hi_lo_hat &lt;- predict(fit, newdata = s_hi_lo, type = &quot;response&quot;) s_lo_hi &lt;- scobit %&gt;% # start with the observed data set select(age, south, gov) %&gt;% # select the &quot;other&quot; covariates mutate(neweduc = quantile(scobit$neweduc, probs = 0.1), closing = quantile(scobit$neweduc, probs = 0.9)) pi_lo_hi_hat &lt;- predict(fit, newdata = s_lo_hi, type = &quot;response&quot;) s_hi_hi &lt;- scobit %&gt;% # start with the observed data set select(age, south, gov) %&gt;% # select the &quot;other&quot; covariates mutate(neweduc = quantile(scobit$neweduc, probs = 0.9), closing = quantile(scobit$neweduc, probs = 0.9)) pi_hi_hi_hat &lt;- predict(fit, newdata = s_hi_hi, type = &quot;response&quot;) # ml estimate dd_hat &lt;- (pi_hi_hi_hat - pi_lo_hi_hat) - # effect of education when closing is high (pi_hi_lo_hat - pi_lo_lo_hat) # effect of education when closing is low qplot(dd_hat, bins = 100) mean(dd_hat) ## [1] 0.002918702 sd(dd_hat) ## [1] 0.002185804 You can see that we get quite a lot of variation in the quantity of interest, depending on the value we choose for the other covariates. I’ve chatting with Michael Hanmer about this, and I think he agrees with me that it’s valuable to at least compute (if not present in the paper) the variation in the quantity of interest across all observed values of the other covariates. Knowing the distribution (in addition to the average) is helpful. We might descibe the second difference here as about 0.005, give or take 0.003 or so, depending on the values of the other covariates. The we can use KTW’s method to get a confidence interval for the average across the observed values. # simulate beta_tildes using KTW&#39;s method beta_tilde &lt;- mvtnorm::rmvnorm(2000, mean = coef(fit), sigma = vcov(fit)) # four scenarios of the second difference; 10th to 90th percentile for both # note: 1st lo/hi refers to neweduc; 2nd refers to closing s_lo_lo &lt;- scobit %&gt;% # start with the observed data set select(age, south, gov) %&gt;% # select the &quot;other&quot; covariates mutate(neweduc = quantile(scobit$neweduc, probs = 0.1), closing = quantile(scobit$neweduc, probs = 0.1)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_lo_lo) X_s &lt;- model.matrix(mf, s_lo_lo) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor pi_lo_lo_tilde &lt;- pnorm(eta_tilde) # simulations of expected value # note: I only care to &quot;keep&quot; things with the _lo_lo tag, everything # else gets overwritten below. # hi; lo s_hi_lo &lt;- scobit %&gt;% # start with the observed data set select(age, south, gov) %&gt;% # select the &quot;other&quot; covariates mutate(neweduc = quantile(scobit$neweduc, probs = 0.9), closing = quantile(scobit$neweduc, probs = 0.1)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_hi_lo) X_s &lt;- model.matrix(mf, s_hi_lo) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor pi_hi_lo_tilde &lt;- pnorm(eta_tilde) # simulations of expected value # lo; hi s_lo_hi &lt;- scobit %&gt;% # start with the observed data set select(age, south, gov) %&gt;% # select the &quot;other&quot; covariates mutate(neweduc = quantile(scobit$neweduc, probs = 0.1), closing = quantile(scobit$neweduc, probs = 0.9)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_lo_hi) X_s &lt;- model.matrix(mf, s_lo_hi) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor pi_lo_hi_tilde &lt;- pnorm(eta_tilde) # simulations of expected value # hi; hi s_hi_hi &lt;- scobit %&gt;% # start with the observed data set select(age, south, gov) %&gt;% # select the &quot;other&quot; covariates mutate(neweduc = quantile(scobit$neweduc, probs = 0.9), closing = quantile(scobit$neweduc, probs = 0.9)) f_s &lt;- update(f, NULL ~ .) # remove lhs for use below mf &lt;- model.frame(f_s, s_hi_hi) X_s &lt;- model.matrix(mf, s_hi_hi) eta_tilde &lt;- X_s%*%t(beta_tilde) # simulations of linear predictor pi_hi_hi_tilde &lt;- pnorm(eta_tilde) # simulations of expected value # ktw simulations of second difference dd_tilde &lt;- (pi_hi_hi_tilde - pi_lo_hi_tilde) - # effect of education when closing is high (pi_hi_lo_tilde - pi_lo_lo_tilde) # effect of education when closing is low avg_dd_tilde &lt;- apply(dd_tilde, 2, mean) # 90% CI using ktw simulations quantile(avg_dd_tilde, probs = c(0.05, 0.95)) ## 5% 95% ## 0.002731359 0.014179453 "],["week-12-hierarchical-models.html", "Chapter 7 Week 12: Hierarchical Models", " Chapter 7 Week 12: Hierarchical Models This week, I introduce the idea of a hierarchical model. These fall a little outside our standard probability model framework, but require only adding a small idea–the hierarchical bit–to the right-hand side of our models. "],["example-contact-in-finland.html", "7.1 Example: Contact in Finland", " 7.1 Example: Contact in Finland In my dissertation, I was interested in how survey self-reports of being contacted by a political party varies across electoral districts. You can see here for the details. For now, let’s just estimate the proportion of people in each district that are contacted by a party. Let’s start with Finland. # load survey data from finland finland_raw &lt;- read_csv(&quot;data/finland.csv&quot;) %&gt;% glimpse() ## Rows: 1192 Columns: 2 ## ── Column specification ──────────────────────────────────────────────────────── ## Delimiter: &quot;,&quot; ## dbl (2): District, Contacted ## ## ℹ Use `spec()` to retrieve the full column specification for this data. ## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message. ## Rows: 1,192 ## Columns: 2 ## $ District &lt;dbl&gt; 304, 313, 313, 310, 310, 304, 304, 304, 304, 304, 304, 304, … ## $ Contacted &lt;dbl&gt; 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, … It will be convenient in later steps to have District be a factor, so let’s do that now. # prep the data for plotting finland &lt;- finland_raw %&gt;% # mutate District to factor ordered by contact rate mutate(District = as.factor(District), District = reorder(District, Contacted)) %&gt;% glimpse() ## Rows: 1,192 ## Columns: 2 ## $ District &lt;fct&gt; 304, 313, 313, 310, 310, 304, 304, 304, 304, 304, 304, 304, … ## $ Contacted &lt;dbl&gt; 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, … The Contacted variable equals 1 if the respondent self-reported being contacted by a political party and 0 if they report not being contacted by a political party (and listwise deleted if missing). The Distct variable is an ID number for the electoral district (internal to my analysis). A scatterplot is a safe and potentially informative way to start. gg1 &lt;- ggplot(finland, aes(x = District, y = Contacted)) + geom_jitter(shape = 21, alpha = 0.5, size = 1) + theme_bw() print(gg1) Now let’s estimate the probability of being contacted by a political party in each district. Startt by writing down a probability model for being contacted. This is a binary outcome, so if we’re going to assume (conditional) independence, it must be Bernoulli. \\[ \\text{Contacted}_i \\sim \\text{Bernoulli}(\\pi_j), \\] where \\(i\\) indexes the respondent and \\(j\\) indexes the electoral district. Remember that the ML estimate of \\(\\pi\\) is just the sample mean (or sample proportion). We can do this easily for each district with group_by() and summarize(). Let’s also add an estimate of the standard error using \\(\\widehat{\\text{SE}}(\\hat{\\pi}_j) = \\frac{\\sqrt{\\hat{\\pi}_j(1 - \\hat{\\pi}_j)}}{\\sqrt{n}}\\). estimates &lt;- finland %&gt;% group_by(District) %&gt;% summarize(pi_hat = mean(Contacted), n = n(), se_hat = sqrt(pi_hat*(1 - pi_hat))/sqrt(n)) %&gt;% glimpse() ## Rows: 14 ## Columns: 4 ## $ District &lt;fct&gt; 312, 316, 305, 315, 306, 310, 311, 304, 307, 317, 314, 313, 3… ## $ pi_hat &lt;dbl&gt; 0.08955224, 0.11904762, 0.13043478, 0.13461538, 0.17073171, 0… ## $ n &lt;int&gt; 67, 42, 46, 52, 41, 196, 91, 171, 106, 72, 117, 79, 87, 25 ## $ se_hat &lt;dbl&gt; 0.03488417, 0.04997030, 0.04965567, 0.04733150, 0.05876418, 0… Now let’s add these estimates to the scatterplot. gg2 &lt;- gg1 + geom_errorbar(data = estimates, aes(ymin = pi_hat - 1.64*se_hat, ymax = pi_hat + 1.64*se_hat, y = NULL), width = .2, color = &quot;#1b9e77&quot;) + geom_point(data = estimates, aes(y = pi_hat), color = &quot;#1b9e77&quot;, size = 2) print(gg2) You can see that the confidence intervals (and sample size) varies by district, so let’s add that information to the plot. gg3 &lt;- gg2 + geom_label(data = estimates, aes(y = pi_hat + 1.64*se_hat, label = n), color = &quot;#1b9e77&quot;, vjust = -0.2) print(gg3) Great! Now we’re done. We’ve got ML estimates of the contact rate for all districts. But wait… can we do better? Let’s look at district 309 on the far right. We our estimate of the contact rate in this district is the highest. It is also the district with the smallest sample. Our estimator \\(\\hat{pi}\\) is unbiased, but if you had to say, would you say that the turnout rate in district 309 was higher or lower than \\(\\hat{\\pi}_{309} = 0.40\\)? If your intuition matches mine, you will say lower. Why? This “why?” is an important question. If you think that \\(\\hat{\\pi}\\) is a good estimator, but you suddenly want to adjust this particular estimate, you must have additional information coming from somewhere. Where? The answer: the other districts. We admit that the contact rate will be different across districts, but it also seems reasonable to assume they will be similar (that’s “different, but similar”). Given that 309 has a small sample and looks relatively unlike the other estimates, we want to pull it down slighly toward the other estimates. This is exactly the intuition of hierarchical models. Let’s write down this “different, but similar” intuition. To do this, it will be convenient to have our \\(\\pi_j\\)s on the logit scale. Start with the likelihood. \\[ \\text{Contacted}_i \\sim \\text{Bernoulli}(\\pi_j) \\] Now tranlate the \\(\\pi\\)s to the logit scale. \\[ \\pi_j = \\text{\\logit}^{-1}(\\alpha_j) \\] Each of these \\(\\alpha_j\\)s is like a constant term in a logit model with no covariates. (We could add covariates, but that makes the example less clear.) Now for the hiearchical part: we want to capture the notion that these \\(\\alpha_j\\)s are different but similar. We can do that by modeling them as draws from normal distribution. \\[ \\alpha_j \\sim N(\\mu, \\sigma^2) \\] The we can estimate \\(\\mu\\) (the “typical” \\(\\alpha\\)) and \\(\\sigma\\) (the degree of similarity) from the data. This last portion is the “hierarchical piece.” We sometimes refer to batches of parameters modeled as draws from a distribution as “random effects.” To estimate the hierarchical model, use can use ML via the lme4::lmer()/lme4::glmer() function or MCMC via the rstanarm::stan_lmer()/rstanarm::stan_glmer() function. The *lmer()/*glmer() function have the same distinction as the lm()/glm() functions, but the *er() variants allow random effects. library(lme4) ## Loading required package: Matrix ## ## Attaching package: &#39;Matrix&#39; ## The following objects are masked from &#39;package:tidyr&#39;: ## ## expand, pack, unpack fit &lt;- glmer(Contacted ~ (1 | District), data = finland, family = binomial) arm::display(fit) ## glmer(formula = Contacted ~ (1 | District), data = finland, family = binomial) ## coef.est coef.se ## -1.36 0.11 ## ## Error terms: ## Groups Name Std.Dev. ## District (Intercept) 0.28 ## Residual 1.00 ## --- ## number of obs: 1192, groups: District, 14 ## AIC = 1222.7, DIC = 1185.4 ## deviance = 1202.0 From the output above, we estimate \\(mu\\) as -1.36 and \\(\\sigma\\) as 0.28. That is, the \\(\\alpha_j\\)s are about -1.36 give-or-take 0.28 or so. But here’s the useful part. We can take this \\(\\hat{\\mu}\\) and \\(\\hat{\\sigma}\\) and use them as a Bayesian prior for the individual \\(\\alpha_j\\)s. Each \\(\\alpha_j\\) has a likelihood (using the data from that district) and a prior (using \\(\\hat{\\mu}\\) and \\(\\hat{\\sigma}\\)). re &lt;- ranef(fit)$District[, &quot;(Intercept)&quot;] # this is centered at zero (i.e., alpha - mu) fe &lt;- fixef(fit)[&quot;(Intercept)&quot;] # mu alpha_hat &lt;- fe + re pi_hat &lt;- plogis(fe + re) In this case, it’s easy to use predict() to get this same estimates. (The predict() approach is a little safer because it’s easier to keep the pi_hat and the Distrit label together.) hier_estimates &lt;- tibble(District = unique(finland$District)) %&gt;% mutate(pi_hat = predict(fit, newdata = ., type = &quot;response&quot;)) %&gt;% glimpse() ## Rows: 14 ## Columns: 2 ## $ District &lt;fct&gt; 304, 313, 310, 309, 312, 311, 307, 317, 314, 308, 305, 316, 3… ## $ pi_hat &lt;dbl&gt; 0.2168025, 0.2430919, 0.1825310, 0.2553104, 0.1541672, 0.1892… We can add this to our plot to see how the estimates changed. Notice that our new estimate for 309 is now at the very bottom of our initial confidence interval. gg4 &lt;- gg3 + geom_point(data = hier_estimates, aes(y = pi_hat), color = &quot;#d95f02&quot;, shape = 10, size = 3) print(gg4) We can compare the initial ML estimates to the hierarchical model estimates. comb &lt;- bind_rows(list(&quot;initial ML&quot; = estimates, &quot;hierarchical&quot; = hier_estimates), .id = &quot;type&quot;) %&gt;% glimpse() ## Rows: 28 ## Columns: 5 ## $ type &lt;chr&gt; &quot;initial ML&quot;, &quot;initial ML&quot;, &quot;initial ML&quot;, &quot;initial ML&quot;, &quot;init… ## $ District &lt;fct&gt; 312, 316, 305, 315, 306, 310, 311, 304, 307, 317, 314, 313, 3… ## $ pi_hat &lt;dbl&gt; 0.08955224, 0.11904762, 0.13043478, 0.13461538, 0.17073171, 0… ## $ n &lt;int&gt; 67, 42, 46, 52, 41, 196, 91, 171, 106, 72, 117, 79, 87, 25, N… ## $ se_hat &lt;dbl&gt; 0.03488417, 0.04997030, 0.04965567, 0.04733150, 0.05876418, 0… ggplot(comb, aes(x = pi_hat, y = type)) + geom_point(alpha = 0.5) + geom_line(aes(group = District), alpha = 0.5) + theme_bw() It’s helpful to think of these approaches in terms of the amount of information they borrow across groups. No Pooling. Assume the groups are different, and that nothing can be learned from the other groups. Estimate each group separately. Complete Pooling. Assume the groups are identical. Collapse all the groups together to estimate the single, common estimate. Partial Pooling. A compromise between the two extremes above. Assume the groups are different, but similar. Estimate the amount of similarity using the data, and pool the estimates toward a common estimate accordingly. We did not implement complete pooling above, but we can do it here to compare the three approaches. common_estimate &lt;- tibble(District = unique(finland$District)) %&gt;% mutate(pi_hat = mean(finland$Contacted)) %&gt;% glimpse() ## Rows: 14 ## Columns: 2 ## $ District &lt;fct&gt; 304, 313, 310, 309, 312, 311, 307, 317, 314, 308, 305, 316, 3… ## $ pi_hat &lt;dbl&gt; 0.2088926, 0.2088926, 0.2088926, 0.2088926, 0.2088926, 0.2088… comb &lt;- bind_rows(list(&quot;No Pooling&quot; = estimates, &quot;Partial Pooling&quot; = hier_estimates, &quot;Complete Pooling&quot; = common_estimate), .id = &quot;type&quot;) %&gt;% mutate(type = reorder(type, pi_hat, var)) %&gt;% glimpse() ## Rows: 42 ## Columns: 5 ## $ type &lt;fct&gt; No Pooling, No Pooling, No Pooling, No Pooling, No Pooling, N… ## $ District &lt;fct&gt; 312, 316, 305, 315, 306, 310, 311, 304, 307, 317, 314, 313, 3… ## $ pi_hat &lt;dbl&gt; 0.08955224, 0.11904762, 0.13043478, 0.13461538, 0.17073171, 0… ## $ n &lt;int&gt; 67, 42, 46, 52, 41, 196, 91, 171, 106, 72, 117, 79, 87, 25, N… ## $ se_hat &lt;dbl&gt; 0.03488417, 0.04997030, 0.04965567, 0.04733150, 0.05876418, 0… ggplot(comb, aes(x = pi_hat, y = type)) + geom_point(alpha = 0.5) + geom_line(aes(group = District), alpha = 0.5) + theme_bw() "],["example-contact-in-the-uk.html", "7.2 Example: Contact in the UK", " 7.2 Example: Contact in the UK uk &lt;- read.csv(&quot;data/uk.csv&quot;) %&gt;% mutate(District = as.factor(District), District = reorder(District, Contacted)) %&gt;% glimpse() ## Rows: 858 ## Columns: 3 ## $ District &lt;fct&gt; 492, 492, 492, 492, 492, 374, 350, 350, 350, … ## $ District.Competitiveness &lt;dbl&gt; 0.4842323, 0.4842323, 0.4842323, 0.4842323, 0… ## $ Contacted &lt;int&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, … no_pooling &lt;- uk %&gt;% group_by(District) %&gt;% summarize(pi_hat = mean(Contacted)) complete_pooling &lt;- tibble(District = unique(uk$District)) %&gt;% mutate(pi_hat = mean(uk$Contacted)) %&gt;% glimpse() ## Rows: 263 ## Columns: 2 ## $ District &lt;fct&gt; 492, 374, 350, 463, 393, 392, 366, 432, 375, 385, 377, 378, 4… ## $ pi_hat &lt;dbl&gt; 0.3193473, 0.3193473, 0.3193473, 0.3193473, 0.3193473, 0.3193… fit &lt;- glmer(Contacted ~ (1 | District), data = uk, family = binomial) partial_pooling &lt;- uk %&gt;% select(District, District.Competitiveness) %&gt;% distinct() %&gt;% mutate(pi_hat = predict(fit, newdata = ., type = &quot;response&quot;)) %&gt;% glimpse() ## Rows: 263 ## Columns: 3 ## $ District &lt;fct&gt; 492, 374, 350, 463, 393, 392, 366, 432, 375, … ## $ District.Competitiveness &lt;dbl&gt; 0.4842323, 0.5100964, 0.5395393, 0.4544912, 0… ## $ pi_hat &lt;dbl&gt; 0.1962545, 0.2660305, 0.2814319, 0.3054097, 0… comb &lt;- bind_rows(list(&quot;No Pooling&quot; = no_pooling, &quot;Partial Pooling&quot; = partial_pooling, &quot;Complete Pooling&quot; = complete_pooling), .id = &quot;type&quot;) %&gt;% mutate(type = reorder(type, pi_hat, var)) %&gt;% glimpse() ## Rows: 789 ## Columns: 4 ## $ type &lt;fct&gt; No Pooling, No Pooling, No Pooling, No Poolin… ## $ District &lt;fct&gt; 319, 320, 323, 328, 330, 331, 337, 338, 339, … ## $ pi_hat &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ District.Competitiveness &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ggplot(comb, aes(x = pi_hat, y = type)) + geom_point(alpha = 0.5) + geom_line(aes(group = District), alpha = 0.5) + theme_bw() We can also add predictors of the random paramaters, such as the competitiveness of the district. ggplot(partial_pooling, aes(x = District.Competitiveness, y = pi_hat)) + geom_point() fit &lt;- glmer(Contacted ~ District.Competitiveness + (1 | District), data = uk, family = binomial) partial_pooling &lt;- uk %&gt;% select(District, District.Competitiveness) %&gt;% distinct() %&gt;% mutate(pi_hat = predict(fit, newdata = ., type = &quot;response&quot;)) %&gt;% glimpse() ## Rows: 263 ## Columns: 3 ## $ District &lt;fct&gt; 492, 374, 350, 463, 393, 392, 366, 432, 375, … ## $ District.Competitiveness &lt;dbl&gt; 0.4842323, 0.5100964, 0.5395393, 0.4544912, 0… ## $ pi_hat &lt;dbl&gt; 0.1406727, 0.1813705, 0.2184358, 0.1862562, 0… ggplot(partial_pooling, aes(x = District.Competitiveness, y = pi_hat)) + geom_point() comb &lt;- bind_rows(list(&quot;No Pooling&quot; = no_pooling, &quot;Partial Pooling&quot; = partial_pooling, &quot;Complete Pooling&quot; = complete_pooling), .id = &quot;type&quot;) %&gt;% mutate(type = reorder(type, pi_hat, var)) %&gt;% glimpse() ## Rows: 789 ## Columns: 4 ## $ type &lt;fct&gt; No Pooling, No Pooling, No Pooling, No Poolin… ## $ District &lt;fct&gt; 319, 320, 323, 328, 330, 331, 337, 338, 339, … ## $ pi_hat &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ District.Competitiveness &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ggplot(comb, aes(x = pi_hat, y = type)) + geom_point(alpha = 0.5) + geom_line(aes(group = District), alpha = 0.5) + theme_bw() "],["hierarchical-models-in-general.html", "7.3 Hierarchical Models in General", " 7.3 Hierarchical Models in General "],["rainey-2015.html", "7.4 Rainey (2015)", " 7.4 Rainey (2015) rainey &lt;- read_csv(&quot;data/rainey_ld.csv&quot;) # # model is fragile # fit &lt;- glmer(Contacted ~ District.Competitiveness*PR + # (1 | District.Country) + # (1 + District.Competitiveness | Alpha.Polity), # data = rainey, family = binomial) # # arm::display(fit) library(rstanarm) stan_fit &lt;- stan_glmer(Contacted ~ District.Competitiveness*PR + (1 | District.Country) + (1 + District.Competitiveness | Alpha.Polity), data = rainey, family = binomial, chains = 1, iter = 1000) library(tidybayes) # compute posterior average for each district pred_district &lt;- rainey %&gt;% select(District.Country, Alpha.Polity, District.Competitiveness, PR) %&gt;% add_epred_draws(stan_fit) %&gt;% summarize(post_avg = mean(.epred)) %&gt;% glimpse() ## `summarise()` has grouped output by &#39;District.Country&#39;, &#39;Alpha.Polity&#39;, ## &#39;District.Competitiveness&#39;, &#39;PR&#39;. You can override using the `.groups` ## argument. ## Rows: 5,126 ## Columns: 6 ## Groups: District.Country, Alpha.Polity, District.Competitiveness, PR [567] ## $ District.Country &lt;chr&gt; &quot;Canada10001&quot;, &quot;Canada10001&quot;, &quot;Canada10002&quot;, … ## $ Alpha.Polity &lt;chr&gt; &quot;Canada&quot;, &quot;Canada&quot;, &quot;Canada&quot;, &quot;Canada&quot;, &quot;Cana… ## $ District.Competitiveness &lt;dbl&gt; 0.6103417, 0.6103417, 0.8215946, 0.8215946, 0… ## $ PR &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ .row &lt;int&gt; 5, 11, 10, 14, 12, 13, 2, 15, 3, 4, 17, 6, 7,… ## $ post_avg &lt;dbl&gt; 0.5634674, 0.5634674, 0.7011130, 0.7011130, 0… # compute posterior average for each country (in a &#39;typical&#39; district) pred_country &lt;- rainey %&gt;% select(District.Country, Alpha.Polity, District.Competitiveness, PR) %&gt;% add_epred_draws(stan_fit, re_formula = ~ (1 + District.Competitiveness | Alpha.Polity)) %&gt;% summarize(post_avg = mean(.epred)) %&gt;% glimpse() ## `summarise()` has grouped output by &#39;District.Country&#39;, &#39;Alpha.Polity&#39;, ## &#39;District.Competitiveness&#39;, &#39;PR&#39;. You can override using the `.groups` ## argument. ## Rows: 5,126 ## Columns: 6 ## Groups: District.Country, Alpha.Polity, District.Competitiveness, PR [567] ## $ District.Country &lt;chr&gt; &quot;Canada10001&quot;, &quot;Canada10001&quot;, &quot;Canada10002&quot;, … ## $ Alpha.Polity &lt;chr&gt; &quot;Canada&quot;, &quot;Canada&quot;, &quot;Canada&quot;, &quot;Canada&quot;, &quot;Cana… ## $ District.Competitiveness &lt;dbl&gt; 0.6103417, 0.6103417, 0.8215946, 0.8215946, 0… ## $ PR &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ .row &lt;int&gt; 5, 11, 10, 14, 12, 13, 2, 15, 3, 4, 17, 6, 7,… ## $ post_avg &lt;dbl&gt; 0.5086295, 0.5086295, 0.7304382, 0.7304382, 0… # plot ggplot(pred_district, aes(x = District.Competitiveness, y = post_avg)) + facet_wrap(vars(Alpha.Polity)) + geom_point() + geom_line(data = pred_country, color = &quot;red&quot;, size = 1.5) ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
