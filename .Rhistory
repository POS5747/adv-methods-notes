beta_tilde <- mvtnorm::rmvnorm(2000, mean = coef(fit), sigma = vcov(fit))
# print first few rows
head(beta_tilde)
# create scenario of interest
scenario <- tibble(
neweduc = median(scobit$neweduc),
closing = min(scobit$closing):max(scobit$closing),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# convert to matrix
mf <- model.frame(f, scenario)
# convert to matrix
f_scenario <- update(f, ~ .)  # remove rhs for use below
mf <- model.frame(f_scenario, scenario)
# convert to matrix
f_scenario <- update(f, ~ .)  # remove rhs for use below
f_scenario
# convert to matrix
f_scenario <- update(f, ~ .)  # remove rhs for use below
f
?update.formula
# convert to matrix
f_scenario <- update(f, NULL ~ .)  # remove rhs for use below
mf <- model.frame(f_scenario, scenario)
f_scenario
X_s <- model.matrix(mf, scenario)
X_s
mu_tilde <- X_s%*%beta_tilde
mu_tilde <- X_s%*%t(beta_tilde)
mu_tilde
eta_tilde <- X_s%*%t(beta_tilde)  # simulations of linear predictor
pi_tilde <- plogis(eta_tilde)  # simulations of ev or, in this case, "predicted probability"
# create scenario of interest
closing0 <- min(scobit$closing):max(scobit$closing)
scenario <- tibble(
neweduc = median(scobit$neweduc),
closing = closing0,
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf <- model.frame(f_scenario, scenario)
X_s <- model.matrix(mf, scenario)
eta_tilde <- X_s%*%t(beta_tilde)  # simulations of linear predictor
pi_tilde <- plogis(eta_tilde)  # simulations of ev or, in this case, "predicted probability"
pi_tilde
# compute 90% ci with percentiles
apply(pi_tilde, 1, probs = c(0.05, 0.95))
# compute 90% ci with percentiles
apply(pi_tilde, 1, quantile, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations
eta_hat <- X_s%*%coef(fit)
pi_hat <- plogis(eta_hat)
pi_hat
# compute 90% ci with percentiles
pi_ci <- apply(pi_tilde, 1, quantile, probs = c(0.05, 0.95))
pi_ci
scenario$pi_lwr <- pi_ci[1, ]
scenario$pi_upr <- pi_ci[1, ]
scenario$pi_upr <- pi_ci[2, ]
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_line() +
geom_ribbon()
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_ribbon(color = "grey50") +
geom_line() +
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_ribbon(color = "grey50") +
geom_line()
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_ribbon(color = "grey50") +
geom_line()
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_ribbon(color = "grey90") +
geom_line()
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_ribbon(fill = "grey90") +
geom_line()
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_ribbon(fill = "grey50") +
geom_line()
# create scenario of interest
scenario <- tibble(
neweduc = median(scobit$neweduc),
closing = closing0,
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf <- model.frame(f_scenario, scenario)
X_s <- model.matrix(mf, scenario)
# transform simulations of beta into eta and pi
eta_tilde <- X_s%*%t(beta_tilde)  # simulations of linear predictor
pi_tilde <- plogis(eta_tilde)  # simulations of expected value or, in this case, "predicted probability"
# compute 90% ci with percentiles
pi_ci <- apply(pi_tilde, 1, quantile, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations
# another note: I don't recommend using the mean of the *_tildes
eta_hat <- X_s%*%coef(fit)
pi_hat <- plogis(eta_hat)
# add all of this back into scenario
scenario$pi_hat <- pi_hat
scenario$pi_lwr <- pi_ci[1, ]
scenario$pi_upr <- pi_ci[2, ]
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_ribbon(fill = "grey50") +
geom_line()
# create scenario of interest
scenario <- tibble(
neweduc = median(scobit$neweduc),
closing = min(scobit$closing):max(scobit$closing),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf <- model.frame(f_scenario, scenario)
X_s <- model.matrix(mf, scenario)
# transform simulations of beta into eta and pi
eta_tilde <- X_s%*%t(beta_tilde)  # simulations of linear predictor
pi_tilde <- plogis(eta_tilde)  # simulations of expected value or, in this case, "predicted probability"
# compute 90% ci with percentiles
pi_ci <- apply(pi_tilde, 1, quantile, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations
# another note: I don't recommend using the mean of the *_tildes
eta_hat <- X_s%*%coef(fit)
pi_hat <- plogis(eta_hat)
# add all of this back into scenario
scenario$pi_hat <- pi_hat
scenario$pi_lwr <- pi_ci[1, ]
scenario$pi_upr <- pi_ci[2, ]
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_ribbon(fill = "grey50") +
geom_line()
scenario_hi <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(closing, probs = 0.25),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# create scenarios of interest
scenario_lo <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(closing, probs = 0.25),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov))
# create scenarios of interest
scenario_lo <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(cobit$closing, probs = 0.25),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov))
scenario_hi <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.25),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# create scenarios of interest
scenario_lo <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.25),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov))
scenario_hi <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.25),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf_lo <- model.frame(f_scenario, scenario_lo)
X_lo <- model.matrix(mf, scenario_lo)
mf_hi <- model.frame(f_scenario, scenario_hi)
X_hi <- model.matrix(mf, scenario_hi)
# transform simulations of beta into eta and pi
eta_lo_tilde <- X_lo%*%t(beta_tilde)  # simulations of linear predictor
eta_hi_tilde <- X_hi%*%t(beta_tilde)
fd_tilde <- pi_hi_tilde - pi_lo_tilde
fd_tilde <- pi_hi_tilde - pi_lo_tilde # simulations of first-difference
# transform simulations of beta into eta and pi
eta_lo_tilde <- X_lo%*%t(beta_tilde)  # simulations of linear predictor
eta_hi_tilde <- X_hi%*%t(beta_tilde)
pi_hi_tilde <- plogis(eta_hi_tilde)  # simulations of expected value or, in this case, "predicted probability"
# transform simulations of beta into eta and pi
eta_lo_tilde <- X_lo%*%t(beta_tilde)  # simulations of linear predictor
eta_hi_tilde <- X_hi%*%t(beta_tilde)
pi_lo_tilde <- plogis(eta_lo_tilde)  # simulations of expected value or, in this case, "predicted probability"
pi_hi_tilde <- plogis(eta_hi_tilde)
fd_tilde <- pi_hi_tilde - pi_lo_tilde # simulations of first-difference
fd_tilde <- pi_hi_tilde - pi_lo_tilde # simulations of first-difference
# compute 90% ci with percentiles
pi_ci <- apply(pi_tilde, 1, quantile, probs = c(0.05, 0.95))
# compute 90% ci with percentiles
fd_ci <- apply(fd_tilde, 1, quantile, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations
# another note: I don't recommend using the mean of the *_tildes
eta_hat <- X_s%*%coef(fit)
pi_lo_hat <- plogis(eta_lo_hat)
pi_hi_hat <- plogis(eta_hi_hat)
# compute ML estimates
# note: we could use predict(), but I do the matrix computations; predict() will be more reliable
# another note: I don't recommend using the mean of the *_tildes
eta_lo_hat <- X_lo%*%coef(fit)
eta_hi_hat <- X_hi%*%coef(fit)
pi_lo_hat <- plogis(eta_lo_hat)
pi_hi_hat <- plogis(eta_hi_hat)
fd_hat <- pi_hi_hat - pi_lo_hat
fd_hat <- pi_hi_hat - pi_lo_hat
# compute 90% ci with percentiles
fd_ci <- quantile(fd_ci, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations; predict() will be more reliable
# another note: I don't recommend using the mean of the *_tildes
eta_lo_hat <- X_lo%*%coef(fit)
eta_hi_hat <- X_hi%*%coef(fit)
pi_lo_hat <- plogis(eta_lo_hat)
pi_hi_hat <- plogis(eta_hi_hat)
fd_hat <- pi_hi_hat - pi_lo_hat
print(fd_ci, digits = 2)
# print the results
print(fd_hat, digits = 2)
scenario_hi <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.75),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf_lo <- model.frame(f_scenario, scenario_lo)
X_lo <- model.matrix(mf, scenario_lo)
mf_hi <- model.frame(f_scenario, scenario_hi)
X_hi <- model.matrix(mf, scenario_hi)
# transform simulations of beta into eta and pi
eta_lo_tilde <- X_lo%*%t(beta_tilde)  # simulations of linear predictor
eta_hi_tilde <- X_hi%*%t(beta_tilde)
pi_lo_tilde <- plogis(eta_lo_tilde)  # simulations of expected value or, in this case, "predicted probability"
pi_hi_tilde <- plogis(eta_hi_tilde)
fd_tilde <- pi_hi_tilde - pi_lo_tilde # simulations of first-difference
# compute 90% ci with percentiles
fd_ci <- quantile(fd_ci, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations; predict() will be more reliable
# another note: I don't recommend using the mean of the *_tildes
eta_lo_hat <- X_lo%*%coef(fit)
eta_hi_hat <- X_hi%*%coef(fit)
pi_lo_hat <- plogis(eta_lo_hat)
pi_hi_hat <- plogis(eta_hi_hat)
fd_hat <- pi_hi_hat - pi_lo_hat
# print the results
print(fd_hat, digits = 2)
print(fd_ci, digits = 2)
# create scenarios of interest
scenario_lo <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.25),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov))
scenario_hi <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.75),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf_lo <- model.frame(f_scenario, scenario_lo)
X_lo <- model.matrix(mf, scenario_lo)
mf_hi <- model.frame(f_scenario, scenario_hi)
X_hi <- model.matrix(mf, scenario_hi)
# transform simulations of beta into eta and pi
eta_lo_tilde <- X_lo%*%t(beta_tilde)  # simulations of linear predictor
eta_hi_tilde <- X_hi%*%t(beta_tilde)
pi_lo_tilde <- plogis(eta_lo_tilde)  # simulations of expected value or, in this case, "predicted probability"
pi_hi_tilde <- plogis(eta_hi_tilde)
fd_tilde <- pi_hi_tilde - pi_lo_tilde # simulations of first-difference
# compute 90% ci with percentiles
fd_ci <- quantile(fd_ci, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations; predict() will be more reliable
# another note: I don't recommend using the mean of the *_tildes
eta_lo_hat <- X_lo%*%coef(fit)
eta_hi_hat <- X_hi%*%coef(fit)
pi_lo_hat <- plogis(eta_lo_hat)
pi_hi_hat <- plogis(eta_hi_hat)
fd_hat <- pi_hi_hat - pi_lo_hat
fd_tilde
fd_tilde <- as.numeric(pi_hi_tilde - pi_lo_tilde) # simulations of first-difference; as.numeric() needed b/c it's a matrix and I to simplify it to a vector
# transform simulations of beta into eta, pi, and fd
eta_lo_tilde <- X_lo%*%t(beta_tilde)  # simulations of linear predictor
eta_hi_tilde <- X_hi%*%t(beta_tilde)
pi_lo_tilde <- plogis(eta_lo_tilde)  # simulations of expected value or, in this case, "predicted probability"
pi_hi_tilde <- plogis(eta_hi_tilde)
fd_tilde <- as.numeric(pi_hi_tilde - pi_lo_tilde) # simulations of first-difference; as.numeric() needed b/c it's a matrix and I to simplify it to a vector
# compute 90% ci with percentiles
fd_ci <- quantile(fd_ci, probs = c(0.05, 0.95))
fd_ci
pi_hi_tilde - pi_lo_tilde
pi_hi_tilde
beta_tilde
# create scenarios of interest
scenario_lo <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.25),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov))
scenario_hi <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.75),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf_lo <- model.frame(f_scenario, scenario_lo)
X_lo <- model.matrix(mf, scenario_lo)
mf_hi <- model.frame(f_scenario, scenario_hi)
X_hi <- model.matrix(mf, scenario_hi)
scenario_hi <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 1.0),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# create scenarios of interest
scenario_lo <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.0),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov))
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf_lo <- model.frame(f_scenario, scenario_lo)
X_lo <- model.matrix(mf, scenario_lo)
mf_hi <- model.frame(f_scenario, scenario_hi)
X_hi <- model.matrix(mf, scenario_hi)
# transform simulations of beta into eta, pi, and fd
eta_lo_tilde <- X_lo%*%t(beta_tilde)  # simulations of linear predictor
eta_hi_tilde <- X_hi%*%t(beta_tilde)
pi_lo_tilde <- plogis(eta_lo_tilde)  # simulations of expected value or, in this case, "predicted probability"
pi_hi_tilde <- plogis(eta_hi_tilde)
fd_tilde <- as.numeric(pi_hi_tilde - pi_lo_tilde) # simulations of first-difference; as.numeric() needed b/c it's a matrix and I to simplify it to a vector
# compute 90% ci with percentiles
fd_ci <- quantile(fd_ci, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations; predict() will be more reliable
# another note: I don't recommend using the mean of the *_tildes
eta_lo_hat <- X_lo%*%coef(fit)
eta_hi_hat <- X_hi%*%coef(fit)
pi_lo_hat <- plogis(eta_lo_hat)
pi_hi_hat <- plogis(eta_hi_hat)
fd_hat <- pi_hi_hat - pi_lo_hat
# print the results
print(fd_hat, digits = 2)
print(fd_ci, digits = 2)
fd_ci
as.numeric(pi_hi_tilde - pi_lo_tilde)
print(fd_ci, digits = 4)
quantile(fd_ci, probs = c(0.05, 0.95))
fd_ci
# compute 90% ci with percentiles
fd_ci <- quantile(fd_tilde, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations; predict() will be more reliable
# another note: I don't recommend using the mean of the *_tildes
eta_lo_hat <- X_lo%*%coef(fit)
eta_hi_hat <- X_hi%*%coef(fit)
pi_lo_hat <- plogis(eta_lo_hat)
pi_hi_hat <- plogis(eta_hi_hat)
fd_hat <- pi_hi_hat - pi_lo_hat
# print the results
print(fd_hat, digits = 2)
print(fd_ci, digits = 4)
# create scenarios of interest
scenario_lo <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 0.0),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov))
scenario_hi <- tibble(
neweduc = median(scobit$neweduc),
closing = quantile(scobit$closing, probs = 1.0),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov)) %>%
glimpse()
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf_lo <- model.frame(f_scenario, scenario_lo)
X_lo <- model.matrix(mf, scenario_lo)
mf_hi <- model.frame(f_scenario, scenario_hi)
X_hi <- model.matrix(mf, scenario_hi)
# transform simulations of beta into eta, pi, and fd
eta_lo_tilde <- X_lo%*%t(beta_tilde)  # simulations of linear predictor
eta_hi_tilde <- X_hi%*%t(beta_tilde)
pi_lo_tilde <- plogis(eta_lo_tilde)  # simulations of expected value or, in this case, "predicted probability"
pi_hi_tilde <- plogis(eta_hi_tilde)
fd_tilde <- as.numeric(pi_hi_tilde - pi_lo_tilde) # simulations of first-difference; as.numeric() needed b/c it's a matrix and I to simplify it to a vector
# compute 90% ci with percentiles
fd_ci <- quantile(fd_tilde, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations; predict() will be more reliable
# another note: I don't recommend using the mean of the *_tildes
eta_lo_hat <- X_lo%*%coef(fit)
eta_hi_hat <- X_hi%*%coef(fit)
pi_lo_hat <- plogis(eta_lo_hat)
pi_hi_hat <- plogis(eta_hi_hat)
fd_hat <- pi_hi_hat - pi_lo_hat
# print the results
print(fd_hat, digits = 2)
print(fd_ci, digits = 4)
?beta_tilde
head(beta_tilde)
beta_tilde[, "closing"]
me_tilde <- beta_tilde[, "closing"]*pi_tilde*(1 - pi_tilde)
me_tilde
me_hat <- coef(fit)["closing"]*pi_hat*(1 - pi_hat)
# add all of this back into scenario
scenario$me_hat <- me_hat
scenario$me_lwr <- me_ci[1, ]
scenario$me_upr <- me_ci[2, ]
# transform simulations of beta into eta and pi
eta_tilde <- X_s%*%t(beta_tilde)  # simulations of linear predictor
pi_tilde <- plogis(eta_tilde)  # simulations of expected value or, in this case, "predicted probability"
me_tilde <- beta_tilde[, "closing"]*pi_tilde*(1 - pi_tilde)
# compute 90% ci with percentiles
me_ci <- apply(me_tilde, 1, quantile, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations
# another note: I don't recommend using the mean of the *_tildes
eta_hat <- X_s%*%coef(fit)
pi_hat <- plogis(eta_hat)
me_hat <- coef(fit)["closing"]*pi_hat*(1 - pi_hat)
# add all of this back into scenario
scenario$me_hat <- me_hat
scenario$me_lwr <- me_ci[1, ]
scenario$me_upr <- me_ci[2, ]
# plot the results
ggplot(scenario, aes(x = closing, y = pi_hat, ymin = pi_lwr, ymax = pi_upr)) +
geom_ribbon(fill = "grey50") +
geom_line()
# plot the results
ggplot(scenario, aes(x = closing, y = me_hat, ymin = me_lwr, ymax = me_upr)) +
geom_ribbon(fill = "grey50") +
geom_line()
# create scenario of interest
scenario <- tibble(
neweduc = median(scobit$neweduc),
closing = min(scobit$closing):max(scobit$closing),
age = median(scobit$age),
south = median(scobit$south),
gov = median(scobit$gov))
# convert scenario data frame to matrix X_s
f_scenario <- update(f, NULL ~ .)  # remove lhs for use below
mf <- model.frame(f_scenario, scenario)
X_s <- model.matrix(mf, scenario)
# transform simulations of beta into eta, pi, and me
eta_tilde <- X_s%*%t(beta_tilde)  # simulations of linear predictor
pi_tilde <- plogis(eta_tilde)  # simulations of expected value or, in this case, "predicted probability"
me_tilde <- beta_tilde[, "closing"]*pi_tilde*(1 - pi_tilde)
# compute 90% ci with percentiles
me_ci <- apply(me_tilde, 1, quantile, probs = c(0.05, 0.95))
# compute ML estimates
# note: we could use predict(), but I do the matrix computations
# another note: I don't recommend using the mean of the *_tildes
eta_hat <- X_s%*%coef(fit)
pi_hat <- plogis(eta_hat)
me_hat <- coef(fit)["closing"]*pi_hat*(1 - pi_hat)
# add all of this back into scenario
scenario$me_hat <- me_hat
scenario$me_lwr <- me_ci[1, ]
scenario$me_upr <- me_ci[2, ]
# plot the results
ggplot(scenario, aes(x = closing, y = me_hat, ymin = me_lwr, ymax = me_upr)) +
geom_ribbon(fill = "grey50") +
geom_line()
